/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.api;

import com.slascone.ApiCallback;
import com.slascone.ApiClient;
import com.slascone.ApiException;
import com.slascone.ApiResponse;
import com.slascone.Configuration;
import com.slascone.Pair;
import com.slascone.ProgressRequestBody;
import com.slascone.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.slascone.model.AnalyticalHeartbeatDto;
import com.slascone.model.AnalyticalHeartbeatResponseErrors;
import com.slascone.model.ConsumptionDto;
import com.slascone.model.ConsumptionHeartbeatResponseErrors;
import com.slascone.model.ConsumptionRollbackResponseErrors;
import com.slascone.model.ConsumptionTransactionDto;
import com.slascone.model.FullConsumptionHeartbeatDto;
import com.slascone.model.FullUsageHeartbeatByNameDto;
import com.slascone.model.FullUsageHeartbeatDto;
import com.slascone.model.ProblemDetails;
import java.util.UUID;
import com.slascone.model.UsageHeartbeatByFeatureNameResponseErrors;
import com.slascone.model.UsageHeartbeatResponseErrors;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataGatheringApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataGatheringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataGatheringApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAnalyticalHeartbeat
     * @param isvId  (required)
     * @param analyticalHeartbeatDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAnalyticalHeartbeatCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AnalyticalHeartbeatDto analyticalHeartbeatDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyticalHeartbeatDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_gathering/analytical_heartbeats"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAnalyticalHeartbeatValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AnalyticalHeartbeatDto analyticalHeartbeatDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling addAnalyticalHeartbeat(Async)");
        }

        // verify the required parameter 'analyticalHeartbeatDto' is set
        if (analyticalHeartbeatDto == null) {
            throw new ApiException("Missing the required parameter 'analyticalHeartbeatDto' when calling addAnalyticalHeartbeat(Async)");
        }

        return addAnalyticalHeartbeatCall(isvId, analyticalHeartbeatDto, _callback);

    }

    /**
     * Creates an analytical heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016055537-PRODUCT-ANALYTICS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param analyticalHeartbeatDto  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public String addAnalyticalHeartbeat(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AnalyticalHeartbeatDto analyticalHeartbeatDto) throws ApiException {
        ApiResponse<String> localVarResp = addAnalyticalHeartbeatWithHttpInfo(isvId, analyticalHeartbeatDto);
        return localVarResp.getData();
    }

    /**
     * Creates an analytical heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016055537-PRODUCT-ANALYTICS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param analyticalHeartbeatDto  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> addAnalyticalHeartbeatWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AnalyticalHeartbeatDto analyticalHeartbeatDto) throws ApiException {
        okhttp3.Call localVarCall = addAnalyticalHeartbeatValidateBeforeCall(isvId, analyticalHeartbeatDto, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an analytical heartbeat (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016055537-PRODUCT-ANALYTICS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param analyticalHeartbeatDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAnalyticalHeartbeatAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AnalyticalHeartbeatDto analyticalHeartbeatDto, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAnalyticalHeartbeatValidateBeforeCall(isvId, analyticalHeartbeatDto, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addConsumptionHeartbeat
     * @param isvId  (required)
     * @param fullConsumptionHeartbeatDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addConsumptionHeartbeatCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullConsumptionHeartbeatDto fullConsumptionHeartbeatDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fullConsumptionHeartbeatDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_gathering/consumption_heartbeats"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addConsumptionHeartbeatValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullConsumptionHeartbeatDto fullConsumptionHeartbeatDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling addConsumptionHeartbeat(Async)");
        }

        // verify the required parameter 'fullConsumptionHeartbeatDto' is set
        if (fullConsumptionHeartbeatDto == null) {
            throw new ApiException("Missing the required parameter 'fullConsumptionHeartbeatDto' when calling addConsumptionHeartbeat(Async)");
        }

        return addConsumptionHeartbeatCall(isvId, fullConsumptionHeartbeatDto, _callback);

    }

    /**
     * Creates a consumption heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param fullConsumptionHeartbeatDto  (required)
     * @return List&lt;ConsumptionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public List<ConsumptionDto> addConsumptionHeartbeat(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullConsumptionHeartbeatDto fullConsumptionHeartbeatDto) throws ApiException {
        ApiResponse<List<ConsumptionDto>> localVarResp = addConsumptionHeartbeatWithHttpInfo(isvId, fullConsumptionHeartbeatDto);
        return localVarResp.getData();
    }

    /**
     * Creates a consumption heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param fullConsumptionHeartbeatDto  (required)
     * @return ApiResponse&lt;List&lt;ConsumptionDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConsumptionDto>> addConsumptionHeartbeatWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullConsumptionHeartbeatDto fullConsumptionHeartbeatDto) throws ApiException {
        okhttp3.Call localVarCall = addConsumptionHeartbeatValidateBeforeCall(isvId, fullConsumptionHeartbeatDto, null);
        Type localVarReturnType = new TypeToken<List<ConsumptionDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a consumption heartbeat (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param fullConsumptionHeartbeatDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addConsumptionHeartbeatAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullConsumptionHeartbeatDto fullConsumptionHeartbeatDto, final ApiCallback<List<ConsumptionDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addConsumptionHeartbeatValidateBeforeCall(isvId, fullConsumptionHeartbeatDto, _callback);
        Type localVarReturnType = new TypeToken<List<ConsumptionDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addUsageHeartbeat
     * @param isvId  (required)
     * @param fullUsageHeartbeatDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUsageHeartbeatCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatDto fullUsageHeartbeatDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fullUsageHeartbeatDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_gathering/usage_heartbeats"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUsageHeartbeatValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatDto fullUsageHeartbeatDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling addUsageHeartbeat(Async)");
        }

        // verify the required parameter 'fullUsageHeartbeatDto' is set
        if (fullUsageHeartbeatDto == null) {
            throw new ApiException("Missing the required parameter 'fullUsageHeartbeatDto' when calling addUsageHeartbeat(Async)");
        }

        return addUsageHeartbeatCall(isvId, fullUsageHeartbeatDto, _callback);

    }

    /**
     * Creates a usage heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016055537-PRODUCT-ANALYTICS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param fullUsageHeartbeatDto  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public String addUsageHeartbeat(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatDto fullUsageHeartbeatDto) throws ApiException {
        ApiResponse<String> localVarResp = addUsageHeartbeatWithHttpInfo(isvId, fullUsageHeartbeatDto);
        return localVarResp.getData();
    }

    /**
     * Creates a usage heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016055537-PRODUCT-ANALYTICS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param fullUsageHeartbeatDto  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> addUsageHeartbeatWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatDto fullUsageHeartbeatDto) throws ApiException {
        okhttp3.Call localVarCall = addUsageHeartbeatValidateBeforeCall(isvId, fullUsageHeartbeatDto, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a usage heartbeat (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016055537-PRODUCT-ANALYTICS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param fullUsageHeartbeatDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUsageHeartbeatAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatDto fullUsageHeartbeatDto, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUsageHeartbeatValidateBeforeCall(isvId, fullUsageHeartbeatDto, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addUsageHeartbeatByName
     * @param isvId  (required)
     * @param fullUsageHeartbeatByNameDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUsageHeartbeatByNameCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatByNameDto fullUsageHeartbeatByNameDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fullUsageHeartbeatByNameDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_gathering/usage_heartbeats_by_name"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUsageHeartbeatByNameValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatByNameDto fullUsageHeartbeatByNameDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling addUsageHeartbeatByName(Async)");
        }

        // verify the required parameter 'fullUsageHeartbeatByNameDto' is set
        if (fullUsageHeartbeatByNameDto == null) {
            throw new ApiException("Missing the required parameter 'fullUsageHeartbeatByNameDto' when calling addUsageHeartbeatByName(Async)");
        }

        return addUsageHeartbeatByNameCall(isvId, fullUsageHeartbeatByNameDto, _callback);

    }

    /**
     * Creates a usage heartbeat (alternative method based on the feature&#39;s name instead of its Id)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016055537-PRODUCT-ANALYTICS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param fullUsageHeartbeatByNameDto  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public String addUsageHeartbeatByName(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatByNameDto fullUsageHeartbeatByNameDto) throws ApiException {
        ApiResponse<String> localVarResp = addUsageHeartbeatByNameWithHttpInfo(isvId, fullUsageHeartbeatByNameDto);
        return localVarResp.getData();
    }

    /**
     * Creates a usage heartbeat (alternative method based on the feature&#39;s name instead of its Id)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016055537-PRODUCT-ANALYTICS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param fullUsageHeartbeatByNameDto  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> addUsageHeartbeatByNameWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatByNameDto fullUsageHeartbeatByNameDto) throws ApiException {
        okhttp3.Call localVarCall = addUsageHeartbeatByNameValidateBeforeCall(isvId, fullUsageHeartbeatByNameDto, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a usage heartbeat (alternative method based on the feature&#39;s name instead of its Id) (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016055537-PRODUCT-ANALYTICS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param fullUsageHeartbeatByNameDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUsageHeartbeatByNameAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull FullUsageHeartbeatByNameDto fullUsageHeartbeatByNameDto, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUsageHeartbeatByNameValidateBeforeCall(isvId, fullUsageHeartbeatByNameDto, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackConsumptionHeartbeat
     * @param isvId  (required)
     * @param consumptionTransactionDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackConsumptionHeartbeatCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ConsumptionTransactionDto consumptionTransactionDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consumptionTransactionDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_gathering/consumption_heartbeats/rollback"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackConsumptionHeartbeatValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ConsumptionTransactionDto consumptionTransactionDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling rollbackConsumptionHeartbeat(Async)");
        }

        // verify the required parameter 'consumptionTransactionDto' is set
        if (consumptionTransactionDto == null) {
            throw new ApiException("Missing the required parameter 'consumptionTransactionDto' when calling rollbackConsumptionHeartbeat(Async)");
        }

        return rollbackConsumptionHeartbeatCall(isvId, consumptionTransactionDto, _callback);

    }

    /**
     * Rollbacks a consumption heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param consumptionTransactionDto  (required)
     * @return ConsumptionDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ConsumptionDto rollbackConsumptionHeartbeat(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ConsumptionTransactionDto consumptionTransactionDto) throws ApiException {
        ApiResponse<ConsumptionDto> localVarResp = rollbackConsumptionHeartbeatWithHttpInfo(isvId, consumptionTransactionDto);
        return localVarResp.getData();
    }

    /**
     * Rollbacks a consumption heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param consumptionTransactionDto  (required)
     * @return ApiResponse&lt;ConsumptionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsumptionDto> rollbackConsumptionHeartbeatWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ConsumptionTransactionDto consumptionTransactionDto) throws ApiException {
        okhttp3.Call localVarCall = rollbackConsumptionHeartbeatValidateBeforeCall(isvId, consumptionTransactionDto, null);
        Type localVarReturnType = new TypeToken<ConsumptionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollbacks a consumption heartbeat (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param consumptionTransactionDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackConsumptionHeartbeatAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ConsumptionTransactionDto consumptionTransactionDto, final ApiCallback<ConsumptionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackConsumptionHeartbeatValidateBeforeCall(isvId, consumptionTransactionDto, _callback);
        Type localVarReturnType = new TypeToken<ConsumptionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
