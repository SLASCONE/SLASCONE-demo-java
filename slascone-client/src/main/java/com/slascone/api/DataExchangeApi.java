/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.api;

import com.slascone.ApiCallback;
import com.slascone.ApiClient;
import com.slascone.ApiException;
import com.slascone.ApiResponse;
import com.slascone.Configuration;
import com.slascone.Pair;
import com.slascone.ProgressRequestBody;
import com.slascone.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.slascone.model.CommonErrorResponse;
import com.slascone.model.CustomerContactDto;
import com.slascone.model.CustomerDto;
import com.slascone.model.DataExchangeAddCustomerDto;
import com.slascone.model.DataExchangeAddCustomerResponseErrors;
import com.slascone.model.DataExchangeAddLicenseByDetailsResponseErrors;
import com.slascone.model.DataExchangeAddLicenseDto;
import com.slascone.model.DataExchangeAddLicenseResponseErrors;
import com.slascone.model.DataExchangeAddOrUpdateCustomerContactDto;
import com.slascone.model.DataExchangeAddOrUpdateCustomerContactErrorResponse;
import com.slascone.model.DataExchangeUpdateCustomerDto;
import com.slascone.model.DataExchangeUpdateCustomerResponseErrors;
import com.slascone.model.DataExchangeUpdateLicenseByDetailsResponseErrors;
import com.slascone.model.DataExchangeUpdateLicenseDto;
import com.slascone.model.DataExchangeUpdateLicenseResponseErrors;
import java.io.File;
import com.slascone.model.ImportResultDto;
import com.slascone.model.LicenseImportByDetailsDto;
import com.slascone.model.LicenseImportByDetailsPatchDto;
import com.slascone.model.LicenseImportByDetailsPutDto;
import com.slascone.model.ProblemDetails;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataExchangeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataExchangeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataExchangeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCustomerAsync
     * @param isvId  (required)
     * @param dataExchangeAddCustomerDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCustomerAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddCustomerDto dataExchangeAddCustomerDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataExchangeAddCustomerDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/customers"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomerAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddCustomerDto dataExchangeAddCustomerDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling addCustomerAsync(Async)");
        }

        // verify the required parameter 'dataExchangeAddCustomerDto' is set
        if (dataExchangeAddCustomerDto == null) {
            throw new ApiException("Missing the required parameter 'dataExchangeAddCustomerDto' when calling addCustomerAsync(Async)");
        }

        return addCustomerAsyncCall(isvId, dataExchangeAddCustomerDto, _callback);

    }

    /**
     * Creates a customer
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;
     * @param isvId  (required)
     * @param dataExchangeAddCustomerDto  (required)
     * @return CustomerDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public CustomerDto addCustomerAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddCustomerDto dataExchangeAddCustomerDto) throws ApiException {
        ApiResponse<CustomerDto> localVarResp = addCustomerAsyncWithHttpInfo(isvId, dataExchangeAddCustomerDto);
        return localVarResp.getData();
    }

    /**
     * Creates a customer
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;
     * @param isvId  (required)
     * @param dataExchangeAddCustomerDto  (required)
     * @return ApiResponse&lt;CustomerDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerDto> addCustomerAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddCustomerDto dataExchangeAddCustomerDto) throws ApiException {
        okhttp3.Call localVarCall = addCustomerAsyncValidateBeforeCall(isvId, dataExchangeAddCustomerDto, null);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a customer (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;
     * @param isvId  (required)
     * @param dataExchangeAddCustomerDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCustomerAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddCustomerDto dataExchangeAddCustomerDto, final ApiCallback<CustomerDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomerAsyncValidateBeforeCall(isvId, dataExchangeAddCustomerDto, _callback);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addLicenseAsync
     * @param isvId  (required)
     * @param dataExchangeAddLicenseDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLicenseAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddLicenseDto dataExchangeAddLicenseDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataExchangeAddLicenseDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/licenses/by_template"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLicenseAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddLicenseDto dataExchangeAddLicenseDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling addLicenseAsync(Async)");
        }

        // verify the required parameter 'dataExchangeAddLicenseDto' is set
        if (dataExchangeAddLicenseDto == null) {
            throw new ApiException("Missing the required parameter 'dataExchangeAddLicenseDto' when calling addLicenseAsync(Async)");
        }

        return addLicenseAsyncCall(isvId, dataExchangeAddLicenseDto, _callback);

    }

    /**
     * Creates a license based on an edition (template)
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param dataExchangeAddLicenseDto  (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public UUID addLicenseAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddLicenseDto dataExchangeAddLicenseDto) throws ApiException {
        ApiResponse<UUID> localVarResp = addLicenseAsyncWithHttpInfo(isvId, dataExchangeAddLicenseDto);
        return localVarResp.getData();
    }

    /**
     * Creates a license based on an edition (template)
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param dataExchangeAddLicenseDto  (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> addLicenseAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddLicenseDto dataExchangeAddLicenseDto) throws ApiException {
        okhttp3.Call localVarCall = addLicenseAsyncValidateBeforeCall(isvId, dataExchangeAddLicenseDto, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a license based on an edition (template) (asynchronously)
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param dataExchangeAddLicenseDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLicenseAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddLicenseDto dataExchangeAddLicenseDto, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLicenseAsyncValidateBeforeCall(isvId, dataExchangeAddLicenseDto, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addLicenseByDetailsAsync
     * @param isvId  (required)
     * @param licenseImportByDetailsDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLicenseByDetailsAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsDto licenseImportByDetailsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseImportByDetailsDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/licenses"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLicenseByDetailsAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsDto licenseImportByDetailsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling addLicenseByDetailsAsync(Async)");
        }

        // verify the required parameter 'licenseImportByDetailsDto' is set
        if (licenseImportByDetailsDto == null) {
            throw new ApiException("Missing the required parameter 'licenseImportByDetailsDto' when calling addLicenseByDetailsAsync(Async)");
        }

        return addLicenseByDetailsAsyncCall(isvId, licenseImportByDetailsDto, _callback);

    }

    /**
     * Creates a license allowing to define all feature/variable/limitation values
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param licenseImportByDetailsDto  (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public UUID addLicenseByDetailsAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsDto licenseImportByDetailsDto) throws ApiException {
        ApiResponse<UUID> localVarResp = addLicenseByDetailsAsyncWithHttpInfo(isvId, licenseImportByDetailsDto);
        return localVarResp.getData();
    }

    /**
     * Creates a license allowing to define all feature/variable/limitation values
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param licenseImportByDetailsDto  (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> addLicenseByDetailsAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsDto licenseImportByDetailsDto) throws ApiException {
        okhttp3.Call localVarCall = addLicenseByDetailsAsyncValidateBeforeCall(isvId, licenseImportByDetailsDto, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a license allowing to define all feature/variable/limitation values (asynchronously)
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param licenseImportByDetailsDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLicenseByDetailsAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsDto licenseImportByDetailsDto, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLicenseByDetailsAsyncValidateBeforeCall(isvId, licenseImportByDetailsDto, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addOrUpdateCustomerContactAsync
     * @param isvId  (required)
     * @param dataExchangeAddOrUpdateCustomerContactDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrUpdateCustomerContactAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddOrUpdateCustomerContactDto dataExchangeAddOrUpdateCustomerContactDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataExchangeAddOrUpdateCustomerContactDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/customers/contacts"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrUpdateCustomerContactAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddOrUpdateCustomerContactDto dataExchangeAddOrUpdateCustomerContactDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling addOrUpdateCustomerContactAsync(Async)");
        }

        // verify the required parameter 'dataExchangeAddOrUpdateCustomerContactDto' is set
        if (dataExchangeAddOrUpdateCustomerContactDto == null) {
            throw new ApiException("Missing the required parameter 'dataExchangeAddOrUpdateCustomerContactDto' when calling addOrUpdateCustomerContactAsync(Async)");
        }

        return addOrUpdateCustomerContactAsyncCall(isvId, dataExchangeAddOrUpdateCustomerContactDto, _callback);

    }

    /**
     * Creates a customer contact
     * 
     * @param isvId  (required)
     * @param dataExchangeAddOrUpdateCustomerContactDto  (required)
     * @return CustomerContactDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public CustomerContactDto addOrUpdateCustomerContactAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddOrUpdateCustomerContactDto dataExchangeAddOrUpdateCustomerContactDto) throws ApiException {
        ApiResponse<CustomerContactDto> localVarResp = addOrUpdateCustomerContactAsyncWithHttpInfo(isvId, dataExchangeAddOrUpdateCustomerContactDto);
        return localVarResp.getData();
    }

    /**
     * Creates a customer contact
     * 
     * @param isvId  (required)
     * @param dataExchangeAddOrUpdateCustomerContactDto  (required)
     * @return ApiResponse&lt;CustomerContactDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerContactDto> addOrUpdateCustomerContactAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddOrUpdateCustomerContactDto dataExchangeAddOrUpdateCustomerContactDto) throws ApiException {
        okhttp3.Call localVarCall = addOrUpdateCustomerContactAsyncValidateBeforeCall(isvId, dataExchangeAddOrUpdateCustomerContactDto, null);
        Type localVarReturnType = new TypeToken<CustomerContactDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a customer contact (asynchronously)
     * 
     * @param isvId  (required)
     * @param dataExchangeAddOrUpdateCustomerContactDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrUpdateCustomerContactAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeAddOrUpdateCustomerContactDto dataExchangeAddOrUpdateCustomerContactDto, final ApiCallback<CustomerContactDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrUpdateCustomerContactAsyncValidateBeforeCall(isvId, dataExchangeAddOrUpdateCustomerContactDto, _callback);
        Type localVarReturnType = new TypeToken<CustomerContactDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadCustomerCsvTemplate
     * @param isvId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadCustomerCsvTemplateCall(@javax.annotation.Nonnull UUID isvId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/customers/download_csv"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadCustomerCsvTemplateValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling downloadCustomerCsvTemplate(Async)");
        }

        return downloadCustomerCsvTemplateCall(isvId, _callback);

    }

    /**
     * Downloads a csv customer file template
     * 
     * @param isvId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public File downloadCustomerCsvTemplate(@javax.annotation.Nonnull UUID isvId) throws ApiException {
        ApiResponse<File> localVarResp = downloadCustomerCsvTemplateWithHttpInfo(isvId);
        return localVarResp.getData();
    }

    /**
     * Downloads a csv customer file template
     * 
     * @param isvId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadCustomerCsvTemplateWithHttpInfo(@javax.annotation.Nonnull UUID isvId) throws ApiException {
        okhttp3.Call localVarCall = downloadCustomerCsvTemplateValidateBeforeCall(isvId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downloads a csv customer file template (asynchronously)
     * 
     * @param isvId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadCustomerCsvTemplateAsync(@javax.annotation.Nonnull UUID isvId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadCustomerCsvTemplateValidateBeforeCall(isvId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadLicenseCsvTemplate
     * @param isvId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadLicenseCsvTemplateCall(@javax.annotation.Nonnull UUID isvId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/licenses/download_csv"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadLicenseCsvTemplateValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling downloadLicenseCsvTemplate(Async)");
        }

        return downloadLicenseCsvTemplateCall(isvId, _callback);

    }

    /**
     * Downloads a csv license file template
     * 
     * @param isvId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public File downloadLicenseCsvTemplate(@javax.annotation.Nonnull UUID isvId) throws ApiException {
        ApiResponse<File> localVarResp = downloadLicenseCsvTemplateWithHttpInfo(isvId);
        return localVarResp.getData();
    }

    /**
     * Downloads a csv license file template
     * 
     * @param isvId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadLicenseCsvTemplateWithHttpInfo(@javax.annotation.Nonnull UUID isvId) throws ApiException {
        okhttp3.Call localVarCall = downloadLicenseCsvTemplateValidateBeforeCall(isvId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downloads a csv license file template (asynchronously)
     * 
     * @param isvId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadLicenseCsvTemplateAsync(@javax.annotation.Nonnull UUID isvId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadLicenseCsvTemplateValidateBeforeCall(isvId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importCustomersFromCsv
     * @param isvId  (required)
     * @param delimiter  (optional)
     * @param overwriteExisting  (optional)
     * @param resumeOnError  (optional)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCustomersFromCsvCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean overwriteExisting, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/customers/import_csv"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (delimiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delimiter", delimiter));
        }

        if (overwriteExisting != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overwrite_existing", overwriteExisting));
        }

        if (resumeOnError != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resume_on_error", resumeOnError));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importCustomersFromCsvValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean overwriteExisting, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling importCustomersFromCsv(Async)");
        }

        return importCustomersFromCsvCall(isvId, delimiter, overwriteExisting, resumeOnError, _file, _callback);

    }

    /**
     * Imports a csv customer file
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param delimiter  (optional)
     * @param overwriteExisting  (optional)
     * @param resumeOnError  (optional)
     * @param _file  (optional)
     * @return ImportResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ImportResultDto importCustomersFromCsv(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean overwriteExisting, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file) throws ApiException {
        ApiResponse<ImportResultDto> localVarResp = importCustomersFromCsvWithHttpInfo(isvId, delimiter, overwriteExisting, resumeOnError, _file);
        return localVarResp.getData();
    }

    /**
     * Imports a csv customer file
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param delimiter  (optional)
     * @param overwriteExisting  (optional)
     * @param resumeOnError  (optional)
     * @param _file  (optional)
     * @return ApiResponse&lt;ImportResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportResultDto> importCustomersFromCsvWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean overwriteExisting, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file) throws ApiException {
        okhttp3.Call localVarCall = importCustomersFromCsvValidateBeforeCall(isvId, delimiter, overwriteExisting, resumeOnError, _file, null);
        Type localVarReturnType = new TypeToken<ImportResultDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Imports a csv customer file (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param delimiter  (optional)
     * @param overwriteExisting  (optional)
     * @param resumeOnError  (optional)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCustomersFromCsvAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean overwriteExisting, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file, final ApiCallback<ImportResultDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = importCustomersFromCsvValidateBeforeCall(isvId, delimiter, overwriteExisting, resumeOnError, _file, _callback);
        Type localVarReturnType = new TypeToken<ImportResultDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importLicensesFromCsv
     * @param isvId  (required)
     * @param productId  (optional)
     * @param delimiter  (optional)
     * @param resumeOnError  (optional)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importLicensesFromCsvCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/licenses/import_csv"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (delimiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delimiter", delimiter));
        }

        if (resumeOnError != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resume_on_error", resumeOnError));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importLicensesFromCsvValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling importLicensesFromCsv(Async)");
        }

        return importLicensesFromCsvCall(isvId, productId, delimiter, resumeOnError, _file, _callback);

    }

    /**
     * Imports a csv license file
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param productId  (optional)
     * @param delimiter  (optional)
     * @param resumeOnError  (optional)
     * @param _file  (optional)
     * @return ImportResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ImportResultDto importLicensesFromCsv(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file) throws ApiException {
        ApiResponse<ImportResultDto> localVarResp = importLicensesFromCsvWithHttpInfo(isvId, productId, delimiter, resumeOnError, _file);
        return localVarResp.getData();
    }

    /**
     * Imports a csv license file
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param productId  (optional)
     * @param delimiter  (optional)
     * @param resumeOnError  (optional)
     * @param _file  (optional)
     * @return ApiResponse&lt;ImportResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportResultDto> importLicensesFromCsvWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file) throws ApiException {
        okhttp3.Call localVarCall = importLicensesFromCsvValidateBeforeCall(isvId, productId, delimiter, resumeOnError, _file, null);
        Type localVarReturnType = new TypeToken<ImportResultDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Imports a csv license file (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param productId  (optional)
     * @param delimiter  (optional)
     * @param resumeOnError  (optional)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importLicensesFromCsvAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String delimiter, @javax.annotation.Nullable Boolean resumeOnError, @javax.annotation.Nullable File _file, final ApiCallback<ImportResultDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = importLicensesFromCsvValidateBeforeCall(isvId, productId, delimiter, resumeOnError, _file, _callback);
        Type localVarReturnType = new TypeToken<ImportResultDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchLicenseByDetailsAsync
     * @param isvId  (required)
     * @param licenseImportByDetailsPatchDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchLicenseByDetailsAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPatchDto licenseImportByDetailsPatchDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseImportByDetailsPatchDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/licenses"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchLicenseByDetailsAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPatchDto licenseImportByDetailsPatchDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling patchLicenseByDetailsAsync(Async)");
        }

        // verify the required parameter 'licenseImportByDetailsPatchDto' is set
        if (licenseImportByDetailsPatchDto == null) {
            throw new ApiException("Missing the required parameter 'licenseImportByDetailsPatchDto' when calling patchLicenseByDetailsAsync(Async)");
        }

        return patchLicenseByDetailsAsyncCall(isvId, licenseImportByDetailsPatchDto, _callback);

    }

    /**
     * Updates a license allowing to define all feature/variable/limitation values
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param licenseImportByDetailsPatchDto  (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public UUID patchLicenseByDetailsAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPatchDto licenseImportByDetailsPatchDto) throws ApiException {
        ApiResponse<UUID> localVarResp = patchLicenseByDetailsAsyncWithHttpInfo(isvId, licenseImportByDetailsPatchDto);
        return localVarResp.getData();
    }

    /**
     * Updates a license allowing to define all feature/variable/limitation values
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param licenseImportByDetailsPatchDto  (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> patchLicenseByDetailsAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPatchDto licenseImportByDetailsPatchDto) throws ApiException {
        okhttp3.Call localVarCall = patchLicenseByDetailsAsyncValidateBeforeCall(isvId, licenseImportByDetailsPatchDto, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a license allowing to define all feature/variable/limitation values (asynchronously)
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param licenseImportByDetailsPatchDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchLicenseByDetailsAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPatchDto licenseImportByDetailsPatchDto, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchLicenseByDetailsAsyncValidateBeforeCall(isvId, licenseImportByDetailsPatchDto, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomerAsync
     * @param isvId  (required)
     * @param dataExchangeUpdateCustomerDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateCustomerDto dataExchangeUpdateCustomerDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataExchangeUpdateCustomerDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/customers"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateCustomerDto dataExchangeUpdateCustomerDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling updateCustomerAsync(Async)");
        }

        // verify the required parameter 'dataExchangeUpdateCustomerDto' is set
        if (dataExchangeUpdateCustomerDto == null) {
            throw new ApiException("Missing the required parameter 'dataExchangeUpdateCustomerDto' when calling updateCustomerAsync(Async)");
        }

        return updateCustomerAsyncCall(isvId, dataExchangeUpdateCustomerDto, _callback);

    }

    /**
     * Updates a customer
     * Based on customer_number &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param dataExchangeUpdateCustomerDto  (required)
     * @return CustomerDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public CustomerDto updateCustomerAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateCustomerDto dataExchangeUpdateCustomerDto) throws ApiException {
        ApiResponse<CustomerDto> localVarResp = updateCustomerAsyncWithHttpInfo(isvId, dataExchangeUpdateCustomerDto);
        return localVarResp.getData();
    }

    /**
     * Updates a customer
     * Based on customer_number &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param dataExchangeUpdateCustomerDto  (required)
     * @return ApiResponse&lt;CustomerDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerDto> updateCustomerAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateCustomerDto dataExchangeUpdateCustomerDto) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerAsyncValidateBeforeCall(isvId, dataExchangeUpdateCustomerDto, null);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a customer (asynchronously)
     * Based on customer_number &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param dataExchangeUpdateCustomerDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateCustomerDto dataExchangeUpdateCustomerDto, final ApiCallback<CustomerDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerAsyncValidateBeforeCall(isvId, dataExchangeUpdateCustomerDto, _callback);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLicenseAsync
     * @param isvId  (required)
     * @param dataExchangeUpdateLicenseDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateLicenseDto dataExchangeUpdateLicenseDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataExchangeUpdateLicenseDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/licenses/by_template"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLicenseAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateLicenseDto dataExchangeUpdateLicenseDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling updateLicenseAsync(Async)");
        }

        // verify the required parameter 'dataExchangeUpdateLicenseDto' is set
        if (dataExchangeUpdateLicenseDto == null) {
            throw new ApiException("Missing the required parameter 'dataExchangeUpdateLicenseDto' when calling updateLicenseAsync(Async)");
        }

        return updateLicenseAsyncCall(isvId, dataExchangeUpdateLicenseDto, _callback);

    }

    /**
     * Updates a license based on an edition (template)
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param dataExchangeUpdateLicenseDto  (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public UUID updateLicenseAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateLicenseDto dataExchangeUpdateLicenseDto) throws ApiException {
        ApiResponse<UUID> localVarResp = updateLicenseAsyncWithHttpInfo(isvId, dataExchangeUpdateLicenseDto);
        return localVarResp.getData();
    }

    /**
     * Updates a license based on an edition (template)
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param dataExchangeUpdateLicenseDto  (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> updateLicenseAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateLicenseDto dataExchangeUpdateLicenseDto) throws ApiException {
        okhttp3.Call localVarCall = updateLicenseAsyncValidateBeforeCall(isvId, dataExchangeUpdateLicenseDto, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a license based on an edition (template) (asynchronously)
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM/\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param dataExchangeUpdateLicenseDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull DataExchangeUpdateLicenseDto dataExchangeUpdateLicenseDto, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLicenseAsyncValidateBeforeCall(isvId, dataExchangeUpdateLicenseDto, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLicenseByDetailsAsync
     * @param isvId  (required)
     * @param licenseImportByDetailsPutDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseByDetailsAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPutDto licenseImportByDetailsPutDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseImportByDetailsPutDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/data_exchange/licenses"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLicenseByDetailsAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPutDto licenseImportByDetailsPutDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling updateLicenseByDetailsAsync(Async)");
        }

        // verify the required parameter 'licenseImportByDetailsPutDto' is set
        if (licenseImportByDetailsPutDto == null) {
            throw new ApiException("Missing the required parameter 'licenseImportByDetailsPutDto' when calling updateLicenseByDetailsAsync(Async)");
        }

        return updateLicenseByDetailsAsyncCall(isvId, licenseImportByDetailsPutDto, _callback);

    }

    /**
     * Updates a license allowing to define all feature/variable/limitation values
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param licenseImportByDetailsPutDto  (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public UUID updateLicenseByDetailsAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPutDto licenseImportByDetailsPutDto) throws ApiException {
        ApiResponse<UUID> localVarResp = updateLicenseByDetailsAsyncWithHttpInfo(isvId, licenseImportByDetailsPutDto);
        return localVarResp.getData();
    }

    /**
     * Updates a license allowing to define all feature/variable/limitation values
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param licenseImportByDetailsPutDto  (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> updateLicenseByDetailsAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPutDto licenseImportByDetailsPutDto) throws ApiException {
        okhttp3.Call localVarCall = updateLicenseByDetailsAsyncValidateBeforeCall(isvId, licenseImportByDetailsPutDto, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a license allowing to define all feature/variable/limitation values (asynchronously)
     * Check the &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150778-IMPORTING-DATA-FROM-YOUR-ERP-CRM\&quot;&gt;documentation&lt;/a&gt; for more details.
     * @param isvId  (required)
     * @param licenseImportByDetailsPutDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Warning </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseByDetailsAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull LicenseImportByDetailsPutDto licenseImportByDetailsPutDto, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLicenseByDetailsAsyncValidateBeforeCall(isvId, licenseImportByDetailsPutDto, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
