/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.api;

import com.slascone.ApiCallback;
import com.slascone.ApiClient;
import com.slascone.ApiException;
import com.slascone.ApiResponse;
import com.slascone.Configuration;
import com.slascone.Pair;
import com.slascone.ProgressRequestBody;
import com.slascone.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.slascone.model.ActivateClientDto;
import com.slascone.model.ActivateLicenseResponseErrors;
import com.slascone.model.AddHeartbeatDto;
import com.slascone.model.BaseErrorResponse;
import com.slascone.model.CloseSessionErrors;
import com.slascone.model.ConsumptionDto;
import com.slascone.model.DeactivateDeviceLicenseResponseError;
import com.slascone.model.GetAssignmentsErrorExamples;
import com.slascone.model.GetConsumptionStatusErrors;
import com.slascone.model.GetLicensesByCustomerDto;
import com.slascone.model.GetLicensesByLicenseKeyDto;
import com.slascone.model.GetLicensesByUserDto;
import com.slascone.model.HeartbeatResponseErrors;
import com.slascone.model.LicenseDto;
import com.slascone.model.LicenseInfoDto;
import com.slascone.model.LicenseStateDto;
import com.slascone.model.LicensesByCustomerErrors;
import com.slascone.model.LicensesByKeyErrors;
import com.slascone.model.LicensesByUserErrors;
import com.slascone.model.OpenSessionErrors;
import com.slascone.model.ProblemDetails;
import com.slascone.model.SessionRequestDto;
import com.slascone.model.SessionStatusDto;
import com.slascone.model.ToggleLicenseStateDto;
import com.slascone.model.ToggleLicenseStateErrors;
import java.util.UUID;
import com.slascone.model.UnassignDto;
import com.slascone.model.ValidateConsumptionStatusDto;
import com.slascone.model.ValidateLicenseDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProvisioningApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProvisioningApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProvisioningApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateLicense
     * @param isvId  (required)
     * @param activateClientDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateLicenseCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ActivateClientDto activateClientDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activateClientDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/activations"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateLicenseValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ActivateClientDto activateClientDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling activateLicense(Async)");
        }

        // verify the required parameter 'activateClientDto' is set
        if (activateClientDto == null) {
            throw new ApiException("Missing the required parameter 'activateClientDto' when calling activateLicense(Async)");
        }

        return activateLicenseCall(isvId, activateClientDto, _callback);

    }

    /**
     * Activates a client (assigns a token to a client)
     * Typically used in named device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param activateClientDto  (required)
     * @return LicenseInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LicenseInfoDto activateLicense(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ActivateClientDto activateClientDto) throws ApiException {
        ApiResponse<LicenseInfoDto> localVarResp = activateLicenseWithHttpInfo(isvId, activateClientDto);
        return localVarResp.getData();
    }

    /**
     * Activates a client (assigns a token to a client)
     * Typically used in named device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param activateClientDto  (required)
     * @return ApiResponse&lt;LicenseInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseInfoDto> activateLicenseWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ActivateClientDto activateClientDto) throws ApiException {
        okhttp3.Call localVarCall = activateLicenseValidateBeforeCall(isvId, activateClientDto, null);
        Type localVarReturnType = new TypeToken<LicenseInfoDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activates a client (assigns a token to a client) (asynchronously)
     * Typically used in named device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param activateClientDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateLicenseAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ActivateClientDto activateClientDto, final ApiCallback<LicenseInfoDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateLicenseValidateBeforeCall(isvId, activateClientDto, _callback);
        Type localVarReturnType = new TypeToken<LicenseInfoDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activateOfflineLicense
     * @param isvId  (required)
     * @param productId  (optional)
     * @param licenseKey  (optional)
     * @param clientId  (optional)
     * @param softwareVersion  (optional)
     * @param tags  (optional)
     * @param fileName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Xml Document </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateOfflineLicenseCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String licenseKey, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable String softwareVersion, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable String fileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/activations/offline"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (licenseKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license_key", licenseKey));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (softwareVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("software_version", softwareVersion));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_name", fileName));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer", "CustomerPortalKey", "DaemonKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateOfflineLicenseValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String licenseKey, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable String softwareVersion, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable String fileName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling activateOfflineLicense(Async)");
        }

        return activateOfflineLicenseCall(isvId, productId, licenseKey, clientId, softwareVersion, tags, fileName, _callback);

    }

    /**
     * Activates an offline client (assigns a token to a offline client)
     * Typically used in offline device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param productId  (optional)
     * @param licenseKey  (optional)
     * @param clientId  (optional)
     * @param softwareVersion  (optional)
     * @param tags  (optional)
     * @param fileName  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Xml Document </td><td>  -  </td></tr>
     </table>
     */
    public void activateOfflineLicense(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String licenseKey, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable String softwareVersion, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable String fileName) throws ApiException {
        activateOfflineLicenseWithHttpInfo(isvId, productId, licenseKey, clientId, softwareVersion, tags, fileName);
    }

    /**
     * Activates an offline client (assigns a token to a offline client)
     * Typically used in offline device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param productId  (optional)
     * @param licenseKey  (optional)
     * @param clientId  (optional)
     * @param softwareVersion  (optional)
     * @param tags  (optional)
     * @param fileName  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Xml Document </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activateOfflineLicenseWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String licenseKey, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable String softwareVersion, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable String fileName) throws ApiException {
        okhttp3.Call localVarCall = activateOfflineLicenseValidateBeforeCall(isvId, productId, licenseKey, clientId, softwareVersion, tags, fileName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activates an offline client (assigns a token to a offline client) (asynchronously)
     * Typically used in offline device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param productId  (optional)
     * @param licenseKey  (optional)
     * @param clientId  (optional)
     * @param softwareVersion  (optional)
     * @param tags  (optional)
     * @param fileName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Xml Document </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateOfflineLicenseAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nullable UUID productId, @javax.annotation.Nullable String licenseKey, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable String softwareVersion, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable String fileName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateOfflineLicenseValidateBeforeCall(isvId, productId, licenseKey, clientId, softwareVersion, tags, fileName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addHeartbeat
     * @param isvId  (required)
     * @param addHeartbeatDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addHeartbeatCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AddHeartbeatDto addHeartbeatDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addHeartbeatDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/heartbeats"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addHeartbeatValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AddHeartbeatDto addHeartbeatDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling addHeartbeat(Async)");
        }

        // verify the required parameter 'addHeartbeatDto' is set
        if (addHeartbeatDto == null) {
            throw new ApiException("Missing the required parameter 'addHeartbeatDto' when calling addHeartbeat(Async)");
        }

        return addHeartbeatCall(isvId, addHeartbeatDto, _callback);

    }

    /**
     * Creates a license heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param addHeartbeatDto  (required)
     * @return LicenseInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LicenseInfoDto addHeartbeat(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AddHeartbeatDto addHeartbeatDto) throws ApiException {
        ApiResponse<LicenseInfoDto> localVarResp = addHeartbeatWithHttpInfo(isvId, addHeartbeatDto);
        return localVarResp.getData();
    }

    /**
     * Creates a license heartbeat
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param addHeartbeatDto  (required)
     * @return ApiResponse&lt;LicenseInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseInfoDto> addHeartbeatWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AddHeartbeatDto addHeartbeatDto) throws ApiException {
        okhttp3.Call localVarCall = addHeartbeatValidateBeforeCall(isvId, addHeartbeatDto, null);
        Type localVarReturnType = new TypeToken<LicenseInfoDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a license heartbeat (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param addHeartbeatDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addHeartbeatAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull AddHeartbeatDto addHeartbeatDto, final ApiCallback<LicenseInfoDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addHeartbeatValidateBeforeCall(isvId, addHeartbeatDto, _callback);
        Type localVarReturnType = new TypeToken<LicenseInfoDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for closeSession
     * @param isvId  (required)
     * @param sessionRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeSessionCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessionRequestDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/session/close"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeSessionValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling closeSession(Async)");
        }

        // verify the required parameter 'sessionRequestDto' is set
        if (sessionRequestDto == null) {
            throw new ApiException("Missing the required parameter 'sessionRequestDto' when calling closeSession(Async)");
        }

        return closeSessionCall(isvId, sessionRequestDto, _callback);

    }

    /**
     * Closes a (floating) session
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param sessionRequestDto  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public String closeSession(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto) throws ApiException {
        ApiResponse<String> localVarResp = closeSessionWithHttpInfo(isvId, sessionRequestDto);
        return localVarResp.getData();
    }

    /**
     * Closes a (floating) session
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param sessionRequestDto  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> closeSessionWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto) throws ApiException {
        okhttp3.Call localVarCall = closeSessionValidateBeforeCall(isvId, sessionRequestDto, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Closes a (floating) session (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param sessionRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeSessionAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeSessionValidateBeforeCall(isvId, sessionRequestDto, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActiveFloatingTokensCount
     * @param isvId  (required)
     * @param licenseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveFloatingTokensCountCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UUID licenseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/licenses/{license_id}/tokens/floating/active/count"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()))
            .replace("{" + "license_id" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveFloatingTokensCountValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UUID licenseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling getActiveFloatingTokensCount(Async)");
        }

        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling getActiveFloatingTokensCount(Async)");
        }

        return getActiveFloatingTokensCountCall(isvId, licenseId, _callback);

    }

    /**
     * Returns the number of actively used floating tokens.
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-DEVICE-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param licenseId  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Integer getActiveFloatingTokensCount(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UUID licenseId) throws ApiException {
        ApiResponse<Integer> localVarResp = getActiveFloatingTokensCountWithHttpInfo(isvId, licenseId);
        return localVarResp.getData();
    }

    /**
     * Returns the number of actively used floating tokens.
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-DEVICE-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param licenseId  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getActiveFloatingTokensCountWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UUID licenseId) throws ApiException {
        okhttp3.Call localVarCall = getActiveFloatingTokensCountValidateBeforeCall(isvId, licenseId, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the number of actively used floating tokens. (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-DEVICE-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param licenseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveFloatingTokensCountAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UUID licenseId, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveFloatingTokensCountValidateBeforeCall(isvId, licenseId, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsumptionStatus
     * @param isvId  (required)
     * @param validateConsumptionStatusDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsumptionStatusCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateConsumptionStatusDto validateConsumptionStatusDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validateConsumptionStatusDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/validate/consumption"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsumptionStatusValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateConsumptionStatusDto validateConsumptionStatusDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling getConsumptionStatus(Async)");
        }

        // verify the required parameter 'validateConsumptionStatusDto' is set
        if (validateConsumptionStatusDto == null) {
            throw new ApiException("Missing the required parameter 'validateConsumptionStatusDto' when calling getConsumptionStatus(Async)");
        }

        return getConsumptionStatusCall(isvId, validateConsumptionStatusDto, _callback);

    }

    /**
     * Checks the consumption status of a limitation
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param validateConsumptionStatusDto  (required)
     * @return ConsumptionDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ConsumptionDto getConsumptionStatus(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateConsumptionStatusDto validateConsumptionStatusDto) throws ApiException {
        ApiResponse<ConsumptionDto> localVarResp = getConsumptionStatusWithHttpInfo(isvId, validateConsumptionStatusDto);
        return localVarResp.getData();
    }

    /**
     * Checks the consumption status of a limitation
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param validateConsumptionStatusDto  (required)
     * @return ApiResponse&lt;ConsumptionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsumptionDto> getConsumptionStatusWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateConsumptionStatusDto validateConsumptionStatusDto) throws ApiException {
        okhttp3.Call localVarCall = getConsumptionStatusValidateBeforeCall(isvId, validateConsumptionStatusDto, null);
        Type localVarReturnType = new TypeToken<ConsumptionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks the consumption status of a limitation (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param validateConsumptionStatusDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsumptionStatusAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateConsumptionStatusDto validateConsumptionStatusDto, final ApiCallback<ConsumptionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsumptionStatusValidateBeforeCall(isvId, validateConsumptionStatusDto, _callback);
        Type localVarReturnType = new TypeToken<ConsumptionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceInfo
     * @param isvId  (required)
     * @param validateLicenseDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceInfoCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateLicenseDto validateLicenseDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validateLicenseDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/validate"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceInfoValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateLicenseDto validateLicenseDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling getDeviceInfo(Async)");
        }

        // verify the required parameter 'validateLicenseDto' is set
        if (validateLicenseDto == null) {
            throw new ApiException("Missing the required parameter 'validateLicenseDto' when calling getDeviceInfo(Async)");
        }

        return getDeviceInfoCall(isvId, validateLicenseDto, _callback);

    }

    /**
     * Checks the validity of a license
     * Checks the validity of a license.
     * @param isvId  (required)
     * @param validateLicenseDto  (required)
     * @return LicenseInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LicenseInfoDto getDeviceInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateLicenseDto validateLicenseDto) throws ApiException {
        ApiResponse<LicenseInfoDto> localVarResp = getDeviceInfoWithHttpInfo(isvId, validateLicenseDto);
        return localVarResp.getData();
    }

    /**
     * Checks the validity of a license
     * Checks the validity of a license.
     * @param isvId  (required)
     * @param validateLicenseDto  (required)
     * @return ApiResponse&lt;LicenseInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseInfoDto> getDeviceInfoWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateLicenseDto validateLicenseDto) throws ApiException {
        okhttp3.Call localVarCall = getDeviceInfoValidateBeforeCall(isvId, validateLicenseDto, null);
        Type localVarReturnType = new TypeToken<LicenseInfoDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks the validity of a license (asynchronously)
     * Checks the validity of a license.
     * @param isvId  (required)
     * @param validateLicenseDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceInfoAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ValidateLicenseDto validateLicenseDto, final ApiCallback<LicenseInfoDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceInfoValidateBeforeCall(isvId, validateLicenseDto, _callback);
        Type localVarReturnType = new TypeToken<LicenseInfoDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLicensesByCustomerAsync
     * @param isvId  (required)
     * @param getLicensesByCustomerDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensesByCustomerAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByCustomerDto getLicensesByCustomerDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLicensesByCustomerDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/licenses/by_customer"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicensesByCustomerAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByCustomerDto getLicensesByCustomerDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling getLicensesByCustomerAsync(Async)");
        }

        // verify the required parameter 'getLicensesByCustomerDto' is set
        if (getLicensesByCustomerDto == null) {
            throw new ApiException("Missing the required parameter 'getLicensesByCustomerDto' when calling getLicensesByCustomerAsync(Async)");
        }

        return getLicensesByCustomerAsyncCall(isvId, getLicensesByCustomerDto, _callback);

    }

    /**
     * Returns all licenses of a customer
     * Typically used in SaaS scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param getLicensesByCustomerDto  (required)
     * @return List&lt;LicenseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<LicenseDto> getLicensesByCustomerAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByCustomerDto getLicensesByCustomerDto) throws ApiException {
        ApiResponse<List<LicenseDto>> localVarResp = getLicensesByCustomerAsyncWithHttpInfo(isvId, getLicensesByCustomerDto);
        return localVarResp.getData();
    }

    /**
     * Returns all licenses of a customer
     * Typically used in SaaS scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param getLicensesByCustomerDto  (required)
     * @return ApiResponse&lt;List&lt;LicenseDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LicenseDto>> getLicensesByCustomerAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByCustomerDto getLicensesByCustomerDto) throws ApiException {
        okhttp3.Call localVarCall = getLicensesByCustomerAsyncValidateBeforeCall(isvId, getLicensesByCustomerDto, null);
        Type localVarReturnType = new TypeToken<List<LicenseDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all licenses of a customer (asynchronously)
     * Typically used in SaaS scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param getLicensesByCustomerDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensesByCustomerAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByCustomerDto getLicensesByCustomerDto, final ApiCallback<List<LicenseDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicensesByCustomerAsyncValidateBeforeCall(isvId, getLicensesByCustomerDto, _callback);
        Type localVarReturnType = new TypeToken<List<LicenseDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLicensesByLicenseKeyAsync
     * @param isvId  (required)
     * @param getLicensesByLicenseKeyDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensesByLicenseKeyAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByLicenseKeyDto getLicensesByLicenseKeyDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLicensesByLicenseKeyDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/licenses/by_license"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicensesByLicenseKeyAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByLicenseKeyDto getLicensesByLicenseKeyDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling getLicensesByLicenseKeyAsync(Async)");
        }

        // verify the required parameter 'getLicensesByLicenseKeyDto' is set
        if (getLicensesByLicenseKeyDto == null) {
            throw new ApiException("Missing the required parameter 'getLicensesByLicenseKeyDto' when calling getLicensesByLicenseKeyAsync(Async)");
        }

        return getLicensesByLicenseKeyAsyncCall(isvId, getLicensesByLicenseKeyDto, _callback);

    }

    /**
     * Returns all licenses of a (legacy) key
     * Typically used in order to map a license/key/subscription of a backoffice system to the SLASCONE license. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param getLicensesByLicenseKeyDto  (required)
     * @return List&lt;LicenseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<LicenseDto> getLicensesByLicenseKeyAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByLicenseKeyDto getLicensesByLicenseKeyDto) throws ApiException {
        ApiResponse<List<LicenseDto>> localVarResp = getLicensesByLicenseKeyAsyncWithHttpInfo(isvId, getLicensesByLicenseKeyDto);
        return localVarResp.getData();
    }

    /**
     * Returns all licenses of a (legacy) key
     * Typically used in order to map a license/key/subscription of a backoffice system to the SLASCONE license. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param getLicensesByLicenseKeyDto  (required)
     * @return ApiResponse&lt;List&lt;LicenseDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LicenseDto>> getLicensesByLicenseKeyAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByLicenseKeyDto getLicensesByLicenseKeyDto) throws ApiException {
        okhttp3.Call localVarCall = getLicensesByLicenseKeyAsyncValidateBeforeCall(isvId, getLicensesByLicenseKeyDto, null);
        Type localVarReturnType = new TypeToken<List<LicenseDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all licenses of a (legacy) key (asynchronously)
     * Typically used in order to map a license/key/subscription of a backoffice system to the SLASCONE license. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param getLicensesByLicenseKeyDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensesByLicenseKeyAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByLicenseKeyDto getLicensesByLicenseKeyDto, final ApiCallback<List<LicenseDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicensesByLicenseKeyAsyncValidateBeforeCall(isvId, getLicensesByLicenseKeyDto, _callback);
        Type localVarReturnType = new TypeToken<List<LicenseDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLicensesByUserAsync
     * @param isvId  (required)
     * @param getLicensesByUserDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensesByUserAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByUserDto getLicensesByUserDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLicensesByUserDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/licenses/by_user"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicensesByUserAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByUserDto getLicensesByUserDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling getLicensesByUserAsync(Async)");
        }

        // verify the required parameter 'getLicensesByUserDto' is set
        if (getLicensesByUserDto == null) {
            throw new ApiException("Missing the required parameter 'getLicensesByUserDto' when calling getLicensesByUserAsync(Async)");
        }

        return getLicensesByUserAsyncCall(isvId, getLicensesByUserDto, _callback);

    }

    /**
     * Returns all licenses of a named user
     * Typically used in SaaS/Web scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param getLicensesByUserDto  (required)
     * @return List&lt;LicenseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<LicenseDto> getLicensesByUserAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByUserDto getLicensesByUserDto) throws ApiException {
        ApiResponse<List<LicenseDto>> localVarResp = getLicensesByUserAsyncWithHttpInfo(isvId, getLicensesByUserDto);
        return localVarResp.getData();
    }

    /**
     * Returns all licenses of a named user
     * Typically used in SaaS/Web scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param getLicensesByUserDto  (required)
     * @return ApiResponse&lt;List&lt;LicenseDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LicenseDto>> getLicensesByUserAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByUserDto getLicensesByUserDto) throws ApiException {
        okhttp3.Call localVarCall = getLicensesByUserAsyncValidateBeforeCall(isvId, getLicensesByUserDto, null);
        Type localVarReturnType = new TypeToken<List<LicenseDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all licenses of a named user (asynchronously)
     * Typically used in SaaS/Web scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param getLicensesByUserDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensesByUserAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull GetLicensesByUserDto getLicensesByUserDto, final ApiCallback<List<LicenseDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicensesByUserAsyncValidateBeforeCall(isvId, getLicensesByUserDto, _callback);
        Type localVarReturnType = new TypeToken<List<LicenseDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openSession
     * @param isvId  (required)
     * @param sessionRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openSessionCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessionRequestDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/session/open"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openSessionValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling openSession(Async)");
        }

        // verify the required parameter 'sessionRequestDto' is set
        if (sessionRequestDto == null) {
            throw new ApiException("Missing the required parameter 'sessionRequestDto' when calling openSession(Async)");
        }

        return openSessionCall(isvId, sessionRequestDto, _callback);

    }

    /**
     * Opens a (floating) session
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param sessionRequestDto  (required)
     * @return SessionStatusDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SessionStatusDto openSession(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto) throws ApiException {
        ApiResponse<SessionStatusDto> localVarResp = openSessionWithHttpInfo(isvId, sessionRequestDto);
        return localVarResp.getData();
    }

    /**
     * Opens a (floating) session
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param sessionRequestDto  (required)
     * @return ApiResponse&lt;SessionStatusDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SessionStatusDto> openSessionWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto) throws ApiException {
        okhttp3.Call localVarCall = openSessionValidateBeforeCall(isvId, sessionRequestDto, null);
        Type localVarReturnType = new TypeToken<SessionStatusDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Opens a (floating) session (asynchronously)
     * &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param sessionRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openSessionAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull SessionRequestDto sessionRequestDto, final ApiCallback<SessionStatusDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = openSessionValidateBeforeCall(isvId, sessionRequestDto, _callback);
        Type localVarReturnType = new TypeToken<SessionStatusDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toogleLicenseStateAsync
     * @param isvId  (required)
     * @param toggleLicenseStateDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toogleLicenseStateAsyncCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ToggleLicenseStateDto toggleLicenseStateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toggleLicenseStateDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/licenses/state/toggle"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toogleLicenseStateAsyncValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ToggleLicenseStateDto toggleLicenseStateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling toogleLicenseStateAsync(Async)");
        }

        // verify the required parameter 'toggleLicenseStateDto' is set
        if (toggleLicenseStateDto == null) {
            throw new ApiException("Missing the required parameter 'toggleLicenseStateDto' when calling toogleLicenseStateAsync(Async)");
        }

        return toogleLicenseStateAsyncCall(isvId, toggleLicenseStateDto, _callback);

    }

    /**
     * Toggles the license state (active/inactive)
     * Toggles the license state (active/inactive).
     * @param isvId  (required)
     * @param toggleLicenseStateDto  (required)
     * @return LicenseStateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LicenseStateDto toogleLicenseStateAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ToggleLicenseStateDto toggleLicenseStateDto) throws ApiException {
        ApiResponse<LicenseStateDto> localVarResp = toogleLicenseStateAsyncWithHttpInfo(isvId, toggleLicenseStateDto);
        return localVarResp.getData();
    }

    /**
     * Toggles the license state (active/inactive)
     * Toggles the license state (active/inactive).
     * @param isvId  (required)
     * @param toggleLicenseStateDto  (required)
     * @return ApiResponse&lt;LicenseStateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseStateDto> toogleLicenseStateAsyncWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ToggleLicenseStateDto toggleLicenseStateDto) throws ApiException {
        okhttp3.Call localVarCall = toogleLicenseStateAsyncValidateBeforeCall(isvId, toggleLicenseStateDto, null);
        Type localVarReturnType = new TypeToken<LicenseStateDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Toggles the license state (active/inactive) (asynchronously)
     * Toggles the license state (active/inactive).
     * @param isvId  (required)
     * @param toggleLicenseStateDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toogleLicenseStateAsyncAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull ToggleLicenseStateDto toggleLicenseStateDto, final ApiCallback<LicenseStateDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = toogleLicenseStateAsyncValidateBeforeCall(isvId, toggleLicenseStateDto, _callback);
        Type localVarReturnType = new TypeToken<LicenseStateDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unassignLicense
     * @param isvId  (required)
     * @param unassignDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignLicenseCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UnassignDto unassignDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unassignDto;

        // create path and map variables
        String localVarPath = "/api/v2/isv/{isv_id}/provisioning/unassign"
            .replace("{" + "isv_id" + "}", localVarApiClient.escapeString(isvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AdminKey", "ProvisioningKey", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignLicenseValidateBeforeCall(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UnassignDto unassignDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isvId' is set
        if (isvId == null) {
            throw new ApiException("Missing the required parameter 'isvId' when calling unassignLicense(Async)");
        }

        // verify the required parameter 'unassignDto' is set
        if (unassignDto == null) {
            throw new ApiException("Missing the required parameter 'unassignDto' when calling unassignLicense(Async)");
        }

        return unassignLicenseCall(isvId, unassignDto, _callback);

    }

    /**
     * Unassigns a token from a client
     * Typically used in named device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param unassignDto  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public String unassignLicense(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UnassignDto unassignDto) throws ApiException {
        ApiResponse<String> localVarResp = unassignLicenseWithHttpInfo(isvId, unassignDto);
        return localVarResp.getData();
    }

    /**
     * Unassigns a token from a client
     * Typically used in named device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param unassignDto  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> unassignLicenseWithHttpInfo(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UnassignDto unassignDto) throws ApiException {
        okhttp3.Call localVarCall = unassignLicenseValidateBeforeCall(isvId, unassignDto, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unassigns a token from a client (asynchronously)
     * Typically used in named device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
     * @param isvId  (required)
     * @param unassignDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignLicenseAsync(@javax.annotation.Nonnull UUID isvId, @javax.annotation.Nonnull UnassignDto unassignDto, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignLicenseValidateBeforeCall(isvId, unassignDto, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
