/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * ActivateClientDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class ActivateClientDto {
  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  @javax.annotation.Nonnull
  private UUID productId;

  public static final String SERIALIZED_NAME_LICENSE_KEY = "license_key";
  @SerializedName(SERIALIZED_NAME_LICENSE_KEY)
  @javax.annotation.Nonnull
  private String licenseKey;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nonnull
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "client_name";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  @javax.annotation.Nullable
  private String clientName;

  public static final String SERIALIZED_NAME_CLIENT_DESCRIPTION = "client_description";
  @SerializedName(SERIALIZED_NAME_CLIENT_DESCRIPTION)
  @javax.annotation.Nullable
  private String clientDescription;

  public static final String SERIALIZED_NAME_SOFTWARE_VERSION = "software_version";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_VERSION)
  @javax.annotation.Nullable
  private String softwareVersion;

  public static final String SERIALIZED_NAME_TIMESTAMP_UTC = "timestamp_utc";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime timestampUtc;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags;

  public ActivateClientDto() {
  }

  public ActivateClientDto productId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nonnull
  public UUID getProductId() {
    return productId;
  }

  public void setProductId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
  }


  public ActivateClientDto licenseKey(@javax.annotation.Nonnull String licenseKey) {
    this.licenseKey = licenseKey;
    return this;
  }

  /**
   * Get licenseKey
   * @return licenseKey
   */
  @javax.annotation.Nonnull
  public String getLicenseKey() {
    return licenseKey;
  }

  public void setLicenseKey(@javax.annotation.Nonnull String licenseKey) {
    this.licenseKey = licenseKey;
  }


  public ActivateClientDto clientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
  }


  public ActivateClientDto clientName(@javax.annotation.Nullable String clientName) {
    this.clientName = clientName;
    return this;
  }

  /**
   * Get clientName
   * @return clientName
   */
  @javax.annotation.Nullable
  public String getClientName() {
    return clientName;
  }

  public void setClientName(@javax.annotation.Nullable String clientName) {
    this.clientName = clientName;
  }


  public ActivateClientDto clientDescription(@javax.annotation.Nullable String clientDescription) {
    this.clientDescription = clientDescription;
    return this;
  }

  /**
   * Get clientDescription
   * @return clientDescription
   */
  @javax.annotation.Nullable
  public String getClientDescription() {
    return clientDescription;
  }

  public void setClientDescription(@javax.annotation.Nullable String clientDescription) {
    this.clientDescription = clientDescription;
  }


  public ActivateClientDto softwareVersion(@javax.annotation.Nullable String softwareVersion) {
    this.softwareVersion = softwareVersion;
    return this;
  }

  /**
   * Get softwareVersion
   * @return softwareVersion
   */
  @javax.annotation.Nullable
  public String getSoftwareVersion() {
    return softwareVersion;
  }

  public void setSoftwareVersion(@javax.annotation.Nullable String softwareVersion) {
    this.softwareVersion = softwareVersion;
  }


  public ActivateClientDto timestampUtc(@javax.annotation.Nullable OffsetDateTime timestampUtc) {
    this.timestampUtc = timestampUtc;
    return this;
  }

  /**
   * Get timestampUtc
   * @return timestampUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestampUtc() {
    return timestampUtc;
  }

  public void setTimestampUtc(@javax.annotation.Nullable OffsetDateTime timestampUtc) {
    this.timestampUtc = timestampUtc;
  }


  public ActivateClientDto tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ActivateClientDto addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivateClientDto activateClientDto = (ActivateClientDto) o;
    return Objects.equals(this.productId, activateClientDto.productId) &&
        Objects.equals(this.licenseKey, activateClientDto.licenseKey) &&
        Objects.equals(this.clientId, activateClientDto.clientId) &&
        Objects.equals(this.clientName, activateClientDto.clientName) &&
        Objects.equals(this.clientDescription, activateClientDto.clientDescription) &&
        Objects.equals(this.softwareVersion, activateClientDto.softwareVersion) &&
        Objects.equals(this.timestampUtc, activateClientDto.timestampUtc) &&
        Objects.equals(this.tags, activateClientDto.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(productId, licenseKey, clientId, clientName, clientDescription, softwareVersion, timestampUtc, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivateClientDto {\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    licenseKey: ").append(toIndentedString(licenseKey)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    clientDescription: ").append(toIndentedString(clientDescription)).append("\n");
    sb.append("    softwareVersion: ").append(toIndentedString(softwareVersion)).append("\n");
    sb.append("    timestampUtc: ").append(toIndentedString(timestampUtc)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("product_id", "license_key", "client_id", "client_name", "client_description", "software_version", "timestamp_utc", "tags"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("product_id", "license_key", "client_id"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivateClientDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivateClientDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivateClientDto is not found in the empty JSON string", ActivateClientDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivateClientDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivateClientDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActivateClientDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("product_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
      }
      if (!jsonObj.get("license_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_key").toString()));
      }
      if (!jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("client_name") != null && !jsonObj.get("client_name").isJsonNull()) && !jsonObj.get("client_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_name").toString()));
      }
      if ((jsonObj.get("client_description") != null && !jsonObj.get("client_description").isJsonNull()) && !jsonObj.get("client_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_description").toString()));
      }
      if ((jsonObj.get("software_version") != null && !jsonObj.get("software_version").isJsonNull()) && !jsonObj.get("software_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `software_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("software_version").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivateClientDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivateClientDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivateClientDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivateClientDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivateClientDto>() {
           @Override
           public void write(JsonWriter out, ActivateClientDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivateClientDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivateClientDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivateClientDto
   * @throws IOException if the JSON string is invalid with respect to ActivateClientDto
   */
  public static ActivateClientDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivateClientDto.class);
  }

  /**
   * Convert an instance of ActivateClientDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

