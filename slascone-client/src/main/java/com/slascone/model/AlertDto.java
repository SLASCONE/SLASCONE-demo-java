/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.AlertMode;
import com.slascone.model.EmailTemplateDto;
import com.slascone.model.TemplateDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * AlertDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class AlertDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  @javax.annotation.Nullable
  private Boolean isActive;

  public static final String SERIALIZED_NAME_ALERT_DAYS = "alert_days";
  @SerializedName(SERIALIZED_NAME_ALERT_DAYS)
  @javax.annotation.Nullable
  private Integer alertDays;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  @javax.annotation.Nullable
  private AlertMode mode;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  @javax.annotation.Nullable
  private UUID templateId;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nullable
  private TemplateDto template;

  public static final String SERIALIZED_NAME_EMAIL_TEMPLATE_ID = "email_template_id";
  @SerializedName(SERIALIZED_NAME_EMAIL_TEMPLATE_ID)
  @javax.annotation.Nullable
  private UUID emailTemplateId;

  public static final String SERIALIZED_NAME_EMAIL_TEMPLATE = "email_template";
  @SerializedName(SERIALIZED_NAME_EMAIL_TEMPLATE)
  @javax.annotation.Nullable
  private EmailTemplateDto emailTemplate;

  public static final String SERIALIZED_NAME_CREATED_DATE_UTC = "created_date_utc";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime createdDateUtc;

  public AlertDto() {
  }

  public AlertDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public AlertDto name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AlertDto isActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
  }


  public AlertDto alertDays(@javax.annotation.Nullable Integer alertDays) {
    this.alertDays = alertDays;
    return this;
  }

  /**
   * Get alertDays
   * @return alertDays
   */
  @javax.annotation.Nullable
  public Integer getAlertDays() {
    return alertDays;
  }

  public void setAlertDays(@javax.annotation.Nullable Integer alertDays) {
    this.alertDays = alertDays;
  }


  public AlertDto mode(@javax.annotation.Nullable AlertMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public AlertMode getMode() {
    return mode;
  }

  public void setMode(@javax.annotation.Nullable AlertMode mode) {
    this.mode = mode;
  }


  public AlertDto templateId(@javax.annotation.Nullable UUID templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Get templateId
   * @return templateId
   */
  @javax.annotation.Nullable
  public UUID getTemplateId() {
    return templateId;
  }

  public void setTemplateId(@javax.annotation.Nullable UUID templateId) {
    this.templateId = templateId;
  }


  public AlertDto template(@javax.annotation.Nullable TemplateDto template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public TemplateDto getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nullable TemplateDto template) {
    this.template = template;
  }


  public AlertDto emailTemplateId(@javax.annotation.Nullable UUID emailTemplateId) {
    this.emailTemplateId = emailTemplateId;
    return this;
  }

  /**
   * Get emailTemplateId
   * @return emailTemplateId
   */
  @javax.annotation.Nullable
  public UUID getEmailTemplateId() {
    return emailTemplateId;
  }

  public void setEmailTemplateId(@javax.annotation.Nullable UUID emailTemplateId) {
    this.emailTemplateId = emailTemplateId;
  }


  public AlertDto emailTemplate(@javax.annotation.Nullable EmailTemplateDto emailTemplate) {
    this.emailTemplate = emailTemplate;
    return this;
  }

  /**
   * Get emailTemplate
   * @return emailTemplate
   */
  @javax.annotation.Nullable
  public EmailTemplateDto getEmailTemplate() {
    return emailTemplate;
  }

  public void setEmailTemplate(@javax.annotation.Nullable EmailTemplateDto emailTemplate) {
    this.emailTemplate = emailTemplate;
  }


  public AlertDto createdDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
    return this;
  }

  /**
   * Get createdDateUtc
   * @return createdDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateUtc() {
    return createdDateUtc;
  }

  public void setCreatedDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertDto alertDto = (AlertDto) o;
    return Objects.equals(this.id, alertDto.id) &&
        Objects.equals(this.name, alertDto.name) &&
        Objects.equals(this.isActive, alertDto.isActive) &&
        Objects.equals(this.alertDays, alertDto.alertDays) &&
        Objects.equals(this.mode, alertDto.mode) &&
        Objects.equals(this.templateId, alertDto.templateId) &&
        Objects.equals(this.template, alertDto.template) &&
        Objects.equals(this.emailTemplateId, alertDto.emailTemplateId) &&
        Objects.equals(this.emailTemplate, alertDto.emailTemplate) &&
        Objects.equals(this.createdDateUtc, alertDto.createdDateUtc);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, isActive, alertDays, mode, templateId, template, emailTemplateId, emailTemplate, createdDateUtc);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    alertDays: ").append(toIndentedString(alertDays)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    emailTemplateId: ").append(toIndentedString(emailTemplateId)).append("\n");
    sb.append("    emailTemplate: ").append(toIndentedString(emailTemplate)).append("\n");
    sb.append("    createdDateUtc: ").append(toIndentedString(createdDateUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "name", "is_active", "alert_days", "mode", "template_id", "template", "email_template_id", "email_template", "created_date_utc"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertDto is not found in the empty JSON string", AlertDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        AlertMode.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        TemplateDto.validateJsonElement(jsonObj.get("template"));
      }
      if ((jsonObj.get("email_template_id") != null && !jsonObj.get("email_template_id").isJsonNull()) && !jsonObj.get("email_template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_template_id").toString()));
      }
      // validate the optional field `email_template`
      if (jsonObj.get("email_template") != null && !jsonObj.get("email_template").isJsonNull()) {
        EmailTemplateDto.validateJsonElement(jsonObj.get("email_template"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertDto>() {
           @Override
           public void write(JsonWriter out, AlertDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertDto
   * @throws IOException if the JSON string is invalid with respect to AlertDto
   */
  public static AlertDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertDto.class);
  }

  /**
   * Convert an instance of AlertDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

