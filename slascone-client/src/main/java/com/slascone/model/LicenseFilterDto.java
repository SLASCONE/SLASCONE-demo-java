/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.AnalyticalFieldFilterDto;
import com.slascone.model.LicenseFilterSortType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * LicenseFilterDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class LicenseFilterDto {
  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  @javax.annotation.Nonnull
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  @javax.annotation.Nullable
  private Integer page;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  @javax.annotation.Nullable
  private Boolean isActive;

  public static final String SERIALIZED_NAME_KEY_SEARCH = "key_search";
  @SerializedName(SERIALIZED_NAME_KEY_SEARCH)
  @javax.annotation.Nullable
  private String keySearch;

  public static final String SERIALIZED_NAME_PRODUCT_FILTER = "product_filter";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FILTER)
  @javax.annotation.Nullable
  private UUID productFilter;

  public static final String SERIALIZED_NAME_CUSTOMER_FILTER = "customer_filter";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_FILTER)
  @javax.annotation.Nullable
  private UUID customerFilter;

  public static final String SERIALIZED_NAME_CUSTOMER_NUMBER_FILTER = "customer_number_filter";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NUMBER_FILTER)
  @javax.annotation.Nullable
  private List<String> customerNumberFilter;

  public static final String SERIALIZED_NAME_CUSTOMER_TYPE_FILTER = "customer_type_filter";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TYPE_FILTER)
  @javax.annotation.Nullable
  private List<UUID> customerTypeFilter;

  public static final String SERIALIZED_NAME_RESELLER_TYPE_FILTER = "reseller_type_filter";
  @SerializedName(SERIALIZED_NAME_RESELLER_TYPE_FILTER)
  @javax.annotation.Nullable
  private List<UUID> resellerTypeFilter;

  public static final String SERIALIZED_NAME_TEMPLATE_FILTER = "template_filter";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_FILTER)
  @javax.annotation.Nullable
  private List<UUID> templateFilter;

  public static final String SERIALIZED_NAME_LICENSE_TYPE_FILTER = "license_type_filter";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE_FILTER)
  @javax.annotation.Nullable
  private List<UUID> licenseTypeFilter;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM_FILTER = "operating_system_filter";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_FILTER)
  @javax.annotation.Nullable
  private List<String> operatingSystemFilter;

  public static final String SERIALIZED_NAME_SOFTWARE_VERSION_FILTER = "software_version_filter";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_VERSION_FILTER)
  @javax.annotation.Nullable
  private List<String> softwareVersionFilter;

  public static final String SERIALIZED_NAME_IS_SOFTWARE_VERSION_VALID = "is_software_version_valid";
  @SerializedName(SERIALIZED_NAME_IS_SOFTWARE_VERSION_VALID)
  @javax.annotation.Nullable
  private Boolean isSoftwareVersionValid;

  public static final String SERIALIZED_NAME_FEATURE_FILTER = "feature_filter";
  @SerializedName(SERIALIZED_NAME_FEATURE_FILTER)
  @javax.annotation.Nullable
  private List<UUID> featureFilter;

  public static final String SERIALIZED_NAME_IS_FEATURE_ACTIVE = "is_feature_active";
  @SerializedName(SERIALIZED_NAME_IS_FEATURE_ACTIVE)
  @javax.annotation.Nullable
  private Boolean isFeatureActive;

  public static final String SERIALIZED_NAME_DATE_FILTER = "date_filter";
  @SerializedName(SERIALIZED_NAME_DATE_FILTER)
  @javax.annotation.Nullable
  private OffsetDateTime dateFilter;

  public static final String SERIALIZED_NAME_DATE_FILTER_MODE = "date_filter_mode";
  @SerializedName(SERIALIZED_NAME_DATE_FILTER_MODE)
  @javax.annotation.Nullable
  private String dateFilterMode;

  public static final String SERIALIZED_NAME_IS_NORMAL_TOKEN = "is_normal_token";
  @SerializedName(SERIALIZED_NAME_IS_NORMAL_TOKEN)
  @javax.annotation.Nullable
  private Boolean isNormalToken;

  public static final String SERIALIZED_NAME_IS_GOODWILL_TOKEN = "is_goodwill_token";
  @SerializedName(SERIALIZED_NAME_IS_GOODWILL_TOKEN)
  @javax.annotation.Nullable
  private Boolean isGoodwillToken;

  public static final String SERIALIZED_NAME_IS_GROUP_VALID = "is_group_valid";
  @SerializedName(SERIALIZED_NAME_IS_GROUP_VALID)
  @javax.annotation.Nullable
  private Boolean isGroupValid;

  public static final String SERIALIZED_NAME_IS_ASSIGNED_TOKEN = "is_assigned_token";
  @SerializedName(SERIALIZED_NAME_IS_ASSIGNED_TOKEN)
  @javax.annotation.Nullable
  private Boolean isAssignedToken;

  public static final String SERIALIZED_NAME_GROUP_COUNT_FILTER = "group_count_filter";
  @SerializedName(SERIALIZED_NAME_GROUP_COUNT_FILTER)
  @javax.annotation.Nullable
  private Integer groupCountFilter;

  public static final String SERIALIZED_NAME_GROUP_COUNT_MODE = "group_count_mode";
  @SerializedName(SERIALIZED_NAME_GROUP_COUNT_MODE)
  @javax.annotation.Nullable
  private String groupCountMode;

  public static final String SERIALIZED_NAME_SORT_TYPE = "sort_type";
  @SerializedName(SERIALIZED_NAME_SORT_TYPE)
  @javax.annotation.Nullable
  private LicenseFilterSortType sortType;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  @javax.annotation.Nullable
  private Boolean sortOrder;

  public static final String SERIALIZED_NAME_LICENSE_TAG_FILTER = "license_tag_filter";
  @SerializedName(SERIALIZED_NAME_LICENSE_TAG_FILTER)
  @javax.annotation.Nullable
  private List<Integer> licenseTagFilter;

  public static final String SERIALIZED_NAME_TOKEN_TAG_FILTER = "token_tag_filter";
  @SerializedName(SERIALIZED_NAME_TOKEN_TAG_FILTER)
  @javax.annotation.Nullable
  private List<Integer> tokenTagFilter;

  public static final String SERIALIZED_NAME_CUSTOMER_TAG_FILTER = "customer_tag_filter";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAG_FILTER)
  @javax.annotation.Nullable
  private List<Integer> customerTagFilter;

  public static final String SERIALIZED_NAME_ANALYTICAL_FIELD_FILTER = "analytical_field_filter";
  @SerializedName(SERIALIZED_NAME_ANALYTICAL_FIELD_FILTER)
  @javax.annotation.Nullable
  private AnalyticalFieldFilterDto analyticalFieldFilter;

  public LicenseFilterDto() {
  }

  public LicenseFilterDto pageSize(@javax.annotation.Nonnull Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nonnull
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(@javax.annotation.Nonnull Integer pageSize) {
    this.pageSize = pageSize;
  }


  public LicenseFilterDto page(@javax.annotation.Nullable Integer page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(@javax.annotation.Nullable Integer page) {
    this.page = page;
  }


  public LicenseFilterDto isActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
  }


  public LicenseFilterDto keySearch(@javax.annotation.Nullable String keySearch) {
    this.keySearch = keySearch;
    return this;
  }

  /**
   * Get keySearch
   * @return keySearch
   */
  @javax.annotation.Nullable
  public String getKeySearch() {
    return keySearch;
  }

  public void setKeySearch(@javax.annotation.Nullable String keySearch) {
    this.keySearch = keySearch;
  }


  public LicenseFilterDto productFilter(@javax.annotation.Nullable UUID productFilter) {
    this.productFilter = productFilter;
    return this;
  }

  /**
   * Get productFilter
   * @return productFilter
   */
  @javax.annotation.Nullable
  public UUID getProductFilter() {
    return productFilter;
  }

  public void setProductFilter(@javax.annotation.Nullable UUID productFilter) {
    this.productFilter = productFilter;
  }


  public LicenseFilterDto customerFilter(@javax.annotation.Nullable UUID customerFilter) {
    this.customerFilter = customerFilter;
    return this;
  }

  /**
   * Get customerFilter
   * @return customerFilter
   */
  @javax.annotation.Nullable
  public UUID getCustomerFilter() {
    return customerFilter;
  }

  public void setCustomerFilter(@javax.annotation.Nullable UUID customerFilter) {
    this.customerFilter = customerFilter;
  }


  public LicenseFilterDto customerNumberFilter(@javax.annotation.Nullable List<String> customerNumberFilter) {
    this.customerNumberFilter = customerNumberFilter;
    return this;
  }

  public LicenseFilterDto addCustomerNumberFilterItem(String customerNumberFilterItem) {
    if (this.customerNumberFilter == null) {
      this.customerNumberFilter = new ArrayList<>();
    }
    this.customerNumberFilter.add(customerNumberFilterItem);
    return this;
  }

  /**
   * Get customerNumberFilter
   * @return customerNumberFilter
   */
  @javax.annotation.Nullable
  public List<String> getCustomerNumberFilter() {
    return customerNumberFilter;
  }

  public void setCustomerNumberFilter(@javax.annotation.Nullable List<String> customerNumberFilter) {
    this.customerNumberFilter = customerNumberFilter;
  }


  public LicenseFilterDto customerTypeFilter(@javax.annotation.Nullable List<UUID> customerTypeFilter) {
    this.customerTypeFilter = customerTypeFilter;
    return this;
  }

  public LicenseFilterDto addCustomerTypeFilterItem(UUID customerTypeFilterItem) {
    if (this.customerTypeFilter == null) {
      this.customerTypeFilter = new ArrayList<>();
    }
    this.customerTypeFilter.add(customerTypeFilterItem);
    return this;
  }

  /**
   * Get customerTypeFilter
   * @return customerTypeFilter
   */
  @javax.annotation.Nullable
  public List<UUID> getCustomerTypeFilter() {
    return customerTypeFilter;
  }

  public void setCustomerTypeFilter(@javax.annotation.Nullable List<UUID> customerTypeFilter) {
    this.customerTypeFilter = customerTypeFilter;
  }


  public LicenseFilterDto resellerTypeFilter(@javax.annotation.Nullable List<UUID> resellerTypeFilter) {
    this.resellerTypeFilter = resellerTypeFilter;
    return this;
  }

  public LicenseFilterDto addResellerTypeFilterItem(UUID resellerTypeFilterItem) {
    if (this.resellerTypeFilter == null) {
      this.resellerTypeFilter = new ArrayList<>();
    }
    this.resellerTypeFilter.add(resellerTypeFilterItem);
    return this;
  }

  /**
   * Get resellerTypeFilter
   * @return resellerTypeFilter
   */
  @javax.annotation.Nullable
  public List<UUID> getResellerTypeFilter() {
    return resellerTypeFilter;
  }

  public void setResellerTypeFilter(@javax.annotation.Nullable List<UUID> resellerTypeFilter) {
    this.resellerTypeFilter = resellerTypeFilter;
  }


  public LicenseFilterDto templateFilter(@javax.annotation.Nullable List<UUID> templateFilter) {
    this.templateFilter = templateFilter;
    return this;
  }

  public LicenseFilterDto addTemplateFilterItem(UUID templateFilterItem) {
    if (this.templateFilter == null) {
      this.templateFilter = new ArrayList<>();
    }
    this.templateFilter.add(templateFilterItem);
    return this;
  }

  /**
   * Get templateFilter
   * @return templateFilter
   */
  @javax.annotation.Nullable
  public List<UUID> getTemplateFilter() {
    return templateFilter;
  }

  public void setTemplateFilter(@javax.annotation.Nullable List<UUID> templateFilter) {
    this.templateFilter = templateFilter;
  }


  public LicenseFilterDto licenseTypeFilter(@javax.annotation.Nullable List<UUID> licenseTypeFilter) {
    this.licenseTypeFilter = licenseTypeFilter;
    return this;
  }

  public LicenseFilterDto addLicenseTypeFilterItem(UUID licenseTypeFilterItem) {
    if (this.licenseTypeFilter == null) {
      this.licenseTypeFilter = new ArrayList<>();
    }
    this.licenseTypeFilter.add(licenseTypeFilterItem);
    return this;
  }

  /**
   * Get licenseTypeFilter
   * @return licenseTypeFilter
   */
  @javax.annotation.Nullable
  public List<UUID> getLicenseTypeFilter() {
    return licenseTypeFilter;
  }

  public void setLicenseTypeFilter(@javax.annotation.Nullable List<UUID> licenseTypeFilter) {
    this.licenseTypeFilter = licenseTypeFilter;
  }


  public LicenseFilterDto operatingSystemFilter(@javax.annotation.Nullable List<String> operatingSystemFilter) {
    this.operatingSystemFilter = operatingSystemFilter;
    return this;
  }

  public LicenseFilterDto addOperatingSystemFilterItem(String operatingSystemFilterItem) {
    if (this.operatingSystemFilter == null) {
      this.operatingSystemFilter = new ArrayList<>();
    }
    this.operatingSystemFilter.add(operatingSystemFilterItem);
    return this;
  }

  /**
   * Get operatingSystemFilter
   * @return operatingSystemFilter
   */
  @javax.annotation.Nullable
  public List<String> getOperatingSystemFilter() {
    return operatingSystemFilter;
  }

  public void setOperatingSystemFilter(@javax.annotation.Nullable List<String> operatingSystemFilter) {
    this.operatingSystemFilter = operatingSystemFilter;
  }


  public LicenseFilterDto softwareVersionFilter(@javax.annotation.Nullable List<String> softwareVersionFilter) {
    this.softwareVersionFilter = softwareVersionFilter;
    return this;
  }

  public LicenseFilterDto addSoftwareVersionFilterItem(String softwareVersionFilterItem) {
    if (this.softwareVersionFilter == null) {
      this.softwareVersionFilter = new ArrayList<>();
    }
    this.softwareVersionFilter.add(softwareVersionFilterItem);
    return this;
  }

  /**
   * Get softwareVersionFilter
   * @return softwareVersionFilter
   */
  @javax.annotation.Nullable
  public List<String> getSoftwareVersionFilter() {
    return softwareVersionFilter;
  }

  public void setSoftwareVersionFilter(@javax.annotation.Nullable List<String> softwareVersionFilter) {
    this.softwareVersionFilter = softwareVersionFilter;
  }


  public LicenseFilterDto isSoftwareVersionValid(@javax.annotation.Nullable Boolean isSoftwareVersionValid) {
    this.isSoftwareVersionValid = isSoftwareVersionValid;
    return this;
  }

  /**
   * Get isSoftwareVersionValid
   * @return isSoftwareVersionValid
   */
  @javax.annotation.Nullable
  public Boolean getIsSoftwareVersionValid() {
    return isSoftwareVersionValid;
  }

  public void setIsSoftwareVersionValid(@javax.annotation.Nullable Boolean isSoftwareVersionValid) {
    this.isSoftwareVersionValid = isSoftwareVersionValid;
  }


  public LicenseFilterDto featureFilter(@javax.annotation.Nullable List<UUID> featureFilter) {
    this.featureFilter = featureFilter;
    return this;
  }

  public LicenseFilterDto addFeatureFilterItem(UUID featureFilterItem) {
    if (this.featureFilter == null) {
      this.featureFilter = new ArrayList<>();
    }
    this.featureFilter.add(featureFilterItem);
    return this;
  }

  /**
   * Get featureFilter
   * @return featureFilter
   */
  @javax.annotation.Nullable
  public List<UUID> getFeatureFilter() {
    return featureFilter;
  }

  public void setFeatureFilter(@javax.annotation.Nullable List<UUID> featureFilter) {
    this.featureFilter = featureFilter;
  }


  public LicenseFilterDto isFeatureActive(@javax.annotation.Nullable Boolean isFeatureActive) {
    this.isFeatureActive = isFeatureActive;
    return this;
  }

  /**
   * Get isFeatureActive
   * @return isFeatureActive
   */
  @javax.annotation.Nullable
  public Boolean getIsFeatureActive() {
    return isFeatureActive;
  }

  public void setIsFeatureActive(@javax.annotation.Nullable Boolean isFeatureActive) {
    this.isFeatureActive = isFeatureActive;
  }


  public LicenseFilterDto dateFilter(@javax.annotation.Nullable OffsetDateTime dateFilter) {
    this.dateFilter = dateFilter;
    return this;
  }

  /**
   * Get dateFilter
   * @return dateFilter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateFilter() {
    return dateFilter;
  }

  public void setDateFilter(@javax.annotation.Nullable OffsetDateTime dateFilter) {
    this.dateFilter = dateFilter;
  }


  public LicenseFilterDto dateFilterMode(@javax.annotation.Nullable String dateFilterMode) {
    this.dateFilterMode = dateFilterMode;
    return this;
  }

  /**
   * Get dateFilterMode
   * @return dateFilterMode
   */
  @javax.annotation.Nullable
  public String getDateFilterMode() {
    return dateFilterMode;
  }

  public void setDateFilterMode(@javax.annotation.Nullable String dateFilterMode) {
    this.dateFilterMode = dateFilterMode;
  }


  public LicenseFilterDto isNormalToken(@javax.annotation.Nullable Boolean isNormalToken) {
    this.isNormalToken = isNormalToken;
    return this;
  }

  /**
   * Get isNormalToken
   * @return isNormalToken
   */
  @javax.annotation.Nullable
  public Boolean getIsNormalToken() {
    return isNormalToken;
  }

  public void setIsNormalToken(@javax.annotation.Nullable Boolean isNormalToken) {
    this.isNormalToken = isNormalToken;
  }


  public LicenseFilterDto isGoodwillToken(@javax.annotation.Nullable Boolean isGoodwillToken) {
    this.isGoodwillToken = isGoodwillToken;
    return this;
  }

  /**
   * Get isGoodwillToken
   * @return isGoodwillToken
   */
  @javax.annotation.Nullable
  public Boolean getIsGoodwillToken() {
    return isGoodwillToken;
  }

  public void setIsGoodwillToken(@javax.annotation.Nullable Boolean isGoodwillToken) {
    this.isGoodwillToken = isGoodwillToken;
  }


  public LicenseFilterDto isGroupValid(@javax.annotation.Nullable Boolean isGroupValid) {
    this.isGroupValid = isGroupValid;
    return this;
  }

  /**
   * Get isGroupValid
   * @return isGroupValid
   */
  @javax.annotation.Nullable
  public Boolean getIsGroupValid() {
    return isGroupValid;
  }

  public void setIsGroupValid(@javax.annotation.Nullable Boolean isGroupValid) {
    this.isGroupValid = isGroupValid;
  }


  public LicenseFilterDto isAssignedToken(@javax.annotation.Nullable Boolean isAssignedToken) {
    this.isAssignedToken = isAssignedToken;
    return this;
  }

  /**
   * Get isAssignedToken
   * @return isAssignedToken
   */
  @javax.annotation.Nullable
  public Boolean getIsAssignedToken() {
    return isAssignedToken;
  }

  public void setIsAssignedToken(@javax.annotation.Nullable Boolean isAssignedToken) {
    this.isAssignedToken = isAssignedToken;
  }


  public LicenseFilterDto groupCountFilter(@javax.annotation.Nullable Integer groupCountFilter) {
    this.groupCountFilter = groupCountFilter;
    return this;
  }

  /**
   * Get groupCountFilter
   * @return groupCountFilter
   */
  @javax.annotation.Nullable
  public Integer getGroupCountFilter() {
    return groupCountFilter;
  }

  public void setGroupCountFilter(@javax.annotation.Nullable Integer groupCountFilter) {
    this.groupCountFilter = groupCountFilter;
  }


  public LicenseFilterDto groupCountMode(@javax.annotation.Nullable String groupCountMode) {
    this.groupCountMode = groupCountMode;
    return this;
  }

  /**
   * Get groupCountMode
   * @return groupCountMode
   */
  @javax.annotation.Nullable
  public String getGroupCountMode() {
    return groupCountMode;
  }

  public void setGroupCountMode(@javax.annotation.Nullable String groupCountMode) {
    this.groupCountMode = groupCountMode;
  }


  public LicenseFilterDto sortType(@javax.annotation.Nullable LicenseFilterSortType sortType) {
    this.sortType = sortType;
    return this;
  }

  /**
   * Get sortType
   * @return sortType
   */
  @javax.annotation.Nullable
  public LicenseFilterSortType getSortType() {
    return sortType;
  }

  public void setSortType(@javax.annotation.Nullable LicenseFilterSortType sortType) {
    this.sortType = sortType;
  }


  public LicenseFilterDto sortOrder(@javax.annotation.Nullable Boolean sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Boolean getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(@javax.annotation.Nullable Boolean sortOrder) {
    this.sortOrder = sortOrder;
  }


  public LicenseFilterDto licenseTagFilter(@javax.annotation.Nullable List<Integer> licenseTagFilter) {
    this.licenseTagFilter = licenseTagFilter;
    return this;
  }

  public LicenseFilterDto addLicenseTagFilterItem(Integer licenseTagFilterItem) {
    if (this.licenseTagFilter == null) {
      this.licenseTagFilter = new ArrayList<>();
    }
    this.licenseTagFilter.add(licenseTagFilterItem);
    return this;
  }

  /**
   * Get licenseTagFilter
   * @return licenseTagFilter
   */
  @javax.annotation.Nullable
  public List<Integer> getLicenseTagFilter() {
    return licenseTagFilter;
  }

  public void setLicenseTagFilter(@javax.annotation.Nullable List<Integer> licenseTagFilter) {
    this.licenseTagFilter = licenseTagFilter;
  }


  public LicenseFilterDto tokenTagFilter(@javax.annotation.Nullable List<Integer> tokenTagFilter) {
    this.tokenTagFilter = tokenTagFilter;
    return this;
  }

  public LicenseFilterDto addTokenTagFilterItem(Integer tokenTagFilterItem) {
    if (this.tokenTagFilter == null) {
      this.tokenTagFilter = new ArrayList<>();
    }
    this.tokenTagFilter.add(tokenTagFilterItem);
    return this;
  }

  /**
   * Get tokenTagFilter
   * @return tokenTagFilter
   */
  @javax.annotation.Nullable
  public List<Integer> getTokenTagFilter() {
    return tokenTagFilter;
  }

  public void setTokenTagFilter(@javax.annotation.Nullable List<Integer> tokenTagFilter) {
    this.tokenTagFilter = tokenTagFilter;
  }


  public LicenseFilterDto customerTagFilter(@javax.annotation.Nullable List<Integer> customerTagFilter) {
    this.customerTagFilter = customerTagFilter;
    return this;
  }

  public LicenseFilterDto addCustomerTagFilterItem(Integer customerTagFilterItem) {
    if (this.customerTagFilter == null) {
      this.customerTagFilter = new ArrayList<>();
    }
    this.customerTagFilter.add(customerTagFilterItem);
    return this;
  }

  /**
   * Get customerTagFilter
   * @return customerTagFilter
   */
  @javax.annotation.Nullable
  public List<Integer> getCustomerTagFilter() {
    return customerTagFilter;
  }

  public void setCustomerTagFilter(@javax.annotation.Nullable List<Integer> customerTagFilter) {
    this.customerTagFilter = customerTagFilter;
  }


  public LicenseFilterDto analyticalFieldFilter(@javax.annotation.Nullable AnalyticalFieldFilterDto analyticalFieldFilter) {
    this.analyticalFieldFilter = analyticalFieldFilter;
    return this;
  }

  /**
   * Get analyticalFieldFilter
   * @return analyticalFieldFilter
   */
  @javax.annotation.Nullable
  public AnalyticalFieldFilterDto getAnalyticalFieldFilter() {
    return analyticalFieldFilter;
  }

  public void setAnalyticalFieldFilter(@javax.annotation.Nullable AnalyticalFieldFilterDto analyticalFieldFilter) {
    this.analyticalFieldFilter = analyticalFieldFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseFilterDto licenseFilterDto = (LicenseFilterDto) o;
    return Objects.equals(this.pageSize, licenseFilterDto.pageSize) &&
        Objects.equals(this.page, licenseFilterDto.page) &&
        Objects.equals(this.isActive, licenseFilterDto.isActive) &&
        Objects.equals(this.keySearch, licenseFilterDto.keySearch) &&
        Objects.equals(this.productFilter, licenseFilterDto.productFilter) &&
        Objects.equals(this.customerFilter, licenseFilterDto.customerFilter) &&
        Objects.equals(this.customerNumberFilter, licenseFilterDto.customerNumberFilter) &&
        Objects.equals(this.customerTypeFilter, licenseFilterDto.customerTypeFilter) &&
        Objects.equals(this.resellerTypeFilter, licenseFilterDto.resellerTypeFilter) &&
        Objects.equals(this.templateFilter, licenseFilterDto.templateFilter) &&
        Objects.equals(this.licenseTypeFilter, licenseFilterDto.licenseTypeFilter) &&
        Objects.equals(this.operatingSystemFilter, licenseFilterDto.operatingSystemFilter) &&
        Objects.equals(this.softwareVersionFilter, licenseFilterDto.softwareVersionFilter) &&
        Objects.equals(this.isSoftwareVersionValid, licenseFilterDto.isSoftwareVersionValid) &&
        Objects.equals(this.featureFilter, licenseFilterDto.featureFilter) &&
        Objects.equals(this.isFeatureActive, licenseFilterDto.isFeatureActive) &&
        Objects.equals(this.dateFilter, licenseFilterDto.dateFilter) &&
        Objects.equals(this.dateFilterMode, licenseFilterDto.dateFilterMode) &&
        Objects.equals(this.isNormalToken, licenseFilterDto.isNormalToken) &&
        Objects.equals(this.isGoodwillToken, licenseFilterDto.isGoodwillToken) &&
        Objects.equals(this.isGroupValid, licenseFilterDto.isGroupValid) &&
        Objects.equals(this.isAssignedToken, licenseFilterDto.isAssignedToken) &&
        Objects.equals(this.groupCountFilter, licenseFilterDto.groupCountFilter) &&
        Objects.equals(this.groupCountMode, licenseFilterDto.groupCountMode) &&
        Objects.equals(this.sortType, licenseFilterDto.sortType) &&
        Objects.equals(this.sortOrder, licenseFilterDto.sortOrder) &&
        Objects.equals(this.licenseTagFilter, licenseFilterDto.licenseTagFilter) &&
        Objects.equals(this.tokenTagFilter, licenseFilterDto.tokenTagFilter) &&
        Objects.equals(this.customerTagFilter, licenseFilterDto.customerTagFilter) &&
        Objects.equals(this.analyticalFieldFilter, licenseFilterDto.analyticalFieldFilter);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageSize, page, isActive, keySearch, productFilter, customerFilter, customerNumberFilter, customerTypeFilter, resellerTypeFilter, templateFilter, licenseTypeFilter, operatingSystemFilter, softwareVersionFilter, isSoftwareVersionValid, featureFilter, isFeatureActive, dateFilter, dateFilterMode, isNormalToken, isGoodwillToken, isGroupValid, isAssignedToken, groupCountFilter, groupCountMode, sortType, sortOrder, licenseTagFilter, tokenTagFilter, customerTagFilter, analyticalFieldFilter);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseFilterDto {\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    keySearch: ").append(toIndentedString(keySearch)).append("\n");
    sb.append("    productFilter: ").append(toIndentedString(productFilter)).append("\n");
    sb.append("    customerFilter: ").append(toIndentedString(customerFilter)).append("\n");
    sb.append("    customerNumberFilter: ").append(toIndentedString(customerNumberFilter)).append("\n");
    sb.append("    customerTypeFilter: ").append(toIndentedString(customerTypeFilter)).append("\n");
    sb.append("    resellerTypeFilter: ").append(toIndentedString(resellerTypeFilter)).append("\n");
    sb.append("    templateFilter: ").append(toIndentedString(templateFilter)).append("\n");
    sb.append("    licenseTypeFilter: ").append(toIndentedString(licenseTypeFilter)).append("\n");
    sb.append("    operatingSystemFilter: ").append(toIndentedString(operatingSystemFilter)).append("\n");
    sb.append("    softwareVersionFilter: ").append(toIndentedString(softwareVersionFilter)).append("\n");
    sb.append("    isSoftwareVersionValid: ").append(toIndentedString(isSoftwareVersionValid)).append("\n");
    sb.append("    featureFilter: ").append(toIndentedString(featureFilter)).append("\n");
    sb.append("    isFeatureActive: ").append(toIndentedString(isFeatureActive)).append("\n");
    sb.append("    dateFilter: ").append(toIndentedString(dateFilter)).append("\n");
    sb.append("    dateFilterMode: ").append(toIndentedString(dateFilterMode)).append("\n");
    sb.append("    isNormalToken: ").append(toIndentedString(isNormalToken)).append("\n");
    sb.append("    isGoodwillToken: ").append(toIndentedString(isGoodwillToken)).append("\n");
    sb.append("    isGroupValid: ").append(toIndentedString(isGroupValid)).append("\n");
    sb.append("    isAssignedToken: ").append(toIndentedString(isAssignedToken)).append("\n");
    sb.append("    groupCountFilter: ").append(toIndentedString(groupCountFilter)).append("\n");
    sb.append("    groupCountMode: ").append(toIndentedString(groupCountMode)).append("\n");
    sb.append("    sortType: ").append(toIndentedString(sortType)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    licenseTagFilter: ").append(toIndentedString(licenseTagFilter)).append("\n");
    sb.append("    tokenTagFilter: ").append(toIndentedString(tokenTagFilter)).append("\n");
    sb.append("    customerTagFilter: ").append(toIndentedString(customerTagFilter)).append("\n");
    sb.append("    analyticalFieldFilter: ").append(toIndentedString(analyticalFieldFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("page_size", "page", "is_active", "key_search", "product_filter", "customer_filter", "customer_number_filter", "customer_type_filter", "reseller_type_filter", "template_filter", "license_type_filter", "operating_system_filter", "software_version_filter", "is_software_version_valid", "feature_filter", "is_feature_active", "date_filter", "date_filter_mode", "is_normal_token", "is_goodwill_token", "is_group_valid", "is_assigned_token", "group_count_filter", "group_count_mode", "sort_type", "sort_order", "license_tag_filter", "token_tag_filter", "customer_tag_filter", "analytical_field_filter"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("page_size"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseFilterDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseFilterDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseFilterDto is not found in the empty JSON string", LicenseFilterDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseFilterDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseFilterDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseFilterDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("key_search") != null && !jsonObj.get("key_search").isJsonNull()) && !jsonObj.get("key_search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_search").toString()));
      }
      if ((jsonObj.get("product_filter") != null && !jsonObj.get("product_filter").isJsonNull()) && !jsonObj.get("product_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_filter").toString()));
      }
      if ((jsonObj.get("customer_filter") != null && !jsonObj.get("customer_filter").isJsonNull()) && !jsonObj.get("customer_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customer_number_filter") != null && !jsonObj.get("customer_number_filter").isJsonNull() && !jsonObj.get("customer_number_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_number_filter` to be an array in the JSON string but got `%s`", jsonObj.get("customer_number_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customer_type_filter") != null && !jsonObj.get("customer_type_filter").isJsonNull() && !jsonObj.get("customer_type_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_type_filter` to be an array in the JSON string but got `%s`", jsonObj.get("customer_type_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reseller_type_filter") != null && !jsonObj.get("reseller_type_filter").isJsonNull() && !jsonObj.get("reseller_type_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reseller_type_filter` to be an array in the JSON string but got `%s`", jsonObj.get("reseller_type_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("template_filter") != null && !jsonObj.get("template_filter").isJsonNull() && !jsonObj.get("template_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_filter` to be an array in the JSON string but got `%s`", jsonObj.get("template_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("license_type_filter") != null && !jsonObj.get("license_type_filter").isJsonNull() && !jsonObj.get("license_type_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_type_filter` to be an array in the JSON string but got `%s`", jsonObj.get("license_type_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("operating_system_filter") != null && !jsonObj.get("operating_system_filter").isJsonNull() && !jsonObj.get("operating_system_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operating_system_filter` to be an array in the JSON string but got `%s`", jsonObj.get("operating_system_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("software_version_filter") != null && !jsonObj.get("software_version_filter").isJsonNull() && !jsonObj.get("software_version_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `software_version_filter` to be an array in the JSON string but got `%s`", jsonObj.get("software_version_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("feature_filter") != null && !jsonObj.get("feature_filter").isJsonNull() && !jsonObj.get("feature_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `feature_filter` to be an array in the JSON string but got `%s`", jsonObj.get("feature_filter").toString()));
      }
      if ((jsonObj.get("date_filter_mode") != null && !jsonObj.get("date_filter_mode").isJsonNull()) && !jsonObj.get("date_filter_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_filter_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_filter_mode").toString()));
      }
      if ((jsonObj.get("group_count_mode") != null && !jsonObj.get("group_count_mode").isJsonNull()) && !jsonObj.get("group_count_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_count_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_count_mode").toString()));
      }
      // validate the optional field `sort_type`
      if (jsonObj.get("sort_type") != null && !jsonObj.get("sort_type").isJsonNull()) {
        LicenseFilterSortType.validateJsonElement(jsonObj.get("sort_type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("license_tag_filter") != null && !jsonObj.get("license_tag_filter").isJsonNull() && !jsonObj.get("license_tag_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_tag_filter` to be an array in the JSON string but got `%s`", jsonObj.get("license_tag_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("token_tag_filter") != null && !jsonObj.get("token_tag_filter").isJsonNull() && !jsonObj.get("token_tag_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_tag_filter` to be an array in the JSON string but got `%s`", jsonObj.get("token_tag_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customer_tag_filter") != null && !jsonObj.get("customer_tag_filter").isJsonNull() && !jsonObj.get("customer_tag_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_tag_filter` to be an array in the JSON string but got `%s`", jsonObj.get("customer_tag_filter").toString()));
      }
      // validate the optional field `analytical_field_filter`
      if (jsonObj.get("analytical_field_filter") != null && !jsonObj.get("analytical_field_filter").isJsonNull()) {
        AnalyticalFieldFilterDto.validateJsonElement(jsonObj.get("analytical_field_filter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseFilterDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseFilterDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseFilterDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseFilterDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseFilterDto>() {
           @Override
           public void write(JsonWriter out, LicenseFilterDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseFilterDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseFilterDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseFilterDto
   * @throws IOException if the JSON string is invalid with respect to LicenseFilterDto
   */
  public static LicenseFilterDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseFilterDto.class);
  }

  /**
   * Convert an instance of LicenseFilterDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

