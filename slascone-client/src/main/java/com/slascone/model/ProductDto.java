/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.ClientIdMode;
import com.slascone.model.OfflineLicensing;
import com.slascone.model.PrioritizedKeyMode;
import com.slascone.model.ResourceDto;
import com.slascone.model.SoftwareReleaseLimitationDto;
import com.slascone.model.UserIdType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * ProductDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class ProductDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "short_description";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  @javax.annotation.Nullable
  private String shortDescription;

  public static final String SERIALIZED_NAME_MINIMUM_SOFTWARE_RELEASE_ID = "minimum_software_release_id";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SOFTWARE_RELEASE_ID)
  @javax.annotation.Nullable
  private UUID minimumSoftwareReleaseId;

  public static final String SERIALIZED_NAME_SOFTWARE_RELEASE = "software_release";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_RELEASE)
  @javax.annotation.Nullable
  private List<SoftwareReleaseLimitationDto> softwareRelease;

  public static final String SERIALIZED_NAME_IS_GOODWILL_VISIBLE = "is_goodwill_visible";
  @SerializedName(SERIALIZED_NAME_IS_GOODWILL_VISIBLE)
  @javax.annotation.Nullable
  private Boolean isGoodwillVisible;

  public static final String SERIALIZED_NAME_IS_UPGRADE_COMPLIANCE_VISIBLE = "is_upgrade_compliance_visible";
  @SerializedName(SERIALIZED_NAME_IS_UPGRADE_COMPLIANCE_VISIBLE)
  @javax.annotation.Nullable
  private Boolean isUpgradeComplianceVisible;

  public static final String SERIALIZED_NAME_IS_GROUP_COMPLIANCE_VISIBLE = "is_group_compliance_visible";
  @SerializedName(SERIALIZED_NAME_IS_GROUP_COMPLIANCE_VISIBLE)
  @javax.annotation.Nullable
  private Boolean isGroupComplianceVisible;

  public static final String SERIALIZED_NAME_IS_TEMPORARY_LICENSE_RULES_VISIBLE = "is_temporary_license_rules_visible";
  @SerializedName(SERIALIZED_NAME_IS_TEMPORARY_LICENSE_RULES_VISIBLE)
  @javax.annotation.Nullable
  private Boolean isTemporaryLicenseRulesVisible;

  public static final String SERIALIZED_NAME_PRIORITIZED_KEY = "prioritized_key";
  @SerializedName(SERIALIZED_NAME_PRIORITIZED_KEY)
  @javax.annotation.Nonnull
  private PrioritizedKeyMode prioritizedKey;

  public static final String SERIALIZED_NAME_OFFLINE_LICENSING = "offline_licensing";
  @SerializedName(SERIALIZED_NAME_OFFLINE_LICENSING)
  @javax.annotation.Nullable
  private OfflineLicensing offlineLicensing;

  public static final String SERIALIZED_NAME_LICENSE_FILE_NAME = "license_file_name";
  @SerializedName(SERIALIZED_NAME_LICENSE_FILE_NAME)
  @javax.annotation.Nullable
  private String licenseFileName;

  public static final String SERIALIZED_NAME_USER_ID_TYPE = "user_id_type";
  @SerializedName(SERIALIZED_NAME_USER_ID_TYPE)
  @javax.annotation.Nullable
  private UserIdType userIdType;

  public static final String SERIALIZED_NAME_CLIENT_ID_MODE = "client_id_mode";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID_MODE)
  @javax.annotation.Nullable
  private ClientIdMode clientIdMode;

  public static final String SERIALIZED_NAME_MAXIMUM_INACTIVE_DAYS = "maximum_inactive_days";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_INACTIVE_DAYS)
  @javax.annotation.Nullable
  private Integer maximumInactiveDays;

  public static final String SERIALIZED_NAME_MAX_LICENSES_PER_USER = "max_licenses_per_user";
  @SerializedName(SERIALIZED_NAME_MAX_LICENSES_PER_USER)
  @javax.annotation.Nullable
  private Integer maxLicensesPerUser;

  public static final String SERIALIZED_NAME_CREATED_DATE_UTC = "created_date_utc";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime createdDateUtc;

  public static final String SERIALIZED_NAME_MODIFIED_DATE_UTC = "modified_date_utc";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDateUtc;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "last_modified_by";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  @javax.annotation.Nullable
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_MINIMUM_SOFTWARE_RELEASE = "minimum_software_release";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SOFTWARE_RELEASE)
  @javax.annotation.Nullable
  private SoftwareReleaseLimitationDto minimumSoftwareRelease;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  @javax.annotation.Nullable
  private ResourceDto logo;

  public ProductDto() {
  }

  public ProductDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public ProductDto name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public ProductDto description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ProductDto shortDescription(@javax.annotation.Nullable String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Get shortDescription
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(@javax.annotation.Nullable String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public ProductDto minimumSoftwareReleaseId(@javax.annotation.Nullable UUID minimumSoftwareReleaseId) {
    this.minimumSoftwareReleaseId = minimumSoftwareReleaseId;
    return this;
  }

  /**
   * Get minimumSoftwareReleaseId
   * @return minimumSoftwareReleaseId
   */
  @javax.annotation.Nullable
  public UUID getMinimumSoftwareReleaseId() {
    return minimumSoftwareReleaseId;
  }

  public void setMinimumSoftwareReleaseId(@javax.annotation.Nullable UUID minimumSoftwareReleaseId) {
    this.minimumSoftwareReleaseId = minimumSoftwareReleaseId;
  }


  public ProductDto softwareRelease(@javax.annotation.Nullable List<SoftwareReleaseLimitationDto> softwareRelease) {
    this.softwareRelease = softwareRelease;
    return this;
  }

  public ProductDto addSoftwareReleaseItem(SoftwareReleaseLimitationDto softwareReleaseItem) {
    if (this.softwareRelease == null) {
      this.softwareRelease = new ArrayList<>();
    }
    this.softwareRelease.add(softwareReleaseItem);
    return this;
  }

  /**
   * Get softwareRelease
   * @return softwareRelease
   */
  @javax.annotation.Nullable
  public List<SoftwareReleaseLimitationDto> getSoftwareRelease() {
    return softwareRelease;
  }

  public void setSoftwareRelease(@javax.annotation.Nullable List<SoftwareReleaseLimitationDto> softwareRelease) {
    this.softwareRelease = softwareRelease;
  }


  public ProductDto isGoodwillVisible(@javax.annotation.Nullable Boolean isGoodwillVisible) {
    this.isGoodwillVisible = isGoodwillVisible;
    return this;
  }

  /**
   * Get isGoodwillVisible
   * @return isGoodwillVisible
   */
  @javax.annotation.Nullable
  public Boolean getIsGoodwillVisible() {
    return isGoodwillVisible;
  }

  public void setIsGoodwillVisible(@javax.annotation.Nullable Boolean isGoodwillVisible) {
    this.isGoodwillVisible = isGoodwillVisible;
  }


  public ProductDto isUpgradeComplianceVisible(@javax.annotation.Nullable Boolean isUpgradeComplianceVisible) {
    this.isUpgradeComplianceVisible = isUpgradeComplianceVisible;
    return this;
  }

  /**
   * Get isUpgradeComplianceVisible
   * @return isUpgradeComplianceVisible
   */
  @javax.annotation.Nullable
  public Boolean getIsUpgradeComplianceVisible() {
    return isUpgradeComplianceVisible;
  }

  public void setIsUpgradeComplianceVisible(@javax.annotation.Nullable Boolean isUpgradeComplianceVisible) {
    this.isUpgradeComplianceVisible = isUpgradeComplianceVisible;
  }


  public ProductDto isGroupComplianceVisible(@javax.annotation.Nullable Boolean isGroupComplianceVisible) {
    this.isGroupComplianceVisible = isGroupComplianceVisible;
    return this;
  }

  /**
   * Get isGroupComplianceVisible
   * @return isGroupComplianceVisible
   */
  @javax.annotation.Nullable
  public Boolean getIsGroupComplianceVisible() {
    return isGroupComplianceVisible;
  }

  public void setIsGroupComplianceVisible(@javax.annotation.Nullable Boolean isGroupComplianceVisible) {
    this.isGroupComplianceVisible = isGroupComplianceVisible;
  }


  public ProductDto isTemporaryLicenseRulesVisible(@javax.annotation.Nullable Boolean isTemporaryLicenseRulesVisible) {
    this.isTemporaryLicenseRulesVisible = isTemporaryLicenseRulesVisible;
    return this;
  }

  /**
   * Get isTemporaryLicenseRulesVisible
   * @return isTemporaryLicenseRulesVisible
   */
  @javax.annotation.Nullable
  public Boolean getIsTemporaryLicenseRulesVisible() {
    return isTemporaryLicenseRulesVisible;
  }

  public void setIsTemporaryLicenseRulesVisible(@javax.annotation.Nullable Boolean isTemporaryLicenseRulesVisible) {
    this.isTemporaryLicenseRulesVisible = isTemporaryLicenseRulesVisible;
  }


  public ProductDto prioritizedKey(@javax.annotation.Nonnull PrioritizedKeyMode prioritizedKey) {
    this.prioritizedKey = prioritizedKey;
    return this;
  }

  /**
   * Get prioritizedKey
   * @return prioritizedKey
   */
  @javax.annotation.Nonnull
  public PrioritizedKeyMode getPrioritizedKey() {
    return prioritizedKey;
  }

  public void setPrioritizedKey(@javax.annotation.Nonnull PrioritizedKeyMode prioritizedKey) {
    this.prioritizedKey = prioritizedKey;
  }


  public ProductDto offlineLicensing(@javax.annotation.Nullable OfflineLicensing offlineLicensing) {
    this.offlineLicensing = offlineLicensing;
    return this;
  }

  /**
   * Get offlineLicensing
   * @return offlineLicensing
   */
  @javax.annotation.Nullable
  public OfflineLicensing getOfflineLicensing() {
    return offlineLicensing;
  }

  public void setOfflineLicensing(@javax.annotation.Nullable OfflineLicensing offlineLicensing) {
    this.offlineLicensing = offlineLicensing;
  }


  public ProductDto licenseFileName(@javax.annotation.Nullable String licenseFileName) {
    this.licenseFileName = licenseFileName;
    return this;
  }

  /**
   * Get licenseFileName
   * @return licenseFileName
   */
  @javax.annotation.Nullable
  public String getLicenseFileName() {
    return licenseFileName;
  }

  public void setLicenseFileName(@javax.annotation.Nullable String licenseFileName) {
    this.licenseFileName = licenseFileName;
  }


  public ProductDto userIdType(@javax.annotation.Nullable UserIdType userIdType) {
    this.userIdType = userIdType;
    return this;
  }

  /**
   * Get userIdType
   * @return userIdType
   */
  @javax.annotation.Nullable
  public UserIdType getUserIdType() {
    return userIdType;
  }

  public void setUserIdType(@javax.annotation.Nullable UserIdType userIdType) {
    this.userIdType = userIdType;
  }


  public ProductDto clientIdMode(@javax.annotation.Nullable ClientIdMode clientIdMode) {
    this.clientIdMode = clientIdMode;
    return this;
  }

  /**
   * Get clientIdMode
   * @return clientIdMode
   */
  @javax.annotation.Nullable
  public ClientIdMode getClientIdMode() {
    return clientIdMode;
  }

  public void setClientIdMode(@javax.annotation.Nullable ClientIdMode clientIdMode) {
    this.clientIdMode = clientIdMode;
  }


  public ProductDto maximumInactiveDays(@javax.annotation.Nullable Integer maximumInactiveDays) {
    this.maximumInactiveDays = maximumInactiveDays;
    return this;
  }

  /**
   * Get maximumInactiveDays
   * @return maximumInactiveDays
   */
  @javax.annotation.Nullable
  public Integer getMaximumInactiveDays() {
    return maximumInactiveDays;
  }

  public void setMaximumInactiveDays(@javax.annotation.Nullable Integer maximumInactiveDays) {
    this.maximumInactiveDays = maximumInactiveDays;
  }


  public ProductDto maxLicensesPerUser(@javax.annotation.Nullable Integer maxLicensesPerUser) {
    this.maxLicensesPerUser = maxLicensesPerUser;
    return this;
  }

  /**
   * Get maxLicensesPerUser
   * @return maxLicensesPerUser
   */
  @javax.annotation.Nullable
  public Integer getMaxLicensesPerUser() {
    return maxLicensesPerUser;
  }

  public void setMaxLicensesPerUser(@javax.annotation.Nullable Integer maxLicensesPerUser) {
    this.maxLicensesPerUser = maxLicensesPerUser;
  }


  public ProductDto createdDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
    return this;
  }

  /**
   * Get createdDateUtc
   * @return createdDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateUtc() {
    return createdDateUtc;
  }

  public void setCreatedDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
  }


  public ProductDto modifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
    return this;
  }

  /**
   * Get modifiedDateUtc
   * @return modifiedDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDateUtc() {
    return modifiedDateUtc;
  }

  public void setModifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
  }


  public ProductDto lastModifiedBy(@javax.annotation.Nullable String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Get lastModifiedBy
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(@javax.annotation.Nullable String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public ProductDto minimumSoftwareRelease(@javax.annotation.Nullable SoftwareReleaseLimitationDto minimumSoftwareRelease) {
    this.minimumSoftwareRelease = minimumSoftwareRelease;
    return this;
  }

  /**
   * Get minimumSoftwareRelease
   * @return minimumSoftwareRelease
   */
  @javax.annotation.Nullable
  public SoftwareReleaseLimitationDto getMinimumSoftwareRelease() {
    return minimumSoftwareRelease;
  }

  public void setMinimumSoftwareRelease(@javax.annotation.Nullable SoftwareReleaseLimitationDto minimumSoftwareRelease) {
    this.minimumSoftwareRelease = minimumSoftwareRelease;
  }


  public ProductDto logo(@javax.annotation.Nullable ResourceDto logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public ResourceDto getLogo() {
    return logo;
  }

  public void setLogo(@javax.annotation.Nullable ResourceDto logo) {
    this.logo = logo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductDto productDto = (ProductDto) o;
    return Objects.equals(this.id, productDto.id) &&
        Objects.equals(this.name, productDto.name) &&
        Objects.equals(this.description, productDto.description) &&
        Objects.equals(this.shortDescription, productDto.shortDescription) &&
        Objects.equals(this.minimumSoftwareReleaseId, productDto.minimumSoftwareReleaseId) &&
        Objects.equals(this.softwareRelease, productDto.softwareRelease) &&
        Objects.equals(this.isGoodwillVisible, productDto.isGoodwillVisible) &&
        Objects.equals(this.isUpgradeComplianceVisible, productDto.isUpgradeComplianceVisible) &&
        Objects.equals(this.isGroupComplianceVisible, productDto.isGroupComplianceVisible) &&
        Objects.equals(this.isTemporaryLicenseRulesVisible, productDto.isTemporaryLicenseRulesVisible) &&
        Objects.equals(this.prioritizedKey, productDto.prioritizedKey) &&
        Objects.equals(this.offlineLicensing, productDto.offlineLicensing) &&
        Objects.equals(this.licenseFileName, productDto.licenseFileName) &&
        Objects.equals(this.userIdType, productDto.userIdType) &&
        Objects.equals(this.clientIdMode, productDto.clientIdMode) &&
        Objects.equals(this.maximumInactiveDays, productDto.maximumInactiveDays) &&
        Objects.equals(this.maxLicensesPerUser, productDto.maxLicensesPerUser) &&
        Objects.equals(this.createdDateUtc, productDto.createdDateUtc) &&
        Objects.equals(this.modifiedDateUtc, productDto.modifiedDateUtc) &&
        Objects.equals(this.lastModifiedBy, productDto.lastModifiedBy) &&
        Objects.equals(this.minimumSoftwareRelease, productDto.minimumSoftwareRelease) &&
        Objects.equals(this.logo, productDto.logo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, shortDescription, minimumSoftwareReleaseId, softwareRelease, isGoodwillVisible, isUpgradeComplianceVisible, isGroupComplianceVisible, isTemporaryLicenseRulesVisible, prioritizedKey, offlineLicensing, licenseFileName, userIdType, clientIdMode, maximumInactiveDays, maxLicensesPerUser, createdDateUtc, modifiedDateUtc, lastModifiedBy, minimumSoftwareRelease, logo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    minimumSoftwareReleaseId: ").append(toIndentedString(minimumSoftwareReleaseId)).append("\n");
    sb.append("    softwareRelease: ").append(toIndentedString(softwareRelease)).append("\n");
    sb.append("    isGoodwillVisible: ").append(toIndentedString(isGoodwillVisible)).append("\n");
    sb.append("    isUpgradeComplianceVisible: ").append(toIndentedString(isUpgradeComplianceVisible)).append("\n");
    sb.append("    isGroupComplianceVisible: ").append(toIndentedString(isGroupComplianceVisible)).append("\n");
    sb.append("    isTemporaryLicenseRulesVisible: ").append(toIndentedString(isTemporaryLicenseRulesVisible)).append("\n");
    sb.append("    prioritizedKey: ").append(toIndentedString(prioritizedKey)).append("\n");
    sb.append("    offlineLicensing: ").append(toIndentedString(offlineLicensing)).append("\n");
    sb.append("    licenseFileName: ").append(toIndentedString(licenseFileName)).append("\n");
    sb.append("    userIdType: ").append(toIndentedString(userIdType)).append("\n");
    sb.append("    clientIdMode: ").append(toIndentedString(clientIdMode)).append("\n");
    sb.append("    maximumInactiveDays: ").append(toIndentedString(maximumInactiveDays)).append("\n");
    sb.append("    maxLicensesPerUser: ").append(toIndentedString(maxLicensesPerUser)).append("\n");
    sb.append("    createdDateUtc: ").append(toIndentedString(createdDateUtc)).append("\n");
    sb.append("    modifiedDateUtc: ").append(toIndentedString(modifiedDateUtc)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    minimumSoftwareRelease: ").append(toIndentedString(minimumSoftwareRelease)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "name", "description", "short_description", "minimum_software_release_id", "software_release", "is_goodwill_visible", "is_upgrade_compliance_visible", "is_group_compliance_visible", "is_temporary_license_rules_visible", "prioritized_key", "offline_licensing", "license_file_name", "user_id_type", "client_id_mode", "maximum_inactive_days", "max_licenses_per_user", "created_date_utc", "modified_date_utc", "last_modified_by", "minimum_software_release", "logo"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("name", "prioritized_key"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductDto is not found in the empty JSON string", ProductDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("short_description") != null && !jsonObj.get("short_description").isJsonNull()) && !jsonObj.get("short_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_description").toString()));
      }
      if ((jsonObj.get("minimum_software_release_id") != null && !jsonObj.get("minimum_software_release_id").isJsonNull()) && !jsonObj.get("minimum_software_release_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_software_release_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_software_release_id").toString()));
      }
      if (jsonObj.get("software_release") != null && !jsonObj.get("software_release").isJsonNull()) {
        JsonArray jsonArraysoftwareRelease = jsonObj.getAsJsonArray("software_release");
        if (jsonArraysoftwareRelease != null) {
          // ensure the json data is an array
          if (!jsonObj.get("software_release").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `software_release` to be an array in the JSON string but got `%s`", jsonObj.get("software_release").toString()));
          }

          // validate the optional field `software_release` (array)
          for (int i = 0; i < jsonArraysoftwareRelease.size(); i++) {
            SoftwareReleaseLimitationDto.validateJsonElement(jsonArraysoftwareRelease.get(i));
          };
        }
      }
      // validate the required field `prioritized_key`
      PrioritizedKeyMode.validateJsonElement(jsonObj.get("prioritized_key"));
      // validate the optional field `offline_licensing`
      if (jsonObj.get("offline_licensing") != null && !jsonObj.get("offline_licensing").isJsonNull()) {
        OfflineLicensing.validateJsonElement(jsonObj.get("offline_licensing"));
      }
      if ((jsonObj.get("license_file_name") != null && !jsonObj.get("license_file_name").isJsonNull()) && !jsonObj.get("license_file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_file_name").toString()));
      }
      // validate the optional field `user_id_type`
      if (jsonObj.get("user_id_type") != null && !jsonObj.get("user_id_type").isJsonNull()) {
        UserIdType.validateJsonElement(jsonObj.get("user_id_type"));
      }
      // validate the optional field `client_id_mode`
      if (jsonObj.get("client_id_mode") != null && !jsonObj.get("client_id_mode").isJsonNull()) {
        ClientIdMode.validateJsonElement(jsonObj.get("client_id_mode"));
      }
      if ((jsonObj.get("last_modified_by") != null && !jsonObj.get("last_modified_by").isJsonNull()) && !jsonObj.get("last_modified_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified_by").toString()));
      }
      // validate the optional field `minimum_software_release`
      if (jsonObj.get("minimum_software_release") != null && !jsonObj.get("minimum_software_release").isJsonNull()) {
        SoftwareReleaseLimitationDto.validateJsonElement(jsonObj.get("minimum_software_release"));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        ResourceDto.validateJsonElement(jsonObj.get("logo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductDto>() {
           @Override
           public void write(JsonWriter out, ProductDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductDto
   * @throws IOException if the JSON string is invalid with respect to ProductDto
   */
  public static ProductDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductDto.class);
  }

  /**
   * Convert an instance of ProductDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

