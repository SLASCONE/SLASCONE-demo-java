/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.EmailTemplateDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * AbstractEmailTemplateDtoOfEmailTemplateDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class AbstractEmailTemplateDtoOfEmailTemplateDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nullable
  private String body;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  @javax.annotation.Nullable
  private UUID parentId;

  public static final String SERIALIZED_NAME_SUB_EMAIL_TEMPLATES = "sub_email_templates";
  @SerializedName(SERIALIZED_NAME_SUB_EMAIL_TEMPLATES)
  @javax.annotation.Nullable
  private List<EmailTemplateDto> subEmailTemplates;

  public static final String SERIALIZED_NAME_CREATED_DATE_UTC = "created_date_utc";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime createdDateUtc;

  public static final String SERIALIZED_NAME_MODIFIED_DATE_UTC = "modified_date_utc";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDateUtc;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "last_modified_by";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  @javax.annotation.Nullable
  private String lastModifiedBy;

  public AbstractEmailTemplateDtoOfEmailTemplateDto() {
  }

  public AbstractEmailTemplateDtoOfEmailTemplateDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public AbstractEmailTemplateDtoOfEmailTemplateDto name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AbstractEmailTemplateDtoOfEmailTemplateDto language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public AbstractEmailTemplateDtoOfEmailTemplateDto subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public AbstractEmailTemplateDtoOfEmailTemplateDto body(@javax.annotation.Nullable String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nullable String body) {
    this.body = body;
  }


  public AbstractEmailTemplateDtoOfEmailTemplateDto parentId(@javax.annotation.Nullable UUID parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @javax.annotation.Nullable
  public UUID getParentId() {
    return parentId;
  }

  public void setParentId(@javax.annotation.Nullable UUID parentId) {
    this.parentId = parentId;
  }


  public AbstractEmailTemplateDtoOfEmailTemplateDto subEmailTemplates(@javax.annotation.Nullable List<EmailTemplateDto> subEmailTemplates) {
    this.subEmailTemplates = subEmailTemplates;
    return this;
  }

  public AbstractEmailTemplateDtoOfEmailTemplateDto addSubEmailTemplatesItem(EmailTemplateDto subEmailTemplatesItem) {
    if (this.subEmailTemplates == null) {
      this.subEmailTemplates = new ArrayList<>();
    }
    this.subEmailTemplates.add(subEmailTemplatesItem);
    return this;
  }

  /**
   * Get subEmailTemplates
   * @return subEmailTemplates
   */
  @javax.annotation.Nullable
  public List<EmailTemplateDto> getSubEmailTemplates() {
    return subEmailTemplates;
  }

  public void setSubEmailTemplates(@javax.annotation.Nullable List<EmailTemplateDto> subEmailTemplates) {
    this.subEmailTemplates = subEmailTemplates;
  }


  public AbstractEmailTemplateDtoOfEmailTemplateDto createdDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
    return this;
  }

  /**
   * Get createdDateUtc
   * @return createdDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateUtc() {
    return createdDateUtc;
  }

  public void setCreatedDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
  }


  public AbstractEmailTemplateDtoOfEmailTemplateDto modifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
    return this;
  }

  /**
   * Get modifiedDateUtc
   * @return modifiedDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDateUtc() {
    return modifiedDateUtc;
  }

  public void setModifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
  }


  public AbstractEmailTemplateDtoOfEmailTemplateDto lastModifiedBy(@javax.annotation.Nullable String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Get lastModifiedBy
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(@javax.annotation.Nullable String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractEmailTemplateDtoOfEmailTemplateDto abstractEmailTemplateDtoOfEmailTemplateDto = (AbstractEmailTemplateDtoOfEmailTemplateDto) o;
    return Objects.equals(this.id, abstractEmailTemplateDtoOfEmailTemplateDto.id) &&
        Objects.equals(this.name, abstractEmailTemplateDtoOfEmailTemplateDto.name) &&
        Objects.equals(this.language, abstractEmailTemplateDtoOfEmailTemplateDto.language) &&
        Objects.equals(this.subject, abstractEmailTemplateDtoOfEmailTemplateDto.subject) &&
        Objects.equals(this.body, abstractEmailTemplateDtoOfEmailTemplateDto.body) &&
        Objects.equals(this.parentId, abstractEmailTemplateDtoOfEmailTemplateDto.parentId) &&
        Objects.equals(this.subEmailTemplates, abstractEmailTemplateDtoOfEmailTemplateDto.subEmailTemplates) &&
        Objects.equals(this.createdDateUtc, abstractEmailTemplateDtoOfEmailTemplateDto.createdDateUtc) &&
        Objects.equals(this.modifiedDateUtc, abstractEmailTemplateDtoOfEmailTemplateDto.modifiedDateUtc) &&
        Objects.equals(this.lastModifiedBy, abstractEmailTemplateDtoOfEmailTemplateDto.lastModifiedBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, language, subject, body, parentId, subEmailTemplates, createdDateUtc, modifiedDateUtc, lastModifiedBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractEmailTemplateDtoOfEmailTemplateDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    subEmailTemplates: ").append(toIndentedString(subEmailTemplates)).append("\n");
    sb.append("    createdDateUtc: ").append(toIndentedString(createdDateUtc)).append("\n");
    sb.append("    modifiedDateUtc: ").append(toIndentedString(modifiedDateUtc)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "name", "language", "subject", "body", "parent_id", "sub_email_templates", "created_date_utc", "modified_date_utc", "last_modified_by"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbstractEmailTemplateDtoOfEmailTemplateDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbstractEmailTemplateDtoOfEmailTemplateDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbstractEmailTemplateDtoOfEmailTemplateDto is not found in the empty JSON string", AbstractEmailTemplateDtoOfEmailTemplateDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbstractEmailTemplateDtoOfEmailTemplateDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbstractEmailTemplateDtoOfEmailTemplateDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      if (jsonObj.get("sub_email_templates") != null && !jsonObj.get("sub_email_templates").isJsonNull()) {
        JsonArray jsonArraysubEmailTemplates = jsonObj.getAsJsonArray("sub_email_templates");
        if (jsonArraysubEmailTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sub_email_templates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sub_email_templates` to be an array in the JSON string but got `%s`", jsonObj.get("sub_email_templates").toString()));
          }

          // validate the optional field `sub_email_templates` (array)
          for (int i = 0; i < jsonArraysubEmailTemplates.size(); i++) {
            EmailTemplateDto.validateJsonElement(jsonArraysubEmailTemplates.get(i));
          };
        }
      }
      if ((jsonObj.get("last_modified_by") != null && !jsonObj.get("last_modified_by").isJsonNull()) && !jsonObj.get("last_modified_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified_by").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbstractEmailTemplateDtoOfEmailTemplateDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbstractEmailTemplateDtoOfEmailTemplateDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbstractEmailTemplateDtoOfEmailTemplateDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbstractEmailTemplateDtoOfEmailTemplateDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AbstractEmailTemplateDtoOfEmailTemplateDto>() {
           @Override
           public void write(JsonWriter out, AbstractEmailTemplateDtoOfEmailTemplateDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbstractEmailTemplateDtoOfEmailTemplateDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbstractEmailTemplateDtoOfEmailTemplateDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbstractEmailTemplateDtoOfEmailTemplateDto
   * @throws IOException if the JSON string is invalid with respect to AbstractEmailTemplateDtoOfEmailTemplateDto
   */
  public static AbstractEmailTemplateDtoOfEmailTemplateDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbstractEmailTemplateDtoOfEmailTemplateDto.class);
  }

  /**
   * Convert an instance of AbstractEmailTemplateDtoOfEmailTemplateDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

