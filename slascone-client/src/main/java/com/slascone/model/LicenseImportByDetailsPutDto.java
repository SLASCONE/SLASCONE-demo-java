/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.LicenseImportConstrainedVariableDto;
import com.slascone.model.LicenseImportLimitationDto;
import com.slascone.model.LicenseImportVariableDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * LicenseImportByDetailsPutDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class LicenseImportByDetailsPutDto {
  public static final String SERIALIZED_NAME_LICENSE_KEY = "license_key";
  @SerializedName(SERIALIZED_NAME_LICENSE_KEY)
  @javax.annotation.Nonnull
  private String licenseKey;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  @javax.annotation.Nonnull
  private UUID productId;

  public static final String SERIALIZED_NAME_CUSTOMER_NUMBER = "customer_number";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NUMBER)
  @javax.annotation.Nonnull
  private String customerNumber;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nonnull
  private String template;

  public static final String SERIALIZED_NAME_LEGACY_LICENSE_KEY = "legacy_license_key";
  @SerializedName(SERIALIZED_NAME_LEGACY_LICENSE_KEY)
  @javax.annotation.Nullable
  private String legacyLicenseKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_TOKEN_LIMIT = "token_limit";
  @SerializedName(SERIALIZED_NAME_TOKEN_LIMIT)
  @javax.annotation.Nullable
  private Integer tokenLimit;

  public static final String SERIALIZED_NAME_GOODWILL_TOKEN_LIMIT = "goodwill_token_limit";
  @SerializedName(SERIALIZED_NAME_GOODWILL_TOKEN_LIMIT)
  @javax.annotation.Nullable
  private Integer goodwillTokenLimit;

  public static final String SERIALIZED_NAME_FLOATING_TOKEN_LIMIT = "floating_token_limit";
  @SerializedName(SERIALIZED_NAME_FLOATING_TOKEN_LIMIT)
  @javax.annotation.Nullable
  private Integer floatingTokenLimit;

  public static final String SERIALIZED_NAME_USER_LIMIT = "user_limit";
  @SerializedName(SERIALIZED_NAME_USER_LIMIT)
  @javax.annotation.Nullable
  private Integer userLimit;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private String startDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expiration_date";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  @javax.annotation.Nullable
  private String expirationDate;

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "license_type";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  @javax.annotation.Nullable
  private String licenseType;

  public static final String SERIALIZED_NAME_SOFTWARE_RELEASE_LIMITATION = "software_release_limitation";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_RELEASE_LIMITATION)
  @javax.annotation.Nullable
  private String softwareReleaseLimitation;

  public static final String SERIALIZED_NAME_LICENSE_FEATURES = "license_features";
  @SerializedName(SERIALIZED_NAME_LICENSE_FEATURES)
  @javax.annotation.Nullable
  private List<String> licenseFeatures;

  public static final String SERIALIZED_NAME_LICENSE_LIMITATIONS = "license_limitations";
  @SerializedName(SERIALIZED_NAME_LICENSE_LIMITATIONS)
  @javax.annotation.Nullable
  private List<LicenseImportLimitationDto> licenseLimitations;

  public static final String SERIALIZED_NAME_LICENSE_VARIABLES = "license_variables";
  @SerializedName(SERIALIZED_NAME_LICENSE_VARIABLES)
  @javax.annotation.Nullable
  private List<LicenseImportVariableDto> licenseVariables;

  public static final String SERIALIZED_NAME_LICENSE_CONSTRAINED_VARIABLES = "license_constrained_variables";
  @SerializedName(SERIALIZED_NAME_LICENSE_CONSTRAINED_VARIABLES)
  @javax.annotation.Nullable
  private List<LicenseImportConstrainedVariableDto> licenseConstrainedVariables;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  @javax.annotation.Nullable
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_RESUME_ON_ERROR = "resume_on_error";
  @SerializedName(SERIALIZED_NAME_RESUME_ON_ERROR)
  @javax.annotation.Nullable
  private Boolean resumeOnError = false;

  public LicenseImportByDetailsPutDto() {
  }

  public LicenseImportByDetailsPutDto licenseKey(@javax.annotation.Nonnull String licenseKey) {
    this.licenseKey = licenseKey;
    return this;
  }

  /**
   * Get licenseKey
   * @return licenseKey
   */
  @javax.annotation.Nonnull
  public String getLicenseKey() {
    return licenseKey;
  }

  public void setLicenseKey(@javax.annotation.Nonnull String licenseKey) {
    this.licenseKey = licenseKey;
  }


  public LicenseImportByDetailsPutDto productId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nonnull
  public UUID getProductId() {
    return productId;
  }

  public void setProductId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
  }


  public LicenseImportByDetailsPutDto customerNumber(@javax.annotation.Nonnull String customerNumber) {
    this.customerNumber = customerNumber;
    return this;
  }

  /**
   * Get customerNumber
   * @return customerNumber
   */
  @javax.annotation.Nonnull
  public String getCustomerNumber() {
    return customerNumber;
  }

  public void setCustomerNumber(@javax.annotation.Nonnull String customerNumber) {
    this.customerNumber = customerNumber;
  }


  public LicenseImportByDetailsPutDto template(@javax.annotation.Nonnull String template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nonnull
  public String getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nonnull String template) {
    this.template = template;
  }


  public LicenseImportByDetailsPutDto legacyLicenseKey(@javax.annotation.Nullable String legacyLicenseKey) {
    this.legacyLicenseKey = legacyLicenseKey;
    return this;
  }

  /**
   * Get legacyLicenseKey
   * @return legacyLicenseKey
   */
  @javax.annotation.Nullable
  public String getLegacyLicenseKey() {
    return legacyLicenseKey;
  }

  public void setLegacyLicenseKey(@javax.annotation.Nullable String legacyLicenseKey) {
    this.legacyLicenseKey = legacyLicenseKey;
  }


  public LicenseImportByDetailsPutDto name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public LicenseImportByDetailsPutDto description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public LicenseImportByDetailsPutDto tokenLimit(@javax.annotation.Nullable Integer tokenLimit) {
    this.tokenLimit = tokenLimit;
    return this;
  }

  /**
   * Get tokenLimit
   * @return tokenLimit
   */
  @javax.annotation.Nullable
  public Integer getTokenLimit() {
    return tokenLimit;
  }

  public void setTokenLimit(@javax.annotation.Nullable Integer tokenLimit) {
    this.tokenLimit = tokenLimit;
  }


  public LicenseImportByDetailsPutDto goodwillTokenLimit(@javax.annotation.Nullable Integer goodwillTokenLimit) {
    this.goodwillTokenLimit = goodwillTokenLimit;
    return this;
  }

  /**
   * Get goodwillTokenLimit
   * @return goodwillTokenLimit
   */
  @javax.annotation.Nullable
  public Integer getGoodwillTokenLimit() {
    return goodwillTokenLimit;
  }

  public void setGoodwillTokenLimit(@javax.annotation.Nullable Integer goodwillTokenLimit) {
    this.goodwillTokenLimit = goodwillTokenLimit;
  }


  public LicenseImportByDetailsPutDto floatingTokenLimit(@javax.annotation.Nullable Integer floatingTokenLimit) {
    this.floatingTokenLimit = floatingTokenLimit;
    return this;
  }

  /**
   * Get floatingTokenLimit
   * @return floatingTokenLimit
   */
  @javax.annotation.Nullable
  public Integer getFloatingTokenLimit() {
    return floatingTokenLimit;
  }

  public void setFloatingTokenLimit(@javax.annotation.Nullable Integer floatingTokenLimit) {
    this.floatingTokenLimit = floatingTokenLimit;
  }


  public LicenseImportByDetailsPutDto userLimit(@javax.annotation.Nullable Integer userLimit) {
    this.userLimit = userLimit;
    return this;
  }

  /**
   * Get userLimit
   * @return userLimit
   */
  @javax.annotation.Nullable
  public Integer getUserLimit() {
    return userLimit;
  }

  public void setUserLimit(@javax.annotation.Nullable Integer userLimit) {
    this.userLimit = userLimit;
  }


  public LicenseImportByDetailsPutDto startDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
  }


  public LicenseImportByDetailsPutDto expirationDate(@javax.annotation.Nullable String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(@javax.annotation.Nullable String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public LicenseImportByDetailsPutDto licenseType(@javax.annotation.Nullable String licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * Get licenseType
   * @return licenseType
   */
  @javax.annotation.Nullable
  public String getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(@javax.annotation.Nullable String licenseType) {
    this.licenseType = licenseType;
  }


  public LicenseImportByDetailsPutDto softwareReleaseLimitation(@javax.annotation.Nullable String softwareReleaseLimitation) {
    this.softwareReleaseLimitation = softwareReleaseLimitation;
    return this;
  }

  /**
   * Get softwareReleaseLimitation
   * @return softwareReleaseLimitation
   */
  @javax.annotation.Nullable
  public String getSoftwareReleaseLimitation() {
    return softwareReleaseLimitation;
  }

  public void setSoftwareReleaseLimitation(@javax.annotation.Nullable String softwareReleaseLimitation) {
    this.softwareReleaseLimitation = softwareReleaseLimitation;
  }


  public LicenseImportByDetailsPutDto licenseFeatures(@javax.annotation.Nullable List<String> licenseFeatures) {
    this.licenseFeatures = licenseFeatures;
    return this;
  }

  public LicenseImportByDetailsPutDto addLicenseFeaturesItem(String licenseFeaturesItem) {
    if (this.licenseFeatures == null) {
      this.licenseFeatures = new ArrayList<>();
    }
    this.licenseFeatures.add(licenseFeaturesItem);
    return this;
  }

  /**
   * Get licenseFeatures
   * @return licenseFeatures
   */
  @javax.annotation.Nullable
  public List<String> getLicenseFeatures() {
    return licenseFeatures;
  }

  public void setLicenseFeatures(@javax.annotation.Nullable List<String> licenseFeatures) {
    this.licenseFeatures = licenseFeatures;
  }


  public LicenseImportByDetailsPutDto licenseLimitations(@javax.annotation.Nullable List<LicenseImportLimitationDto> licenseLimitations) {
    this.licenseLimitations = licenseLimitations;
    return this;
  }

  public LicenseImportByDetailsPutDto addLicenseLimitationsItem(LicenseImportLimitationDto licenseLimitationsItem) {
    if (this.licenseLimitations == null) {
      this.licenseLimitations = new ArrayList<>();
    }
    this.licenseLimitations.add(licenseLimitationsItem);
    return this;
  }

  /**
   * Get licenseLimitations
   * @return licenseLimitations
   */
  @javax.annotation.Nullable
  public List<LicenseImportLimitationDto> getLicenseLimitations() {
    return licenseLimitations;
  }

  public void setLicenseLimitations(@javax.annotation.Nullable List<LicenseImportLimitationDto> licenseLimitations) {
    this.licenseLimitations = licenseLimitations;
  }


  public LicenseImportByDetailsPutDto licenseVariables(@javax.annotation.Nullable List<LicenseImportVariableDto> licenseVariables) {
    this.licenseVariables = licenseVariables;
    return this;
  }

  public LicenseImportByDetailsPutDto addLicenseVariablesItem(LicenseImportVariableDto licenseVariablesItem) {
    if (this.licenseVariables == null) {
      this.licenseVariables = new ArrayList<>();
    }
    this.licenseVariables.add(licenseVariablesItem);
    return this;
  }

  /**
   * Get licenseVariables
   * @return licenseVariables
   */
  @javax.annotation.Nullable
  public List<LicenseImportVariableDto> getLicenseVariables() {
    return licenseVariables;
  }

  public void setLicenseVariables(@javax.annotation.Nullable List<LicenseImportVariableDto> licenseVariables) {
    this.licenseVariables = licenseVariables;
  }


  public LicenseImportByDetailsPutDto licenseConstrainedVariables(@javax.annotation.Nullable List<LicenseImportConstrainedVariableDto> licenseConstrainedVariables) {
    this.licenseConstrainedVariables = licenseConstrainedVariables;
    return this;
  }

  public LicenseImportByDetailsPutDto addLicenseConstrainedVariablesItem(LicenseImportConstrainedVariableDto licenseConstrainedVariablesItem) {
    if (this.licenseConstrainedVariables == null) {
      this.licenseConstrainedVariables = new ArrayList<>();
    }
    this.licenseConstrainedVariables.add(licenseConstrainedVariablesItem);
    return this;
  }

  /**
   * Get licenseConstrainedVariables
   * @return licenseConstrainedVariables
   */
  @javax.annotation.Nullable
  public List<LicenseImportConstrainedVariableDto> getLicenseConstrainedVariables() {
    return licenseConstrainedVariables;
  }

  public void setLicenseConstrainedVariables(@javax.annotation.Nullable List<LicenseImportConstrainedVariableDto> licenseConstrainedVariables) {
    this.licenseConstrainedVariables = licenseConstrainedVariables;
  }


  public LicenseImportByDetailsPutDto tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public LicenseImportByDetailsPutDto addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public LicenseImportByDetailsPutDto isActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
  }


  public LicenseImportByDetailsPutDto resumeOnError(@javax.annotation.Nullable Boolean resumeOnError) {
    this.resumeOnError = resumeOnError;
    return this;
  }

  /**
   * Get resumeOnError
   * @return resumeOnError
   */
  @javax.annotation.Nullable
  public Boolean getResumeOnError() {
    return resumeOnError;
  }

  public void setResumeOnError(@javax.annotation.Nullable Boolean resumeOnError) {
    this.resumeOnError = resumeOnError;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseImportByDetailsPutDto licenseImportByDetailsPutDto = (LicenseImportByDetailsPutDto) o;
    return Objects.equals(this.licenseKey, licenseImportByDetailsPutDto.licenseKey) &&
        Objects.equals(this.productId, licenseImportByDetailsPutDto.productId) &&
        Objects.equals(this.customerNumber, licenseImportByDetailsPutDto.customerNumber) &&
        Objects.equals(this.template, licenseImportByDetailsPutDto.template) &&
        Objects.equals(this.legacyLicenseKey, licenseImportByDetailsPutDto.legacyLicenseKey) &&
        Objects.equals(this.name, licenseImportByDetailsPutDto.name) &&
        Objects.equals(this.description, licenseImportByDetailsPutDto.description) &&
        Objects.equals(this.tokenLimit, licenseImportByDetailsPutDto.tokenLimit) &&
        Objects.equals(this.goodwillTokenLimit, licenseImportByDetailsPutDto.goodwillTokenLimit) &&
        Objects.equals(this.floatingTokenLimit, licenseImportByDetailsPutDto.floatingTokenLimit) &&
        Objects.equals(this.userLimit, licenseImportByDetailsPutDto.userLimit) &&
        Objects.equals(this.startDate, licenseImportByDetailsPutDto.startDate) &&
        Objects.equals(this.expirationDate, licenseImportByDetailsPutDto.expirationDate) &&
        Objects.equals(this.licenseType, licenseImportByDetailsPutDto.licenseType) &&
        Objects.equals(this.softwareReleaseLimitation, licenseImportByDetailsPutDto.softwareReleaseLimitation) &&
        Objects.equals(this.licenseFeatures, licenseImportByDetailsPutDto.licenseFeatures) &&
        Objects.equals(this.licenseLimitations, licenseImportByDetailsPutDto.licenseLimitations) &&
        Objects.equals(this.licenseVariables, licenseImportByDetailsPutDto.licenseVariables) &&
        Objects.equals(this.licenseConstrainedVariables, licenseImportByDetailsPutDto.licenseConstrainedVariables) &&
        Objects.equals(this.tags, licenseImportByDetailsPutDto.tags) &&
        Objects.equals(this.isActive, licenseImportByDetailsPutDto.isActive) &&
        Objects.equals(this.resumeOnError, licenseImportByDetailsPutDto.resumeOnError);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseKey, productId, customerNumber, template, legacyLicenseKey, name, description, tokenLimit, goodwillTokenLimit, floatingTokenLimit, userLimit, startDate, expirationDate, licenseType, softwareReleaseLimitation, licenseFeatures, licenseLimitations, licenseVariables, licenseConstrainedVariables, tags, isActive, resumeOnError);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseImportByDetailsPutDto {\n");
    sb.append("    licenseKey: ").append(toIndentedString(licenseKey)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    customerNumber: ").append(toIndentedString(customerNumber)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    legacyLicenseKey: ").append(toIndentedString(legacyLicenseKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tokenLimit: ").append(toIndentedString(tokenLimit)).append("\n");
    sb.append("    goodwillTokenLimit: ").append(toIndentedString(goodwillTokenLimit)).append("\n");
    sb.append("    floatingTokenLimit: ").append(toIndentedString(floatingTokenLimit)).append("\n");
    sb.append("    userLimit: ").append(toIndentedString(userLimit)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    softwareReleaseLimitation: ").append(toIndentedString(softwareReleaseLimitation)).append("\n");
    sb.append("    licenseFeatures: ").append(toIndentedString(licenseFeatures)).append("\n");
    sb.append("    licenseLimitations: ").append(toIndentedString(licenseLimitations)).append("\n");
    sb.append("    licenseVariables: ").append(toIndentedString(licenseVariables)).append("\n");
    sb.append("    licenseConstrainedVariables: ").append(toIndentedString(licenseConstrainedVariables)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    resumeOnError: ").append(toIndentedString(resumeOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("license_key", "product_id", "customer_number", "template", "legacy_license_key", "name", "description", "token_limit", "goodwill_token_limit", "floating_token_limit", "user_limit", "start_date", "expiration_date", "license_type", "software_release_limitation", "license_features", "license_limitations", "license_variables", "license_constrained_variables", "tags", "is_active", "resume_on_error"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("license_key", "product_id", "customer_number", "template"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseImportByDetailsPutDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseImportByDetailsPutDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseImportByDetailsPutDto is not found in the empty JSON string", LicenseImportByDetailsPutDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseImportByDetailsPutDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseImportByDetailsPutDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseImportByDetailsPutDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("license_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_key").toString()));
      }
      if (!jsonObj.get("product_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
      }
      if (!jsonObj.get("customer_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_number").toString()));
      }
      if (!jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      if ((jsonObj.get("legacy_license_key") != null && !jsonObj.get("legacy_license_key").isJsonNull()) && !jsonObj.get("legacy_license_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacy_license_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacy_license_key").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if ((jsonObj.get("expiration_date") != null && !jsonObj.get("expiration_date").isJsonNull()) && !jsonObj.get("expiration_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration_date").toString()));
      }
      if ((jsonObj.get("license_type") != null && !jsonObj.get("license_type").isJsonNull()) && !jsonObj.get("license_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_type").toString()));
      }
      if ((jsonObj.get("software_release_limitation") != null && !jsonObj.get("software_release_limitation").isJsonNull()) && !jsonObj.get("software_release_limitation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `software_release_limitation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("software_release_limitation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("license_features") != null && !jsonObj.get("license_features").isJsonNull() && !jsonObj.get("license_features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_features` to be an array in the JSON string but got `%s`", jsonObj.get("license_features").toString()));
      }
      if (jsonObj.get("license_limitations") != null && !jsonObj.get("license_limitations").isJsonNull()) {
        JsonArray jsonArraylicenseLimitations = jsonObj.getAsJsonArray("license_limitations");
        if (jsonArraylicenseLimitations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("license_limitations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `license_limitations` to be an array in the JSON string but got `%s`", jsonObj.get("license_limitations").toString()));
          }

          // validate the optional field `license_limitations` (array)
          for (int i = 0; i < jsonArraylicenseLimitations.size(); i++) {
            LicenseImportLimitationDto.validateJsonElement(jsonArraylicenseLimitations.get(i));
          };
        }
      }
      if (jsonObj.get("license_variables") != null && !jsonObj.get("license_variables").isJsonNull()) {
        JsonArray jsonArraylicenseVariables = jsonObj.getAsJsonArray("license_variables");
        if (jsonArraylicenseVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("license_variables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `license_variables` to be an array in the JSON string but got `%s`", jsonObj.get("license_variables").toString()));
          }

          // validate the optional field `license_variables` (array)
          for (int i = 0; i < jsonArraylicenseVariables.size(); i++) {
            LicenseImportVariableDto.validateJsonElement(jsonArraylicenseVariables.get(i));
          };
        }
      }
      if (jsonObj.get("license_constrained_variables") != null && !jsonObj.get("license_constrained_variables").isJsonNull()) {
        JsonArray jsonArraylicenseConstrainedVariables = jsonObj.getAsJsonArray("license_constrained_variables");
        if (jsonArraylicenseConstrainedVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("license_constrained_variables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `license_constrained_variables` to be an array in the JSON string but got `%s`", jsonObj.get("license_constrained_variables").toString()));
          }

          // validate the optional field `license_constrained_variables` (array)
          for (int i = 0; i < jsonArraylicenseConstrainedVariables.size(); i++) {
            LicenseImportConstrainedVariableDto.validateJsonElement(jsonArraylicenseConstrainedVariables.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseImportByDetailsPutDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseImportByDetailsPutDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseImportByDetailsPutDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseImportByDetailsPutDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseImportByDetailsPutDto>() {
           @Override
           public void write(JsonWriter out, LicenseImportByDetailsPutDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseImportByDetailsPutDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseImportByDetailsPutDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseImportByDetailsPutDto
   * @throws IOException if the JSON string is invalid with respect to LicenseImportByDetailsPutDto
   */
  public static LicenseImportByDetailsPutDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseImportByDetailsPutDto.class);
  }

  /**
   * Convert an instance of LicenseImportByDetailsPutDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

