/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.AnalyticalFieldDto;
import com.slascone.model.LicenseUserDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * DeviceAnalyticalHeartbeatDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class DeviceAnalyticalHeartbeatDto {
  public static final String SERIALIZED_NAME_LICENSE_ASSIGNMENT_ID = "license_assignment_id";
  @SerializedName(SERIALIZED_NAME_LICENSE_ASSIGNMENT_ID)
  @javax.annotation.Nullable
  private UUID licenseAssignmentId;

  public static final String SERIALIZED_NAME_ANALYTICAL_FIELD_ID = "analytical_field_id";
  @SerializedName(SERIALIZED_NAME_ANALYTICAL_FIELD_ID)
  @javax.annotation.Nullable
  private UUID analyticalFieldId;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private String value;

  public static final String SERIALIZED_NAME_VALUE_ARRAY = "value_array";
  @SerializedName(SERIALIZED_NAME_VALUE_ARRAY)
  @javax.annotation.Nullable
  private List<String> valueArray;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nullable
  private UUID transactionId;

  public static final String SERIALIZED_NAME_SOFTWARE_VERSION = "software_version";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_VERSION)
  @javax.annotation.Nullable
  private String softwareVersion;

  public static final String SERIALIZED_NAME_CREATED_DATE_UTC = "created_date_utc";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime createdDateUtc;

  public static final String SERIALIZED_NAME_MODIFIED_DATE_UTC = "modified_date_utc";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDateUtc;

  public static final String SERIALIZED_NAME_IS_LAST = "is_last";
  @SerializedName(SERIALIZED_NAME_IS_LAST)
  @javax.annotation.Nullable
  private Boolean isLast;

  public static final String SERIALIZED_NAME_ANALYTICAL_FIELD = "analytical_field";
  @SerializedName(SERIALIZED_NAME_ANALYTICAL_FIELD)
  @javax.annotation.Nullable
  private AnalyticalFieldDto analyticalField;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public static final String SERIALIZED_NAME_LICENSE_USER = "license_user";
  @SerializedName(SERIALIZED_NAME_LICENSE_USER)
  @javax.annotation.Nullable
  private LicenseUserDto licenseUser;

  public DeviceAnalyticalHeartbeatDto() {
  }

  public DeviceAnalyticalHeartbeatDto licenseAssignmentId(@javax.annotation.Nullable UUID licenseAssignmentId) {
    this.licenseAssignmentId = licenseAssignmentId;
    return this;
  }

  /**
   * Get licenseAssignmentId
   * @return licenseAssignmentId
   */
  @javax.annotation.Nullable
  public UUID getLicenseAssignmentId() {
    return licenseAssignmentId;
  }

  public void setLicenseAssignmentId(@javax.annotation.Nullable UUID licenseAssignmentId) {
    this.licenseAssignmentId = licenseAssignmentId;
  }


  public DeviceAnalyticalHeartbeatDto analyticalFieldId(@javax.annotation.Nullable UUID analyticalFieldId) {
    this.analyticalFieldId = analyticalFieldId;
    return this;
  }

  /**
   * Get analyticalFieldId
   * @return analyticalFieldId
   */
  @javax.annotation.Nullable
  public UUID getAnalyticalFieldId() {
    return analyticalFieldId;
  }

  public void setAnalyticalFieldId(@javax.annotation.Nullable UUID analyticalFieldId) {
    this.analyticalFieldId = analyticalFieldId;
  }


  public DeviceAnalyticalHeartbeatDto value(@javax.annotation.Nullable String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable String value) {
    this.value = value;
  }


  public DeviceAnalyticalHeartbeatDto valueArray(@javax.annotation.Nullable List<String> valueArray) {
    this.valueArray = valueArray;
    return this;
  }

  public DeviceAnalyticalHeartbeatDto addValueArrayItem(String valueArrayItem) {
    if (this.valueArray == null) {
      this.valueArray = new ArrayList<>();
    }
    this.valueArray.add(valueArrayItem);
    return this;
  }

  /**
   * Get valueArray
   * @return valueArray
   */
  @javax.annotation.Nullable
  public List<String> getValueArray() {
    return valueArray;
  }

  public void setValueArray(@javax.annotation.Nullable List<String> valueArray) {
    this.valueArray = valueArray;
  }


  public DeviceAnalyticalHeartbeatDto transactionId(@javax.annotation.Nullable UUID transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   * @return transactionId
   */
  @javax.annotation.Nullable
  public UUID getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nullable UUID transactionId) {
    this.transactionId = transactionId;
  }


  public DeviceAnalyticalHeartbeatDto softwareVersion(@javax.annotation.Nullable String softwareVersion) {
    this.softwareVersion = softwareVersion;
    return this;
  }

  /**
   * Get softwareVersion
   * @return softwareVersion
   */
  @javax.annotation.Nullable
  public String getSoftwareVersion() {
    return softwareVersion;
  }

  public void setSoftwareVersion(@javax.annotation.Nullable String softwareVersion) {
    this.softwareVersion = softwareVersion;
  }


  public DeviceAnalyticalHeartbeatDto createdDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
    return this;
  }

  /**
   * Get createdDateUtc
   * @return createdDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateUtc() {
    return createdDateUtc;
  }

  public void setCreatedDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
  }


  public DeviceAnalyticalHeartbeatDto modifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
    return this;
  }

  /**
   * Get modifiedDateUtc
   * @return modifiedDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDateUtc() {
    return modifiedDateUtc;
  }

  public void setModifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
  }


  public DeviceAnalyticalHeartbeatDto isLast(@javax.annotation.Nullable Boolean isLast) {
    this.isLast = isLast;
    return this;
  }

  /**
   * Get isLast
   * @return isLast
   */
  @javax.annotation.Nullable
  public Boolean getIsLast() {
    return isLast;
  }

  public void setIsLast(@javax.annotation.Nullable Boolean isLast) {
    this.isLast = isLast;
  }


  public DeviceAnalyticalHeartbeatDto analyticalField(@javax.annotation.Nullable AnalyticalFieldDto analyticalField) {
    this.analyticalField = analyticalField;
    return this;
  }

  /**
   * Get analyticalField
   * @return analyticalField
   */
  @javax.annotation.Nullable
  public AnalyticalFieldDto getAnalyticalField() {
    return analyticalField;
  }

  public void setAnalyticalField(@javax.annotation.Nullable AnalyticalFieldDto analyticalField) {
    this.analyticalField = analyticalField;
  }


  public DeviceAnalyticalHeartbeatDto userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }


  public DeviceAnalyticalHeartbeatDto licenseUser(@javax.annotation.Nullable LicenseUserDto licenseUser) {
    this.licenseUser = licenseUser;
    return this;
  }

  /**
   * Get licenseUser
   * @return licenseUser
   */
  @javax.annotation.Nullable
  public LicenseUserDto getLicenseUser() {
    return licenseUser;
  }

  public void setLicenseUser(@javax.annotation.Nullable LicenseUserDto licenseUser) {
    this.licenseUser = licenseUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceAnalyticalHeartbeatDto deviceAnalyticalHeartbeatDto = (DeviceAnalyticalHeartbeatDto) o;
    return Objects.equals(this.licenseAssignmentId, deviceAnalyticalHeartbeatDto.licenseAssignmentId) &&
        Objects.equals(this.analyticalFieldId, deviceAnalyticalHeartbeatDto.analyticalFieldId) &&
        Objects.equals(this.value, deviceAnalyticalHeartbeatDto.value) &&
        Objects.equals(this.valueArray, deviceAnalyticalHeartbeatDto.valueArray) &&
        Objects.equals(this.transactionId, deviceAnalyticalHeartbeatDto.transactionId) &&
        Objects.equals(this.softwareVersion, deviceAnalyticalHeartbeatDto.softwareVersion) &&
        Objects.equals(this.createdDateUtc, deviceAnalyticalHeartbeatDto.createdDateUtc) &&
        Objects.equals(this.modifiedDateUtc, deviceAnalyticalHeartbeatDto.modifiedDateUtc) &&
        Objects.equals(this.isLast, deviceAnalyticalHeartbeatDto.isLast) &&
        Objects.equals(this.analyticalField, deviceAnalyticalHeartbeatDto.analyticalField) &&
        Objects.equals(this.userId, deviceAnalyticalHeartbeatDto.userId) &&
        Objects.equals(this.licenseUser, deviceAnalyticalHeartbeatDto.licenseUser);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseAssignmentId, analyticalFieldId, value, valueArray, transactionId, softwareVersion, createdDateUtc, modifiedDateUtc, isLast, analyticalField, userId, licenseUser);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceAnalyticalHeartbeatDto {\n");
    sb.append("    licenseAssignmentId: ").append(toIndentedString(licenseAssignmentId)).append("\n");
    sb.append("    analyticalFieldId: ").append(toIndentedString(analyticalFieldId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueArray: ").append(toIndentedString(valueArray)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    softwareVersion: ").append(toIndentedString(softwareVersion)).append("\n");
    sb.append("    createdDateUtc: ").append(toIndentedString(createdDateUtc)).append("\n");
    sb.append("    modifiedDateUtc: ").append(toIndentedString(modifiedDateUtc)).append("\n");
    sb.append("    isLast: ").append(toIndentedString(isLast)).append("\n");
    sb.append("    analyticalField: ").append(toIndentedString(analyticalField)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    licenseUser: ").append(toIndentedString(licenseUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("license_assignment_id", "analytical_field_id", "value", "value_array", "transaction_id", "software_version", "created_date_utc", "modified_date_utc", "is_last", "analytical_field", "user_id", "license_user"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceAnalyticalHeartbeatDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceAnalyticalHeartbeatDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceAnalyticalHeartbeatDto is not found in the empty JSON string", DeviceAnalyticalHeartbeatDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceAnalyticalHeartbeatDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceAnalyticalHeartbeatDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("license_assignment_id") != null && !jsonObj.get("license_assignment_id").isJsonNull()) && !jsonObj.get("license_assignment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_assignment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_assignment_id").toString()));
      }
      if ((jsonObj.get("analytical_field_id") != null && !jsonObj.get("analytical_field_id").isJsonNull()) && !jsonObj.get("analytical_field_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analytical_field_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analytical_field_id").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("value_array") != null && !jsonObj.get("value_array").isJsonNull() && !jsonObj.get("value_array").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `value_array` to be an array in the JSON string but got `%s`", jsonObj.get("value_array").toString()));
      }
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if ((jsonObj.get("software_version") != null && !jsonObj.get("software_version").isJsonNull()) && !jsonObj.get("software_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `software_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("software_version").toString()));
      }
      // validate the optional field `analytical_field`
      if (jsonObj.get("analytical_field") != null && !jsonObj.get("analytical_field").isJsonNull()) {
        AnalyticalFieldDto.validateJsonElement(jsonObj.get("analytical_field"));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      // validate the optional field `license_user`
      if (jsonObj.get("license_user") != null && !jsonObj.get("license_user").isJsonNull()) {
        LicenseUserDto.validateJsonElement(jsonObj.get("license_user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceAnalyticalHeartbeatDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceAnalyticalHeartbeatDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceAnalyticalHeartbeatDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceAnalyticalHeartbeatDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceAnalyticalHeartbeatDto>() {
           @Override
           public void write(JsonWriter out, DeviceAnalyticalHeartbeatDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceAnalyticalHeartbeatDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceAnalyticalHeartbeatDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceAnalyticalHeartbeatDto
   * @throws IOException if the JSON string is invalid with respect to DeviceAnalyticalHeartbeatDto
   */
  public static DeviceAnalyticalHeartbeatDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceAnalyticalHeartbeatDto.class);
  }

  /**
   * Convert an instance of DeviceAnalyticalHeartbeatDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

