/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * SessionStatusDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class SessionStatusDto {
  public static final String SERIALIZED_NAME_IS_SESSION_VALID = "is_session_valid";
  @SerializedName(SERIALIZED_NAME_IS_SESSION_VALID)
  @javax.annotation.Nullable
  private Boolean isSessionValid;

  public static final String SERIALIZED_NAME_SESSION_VALID_UNTIL = "session_valid_until";
  @SerializedName(SERIALIZED_NAME_SESSION_VALID_UNTIL)
  @javax.annotation.Nullable
  private OffsetDateTime sessionValidUntil;

  public static final String SERIALIZED_NAME_SESSION_CREATED_DATE = "session_created_date";
  @SerializedName(SERIALIZED_NAME_SESSION_CREATED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime sessionCreatedDate;

  public static final String SERIALIZED_NAME_SESSION_MODIFIED_DATE = "session_modified_date";
  @SerializedName(SERIALIZED_NAME_SESSION_MODIFIED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime sessionModifiedDate;

  public static final String SERIALIZED_NAME_MAX_OPEN_SESSION_COUNT = "max_open_session_count";
  @SerializedName(SERIALIZED_NAME_MAX_OPEN_SESSION_COUNT)
  @javax.annotation.Nullable
  private Integer maxOpenSessionCount;

  public static final String SERIALIZED_NAME_MAX_ACTIVE_CLIENT_COUNT = "max_active_client_count";
  @SerializedName(SERIALIZED_NAME_MAX_ACTIVE_CLIENT_COUNT)
  @javax.annotation.Nullable
  private Integer maxActiveClientCount;

  public SessionStatusDto() {
  }

  public SessionStatusDto isSessionValid(@javax.annotation.Nullable Boolean isSessionValid) {
    this.isSessionValid = isSessionValid;
    return this;
  }

  /**
   * Get isSessionValid
   * @return isSessionValid
   */
  @javax.annotation.Nullable
  public Boolean getIsSessionValid() {
    return isSessionValid;
  }

  public void setIsSessionValid(@javax.annotation.Nullable Boolean isSessionValid) {
    this.isSessionValid = isSessionValid;
  }


  public SessionStatusDto sessionValidUntil(@javax.annotation.Nullable OffsetDateTime sessionValidUntil) {
    this.sessionValidUntil = sessionValidUntil;
    return this;
  }

  /**
   * Get sessionValidUntil
   * @return sessionValidUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSessionValidUntil() {
    return sessionValidUntil;
  }

  public void setSessionValidUntil(@javax.annotation.Nullable OffsetDateTime sessionValidUntil) {
    this.sessionValidUntil = sessionValidUntil;
  }


  public SessionStatusDto sessionCreatedDate(@javax.annotation.Nullable OffsetDateTime sessionCreatedDate) {
    this.sessionCreatedDate = sessionCreatedDate;
    return this;
  }

  /**
   * Get sessionCreatedDate
   * @return sessionCreatedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSessionCreatedDate() {
    return sessionCreatedDate;
  }

  public void setSessionCreatedDate(@javax.annotation.Nullable OffsetDateTime sessionCreatedDate) {
    this.sessionCreatedDate = sessionCreatedDate;
  }


  public SessionStatusDto sessionModifiedDate(@javax.annotation.Nullable OffsetDateTime sessionModifiedDate) {
    this.sessionModifiedDate = sessionModifiedDate;
    return this;
  }

  /**
   * Get sessionModifiedDate
   * @return sessionModifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSessionModifiedDate() {
    return sessionModifiedDate;
  }

  public void setSessionModifiedDate(@javax.annotation.Nullable OffsetDateTime sessionModifiedDate) {
    this.sessionModifiedDate = sessionModifiedDate;
  }


  public SessionStatusDto maxOpenSessionCount(@javax.annotation.Nullable Integer maxOpenSessionCount) {
    this.maxOpenSessionCount = maxOpenSessionCount;
    return this;
  }

  /**
   * Get maxOpenSessionCount
   * @return maxOpenSessionCount
   */
  @javax.annotation.Nullable
  public Integer getMaxOpenSessionCount() {
    return maxOpenSessionCount;
  }

  public void setMaxOpenSessionCount(@javax.annotation.Nullable Integer maxOpenSessionCount) {
    this.maxOpenSessionCount = maxOpenSessionCount;
  }


  public SessionStatusDto maxActiveClientCount(@javax.annotation.Nullable Integer maxActiveClientCount) {
    this.maxActiveClientCount = maxActiveClientCount;
    return this;
  }

  /**
   * Get maxActiveClientCount
   * @return maxActiveClientCount
   */
  @javax.annotation.Nullable
  public Integer getMaxActiveClientCount() {
    return maxActiveClientCount;
  }

  public void setMaxActiveClientCount(@javax.annotation.Nullable Integer maxActiveClientCount) {
    this.maxActiveClientCount = maxActiveClientCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionStatusDto sessionStatusDto = (SessionStatusDto) o;
    return Objects.equals(this.isSessionValid, sessionStatusDto.isSessionValid) &&
        Objects.equals(this.sessionValidUntil, sessionStatusDto.sessionValidUntil) &&
        Objects.equals(this.sessionCreatedDate, sessionStatusDto.sessionCreatedDate) &&
        Objects.equals(this.sessionModifiedDate, sessionStatusDto.sessionModifiedDate) &&
        Objects.equals(this.maxOpenSessionCount, sessionStatusDto.maxOpenSessionCount) &&
        Objects.equals(this.maxActiveClientCount, sessionStatusDto.maxActiveClientCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isSessionValid, sessionValidUntil, sessionCreatedDate, sessionModifiedDate, maxOpenSessionCount, maxActiveClientCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionStatusDto {\n");
    sb.append("    isSessionValid: ").append(toIndentedString(isSessionValid)).append("\n");
    sb.append("    sessionValidUntil: ").append(toIndentedString(sessionValidUntil)).append("\n");
    sb.append("    sessionCreatedDate: ").append(toIndentedString(sessionCreatedDate)).append("\n");
    sb.append("    sessionModifiedDate: ").append(toIndentedString(sessionModifiedDate)).append("\n");
    sb.append("    maxOpenSessionCount: ").append(toIndentedString(maxOpenSessionCount)).append("\n");
    sb.append("    maxActiveClientCount: ").append(toIndentedString(maxActiveClientCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("is_session_valid", "session_valid_until", "session_created_date", "session_modified_date", "max_open_session_count", "max_active_client_count"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionStatusDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionStatusDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionStatusDto is not found in the empty JSON string", SessionStatusDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionStatusDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionStatusDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionStatusDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionStatusDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionStatusDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionStatusDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionStatusDto>() {
           @Override
           public void write(JsonWriter out, SessionStatusDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionStatusDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionStatusDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionStatusDto
   * @throws IOException if the JSON string is invalid with respect to SessionStatusDto
   */
  public static SessionStatusDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionStatusDto.class);
  }

  /**
   * Convert an instance of SessionStatusDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

