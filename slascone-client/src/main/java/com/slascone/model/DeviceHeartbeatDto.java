/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.HeartbeatTypeDto;
import com.slascone.model.LicenseUserDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * DeviceHeartbeatDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class DeviceHeartbeatDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_SOFTWARE_VERSION = "software_version";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_VERSION)
  @javax.annotation.Nullable
  private String softwareVersion;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operating_system";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  @javax.annotation.Nullable
  private String operatingSystem;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  @javax.annotation.Nullable
  private String ipAddress;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  @javax.annotation.Nullable
  private String city;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  @javax.annotation.Nullable
  private String zip;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  @javax.annotation.Nullable
  private String latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  @javax.annotation.Nullable
  private String longitude;

  public static final String SERIALIZED_NAME_CREATED_DATE_UTC = "created_date_utc";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime createdDateUtc;

  public static final String SERIALIZED_NAME_DEVICE_LICENSE_ASSIGNMENT_ID = "device_license_assignment_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_LICENSE_ASSIGNMENT_ID)
  @javax.annotation.Nullable
  private UUID deviceLicenseAssignmentId;

  public static final String SERIALIZED_NAME_DEVICE_LICENSE_ID = "device_license_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_LICENSE_ID)
  @javax.annotation.Nullable
  private UUID deviceLicenseId;

  public static final String SERIALIZED_NAME_CUSTOMER_NAME = "customer_name";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NAME)
  @javax.annotation.Nullable
  private String customerName;

  public static final String SERIALIZED_NAME_HEARTBEAT_TYPE_ID = "heartbeat_type_id";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT_TYPE_ID)
  @javax.annotation.Nullable
  private UUID heartbeatTypeId;

  public static final String SERIALIZED_NAME_HEARTBEAT_TYPE = "heartbeat_type";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT_TYPE)
  @javax.annotation.Nullable
  private HeartbeatTypeDto heartbeatType;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public static final String SERIALIZED_NAME_LICENSE_USER = "license_user";
  @SerializedName(SERIALIZED_NAME_LICENSE_USER)
  @javax.annotation.Nullable
  private LicenseUserDto licenseUser;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  @javax.annotation.Nullable
  private String groupId;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private Integer value;

  public DeviceHeartbeatDto() {
  }

  public DeviceHeartbeatDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public DeviceHeartbeatDto softwareVersion(@javax.annotation.Nullable String softwareVersion) {
    this.softwareVersion = softwareVersion;
    return this;
  }

  /**
   * Get softwareVersion
   * @return softwareVersion
   */
  @javax.annotation.Nullable
  public String getSoftwareVersion() {
    return softwareVersion;
  }

  public void setSoftwareVersion(@javax.annotation.Nullable String softwareVersion) {
    this.softwareVersion = softwareVersion;
  }


  public DeviceHeartbeatDto operatingSystem(@javax.annotation.Nullable String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Get operatingSystem
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public String getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(@javax.annotation.Nullable String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public DeviceHeartbeatDto ipAddress(@javax.annotation.Nullable String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(@javax.annotation.Nullable String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public DeviceHeartbeatDto clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public DeviceHeartbeatDto country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public DeviceHeartbeatDto city(@javax.annotation.Nullable String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(@javax.annotation.Nullable String city) {
    this.city = city;
  }


  public DeviceHeartbeatDto zip(@javax.annotation.Nullable String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Get zip
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(@javax.annotation.Nullable String zip) {
    this.zip = zip;
  }


  public DeviceHeartbeatDto latitude(@javax.annotation.Nullable String latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public String getLatitude() {
    return latitude;
  }

  public void setLatitude(@javax.annotation.Nullable String latitude) {
    this.latitude = latitude;
  }


  public DeviceHeartbeatDto longitude(@javax.annotation.Nullable String longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public String getLongitude() {
    return longitude;
  }

  public void setLongitude(@javax.annotation.Nullable String longitude) {
    this.longitude = longitude;
  }


  public DeviceHeartbeatDto createdDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
    return this;
  }

  /**
   * Get createdDateUtc
   * @return createdDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateUtc() {
    return createdDateUtc;
  }

  public void setCreatedDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
  }


  public DeviceHeartbeatDto deviceLicenseAssignmentId(@javax.annotation.Nullable UUID deviceLicenseAssignmentId) {
    this.deviceLicenseAssignmentId = deviceLicenseAssignmentId;
    return this;
  }

  /**
   * Get deviceLicenseAssignmentId
   * @return deviceLicenseAssignmentId
   */
  @javax.annotation.Nullable
  public UUID getDeviceLicenseAssignmentId() {
    return deviceLicenseAssignmentId;
  }

  public void setDeviceLicenseAssignmentId(@javax.annotation.Nullable UUID deviceLicenseAssignmentId) {
    this.deviceLicenseAssignmentId = deviceLicenseAssignmentId;
  }


  public DeviceHeartbeatDto deviceLicenseId(@javax.annotation.Nullable UUID deviceLicenseId) {
    this.deviceLicenseId = deviceLicenseId;
    return this;
  }

  /**
   * Get deviceLicenseId
   * @return deviceLicenseId
   */
  @javax.annotation.Nullable
  public UUID getDeviceLicenseId() {
    return deviceLicenseId;
  }

  public void setDeviceLicenseId(@javax.annotation.Nullable UUID deviceLicenseId) {
    this.deviceLicenseId = deviceLicenseId;
  }


  public DeviceHeartbeatDto customerName(@javax.annotation.Nullable String customerName) {
    this.customerName = customerName;
    return this;
  }

  /**
   * Get customerName
   * @return customerName
   */
  @javax.annotation.Nullable
  public String getCustomerName() {
    return customerName;
  }

  public void setCustomerName(@javax.annotation.Nullable String customerName) {
    this.customerName = customerName;
  }


  public DeviceHeartbeatDto heartbeatTypeId(@javax.annotation.Nullable UUID heartbeatTypeId) {
    this.heartbeatTypeId = heartbeatTypeId;
    return this;
  }

  /**
   * Get heartbeatTypeId
   * @return heartbeatTypeId
   */
  @javax.annotation.Nullable
  public UUID getHeartbeatTypeId() {
    return heartbeatTypeId;
  }

  public void setHeartbeatTypeId(@javax.annotation.Nullable UUID heartbeatTypeId) {
    this.heartbeatTypeId = heartbeatTypeId;
  }


  public DeviceHeartbeatDto heartbeatType(@javax.annotation.Nullable HeartbeatTypeDto heartbeatType) {
    this.heartbeatType = heartbeatType;
    return this;
  }

  /**
   * Get heartbeatType
   * @return heartbeatType
   */
  @javax.annotation.Nullable
  public HeartbeatTypeDto getHeartbeatType() {
    return heartbeatType;
  }

  public void setHeartbeatType(@javax.annotation.Nullable HeartbeatTypeDto heartbeatType) {
    this.heartbeatType = heartbeatType;
  }


  public DeviceHeartbeatDto userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }


  public DeviceHeartbeatDto licenseUser(@javax.annotation.Nullable LicenseUserDto licenseUser) {
    this.licenseUser = licenseUser;
    return this;
  }

  /**
   * Get licenseUser
   * @return licenseUser
   */
  @javax.annotation.Nullable
  public LicenseUserDto getLicenseUser() {
    return licenseUser;
  }

  public void setLicenseUser(@javax.annotation.Nullable LicenseUserDto licenseUser) {
    this.licenseUser = licenseUser;
  }


  public DeviceHeartbeatDto groupId(@javax.annotation.Nullable String groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Get groupId
   * @return groupId
   */
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(@javax.annotation.Nullable String groupId) {
    this.groupId = groupId;
  }


  public DeviceHeartbeatDto value(@javax.annotation.Nullable Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Integer getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceHeartbeatDto deviceHeartbeatDto = (DeviceHeartbeatDto) o;
    return Objects.equals(this.id, deviceHeartbeatDto.id) &&
        Objects.equals(this.softwareVersion, deviceHeartbeatDto.softwareVersion) &&
        Objects.equals(this.operatingSystem, deviceHeartbeatDto.operatingSystem) &&
        Objects.equals(this.ipAddress, deviceHeartbeatDto.ipAddress) &&
        Objects.equals(this.clientId, deviceHeartbeatDto.clientId) &&
        Objects.equals(this.country, deviceHeartbeatDto.country) &&
        Objects.equals(this.city, deviceHeartbeatDto.city) &&
        Objects.equals(this.zip, deviceHeartbeatDto.zip) &&
        Objects.equals(this.latitude, deviceHeartbeatDto.latitude) &&
        Objects.equals(this.longitude, deviceHeartbeatDto.longitude) &&
        Objects.equals(this.createdDateUtc, deviceHeartbeatDto.createdDateUtc) &&
        Objects.equals(this.deviceLicenseAssignmentId, deviceHeartbeatDto.deviceLicenseAssignmentId) &&
        Objects.equals(this.deviceLicenseId, deviceHeartbeatDto.deviceLicenseId) &&
        Objects.equals(this.customerName, deviceHeartbeatDto.customerName) &&
        Objects.equals(this.heartbeatTypeId, deviceHeartbeatDto.heartbeatTypeId) &&
        Objects.equals(this.heartbeatType, deviceHeartbeatDto.heartbeatType) &&
        Objects.equals(this.userId, deviceHeartbeatDto.userId) &&
        Objects.equals(this.licenseUser, deviceHeartbeatDto.licenseUser) &&
        Objects.equals(this.groupId, deviceHeartbeatDto.groupId) &&
        Objects.equals(this.value, deviceHeartbeatDto.value);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, softwareVersion, operatingSystem, ipAddress, clientId, country, city, zip, latitude, longitude, createdDateUtc, deviceLicenseAssignmentId, deviceLicenseId, customerName, heartbeatTypeId, heartbeatType, userId, licenseUser, groupId, value);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceHeartbeatDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    softwareVersion: ").append(toIndentedString(softwareVersion)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    createdDateUtc: ").append(toIndentedString(createdDateUtc)).append("\n");
    sb.append("    deviceLicenseAssignmentId: ").append(toIndentedString(deviceLicenseAssignmentId)).append("\n");
    sb.append("    deviceLicenseId: ").append(toIndentedString(deviceLicenseId)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    heartbeatTypeId: ").append(toIndentedString(heartbeatTypeId)).append("\n");
    sb.append("    heartbeatType: ").append(toIndentedString(heartbeatType)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    licenseUser: ").append(toIndentedString(licenseUser)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "software_version", "operating_system", "ip_address", "client_id", "country", "city", "zip", "latitude", "longitude", "created_date_utc", "device_license_assignment_id", "device_license_id", "customer_name", "heartbeat_type_id", "heartbeat_type", "user_id", "license_user", "group_id", "value"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceHeartbeatDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceHeartbeatDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceHeartbeatDto is not found in the empty JSON string", DeviceHeartbeatDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceHeartbeatDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceHeartbeatDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("software_version") != null && !jsonObj.get("software_version").isJsonNull()) && !jsonObj.get("software_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `software_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("software_version").toString()));
      }
      if ((jsonObj.get("operating_system") != null && !jsonObj.get("operating_system").isJsonNull()) && !jsonObj.get("operating_system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operating_system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operating_system").toString()));
      }
      if ((jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonNull()) && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if ((jsonObj.get("device_license_assignment_id") != null && !jsonObj.get("device_license_assignment_id").isJsonNull()) && !jsonObj.get("device_license_assignment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_license_assignment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_license_assignment_id").toString()));
      }
      if ((jsonObj.get("device_license_id") != null && !jsonObj.get("device_license_id").isJsonNull()) && !jsonObj.get("device_license_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_license_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_license_id").toString()));
      }
      if ((jsonObj.get("customer_name") != null && !jsonObj.get("customer_name").isJsonNull()) && !jsonObj.get("customer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_name").toString()));
      }
      if ((jsonObj.get("heartbeat_type_id") != null && !jsonObj.get("heartbeat_type_id").isJsonNull()) && !jsonObj.get("heartbeat_type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heartbeat_type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heartbeat_type_id").toString()));
      }
      // validate the optional field `heartbeat_type`
      if (jsonObj.get("heartbeat_type") != null && !jsonObj.get("heartbeat_type").isJsonNull()) {
        HeartbeatTypeDto.validateJsonElement(jsonObj.get("heartbeat_type"));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      // validate the optional field `license_user`
      if (jsonObj.get("license_user") != null && !jsonObj.get("license_user").isJsonNull()) {
        LicenseUserDto.validateJsonElement(jsonObj.get("license_user"));
      }
      if ((jsonObj.get("group_id") != null && !jsonObj.get("group_id").isJsonNull()) && !jsonObj.get("group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceHeartbeatDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceHeartbeatDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceHeartbeatDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceHeartbeatDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceHeartbeatDto>() {
           @Override
           public void write(JsonWriter out, DeviceHeartbeatDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceHeartbeatDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceHeartbeatDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceHeartbeatDto
   * @throws IOException if the JSON string is invalid with respect to DeviceHeartbeatDto
   */
  public static DeviceHeartbeatDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceHeartbeatDto.class);
  }

  /**
   * Convert an instance of DeviceHeartbeatDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

