/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * LicenseMailDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class LicenseMailDto {
  public static final String SERIALIZED_NAME_LICENSE_KEY = "licenseKey";
  @SerializedName(SERIALIZED_NAME_LICENSE_KEY)
  @javax.annotation.Nonnull
  private String licenseKey;

  public static final String SERIALIZED_NAME_EMAIL_TEMPLATE_ID = "emailTemplateId";
  @SerializedName(SERIALIZED_NAME_EMAIL_TEMPLATE_ID)
  @javax.annotation.Nonnull
  private UUID emailTemplateId;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  @javax.annotation.Nonnull
  private UUID productId;

  public static final String SERIALIZED_NAME_TO_EMAILS = "toEmails";
  @SerializedName(SERIALIZED_NAME_TO_EMAILS)
  @javax.annotation.Nonnull
  private List<String> toEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_CC_EMAILS = "ccEmails";
  @SerializedName(SERIALIZED_NAME_CC_EMAILS)
  @javax.annotation.Nullable
  private List<String> ccEmails;

  public LicenseMailDto() {
  }

  public LicenseMailDto licenseKey(@javax.annotation.Nonnull String licenseKey) {
    this.licenseKey = licenseKey;
    return this;
  }

  /**
   * Get licenseKey
   * @return licenseKey
   */
  @javax.annotation.Nonnull
  public String getLicenseKey() {
    return licenseKey;
  }

  public void setLicenseKey(@javax.annotation.Nonnull String licenseKey) {
    this.licenseKey = licenseKey;
  }


  public LicenseMailDto emailTemplateId(@javax.annotation.Nonnull UUID emailTemplateId) {
    this.emailTemplateId = emailTemplateId;
    return this;
  }

  /**
   * Get emailTemplateId
   * @return emailTemplateId
   */
  @javax.annotation.Nonnull
  public UUID getEmailTemplateId() {
    return emailTemplateId;
  }

  public void setEmailTemplateId(@javax.annotation.Nonnull UUID emailTemplateId) {
    this.emailTemplateId = emailTemplateId;
  }


  public LicenseMailDto language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public LicenseMailDto productId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nonnull
  public UUID getProductId() {
    return productId;
  }

  public void setProductId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
  }


  public LicenseMailDto toEmails(@javax.annotation.Nonnull List<String> toEmails) {
    this.toEmails = toEmails;
    return this;
  }

  public LicenseMailDto addToEmailsItem(String toEmailsItem) {
    if (this.toEmails == null) {
      this.toEmails = new ArrayList<>();
    }
    this.toEmails.add(toEmailsItem);
    return this;
  }

  /**
   * Get toEmails
   * @return toEmails
   */
  @javax.annotation.Nonnull
  public List<String> getToEmails() {
    return toEmails;
  }

  public void setToEmails(@javax.annotation.Nonnull List<String> toEmails) {
    this.toEmails = toEmails;
  }


  public LicenseMailDto ccEmails(@javax.annotation.Nullable List<String> ccEmails) {
    this.ccEmails = ccEmails;
    return this;
  }

  public LicenseMailDto addCcEmailsItem(String ccEmailsItem) {
    if (this.ccEmails == null) {
      this.ccEmails = new ArrayList<>();
    }
    this.ccEmails.add(ccEmailsItem);
    return this;
  }

  /**
   * Get ccEmails
   * @return ccEmails
   */
  @javax.annotation.Nullable
  public List<String> getCcEmails() {
    return ccEmails;
  }

  public void setCcEmails(@javax.annotation.Nullable List<String> ccEmails) {
    this.ccEmails = ccEmails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseMailDto licenseMailDto = (LicenseMailDto) o;
    return Objects.equals(this.licenseKey, licenseMailDto.licenseKey) &&
        Objects.equals(this.emailTemplateId, licenseMailDto.emailTemplateId) &&
        Objects.equals(this.language, licenseMailDto.language) &&
        Objects.equals(this.productId, licenseMailDto.productId) &&
        Objects.equals(this.toEmails, licenseMailDto.toEmails) &&
        Objects.equals(this.ccEmails, licenseMailDto.ccEmails);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseKey, emailTemplateId, language, productId, toEmails, ccEmails);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseMailDto {\n");
    sb.append("    licenseKey: ").append(toIndentedString(licenseKey)).append("\n");
    sb.append("    emailTemplateId: ").append(toIndentedString(emailTemplateId)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    toEmails: ").append(toIndentedString(toEmails)).append("\n");
    sb.append("    ccEmails: ").append(toIndentedString(ccEmails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("licenseKey", "emailTemplateId", "language", "productId", "toEmails", "ccEmails"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("licenseKey", "emailTemplateId", "productId", "toEmails"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseMailDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseMailDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseMailDto is not found in the empty JSON string", LicenseMailDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseMailDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseMailDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseMailDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("licenseKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseKey").toString()));
      }
      if (!jsonObj.get("emailTemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailTemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailTemplateId").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if (!jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("toEmails") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("toEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `toEmails` to be an array in the JSON string but got `%s`", jsonObj.get("toEmails").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ccEmails") != null && !jsonObj.get("ccEmails").isJsonNull() && !jsonObj.get("ccEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccEmails` to be an array in the JSON string but got `%s`", jsonObj.get("ccEmails").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseMailDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseMailDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseMailDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseMailDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseMailDto>() {
           @Override
           public void write(JsonWriter out, LicenseMailDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseMailDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseMailDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseMailDto
   * @throws IOException if the JSON string is invalid with respect to LicenseMailDto
   */
  public static LicenseMailDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseMailDto.class);
  }

  /**
   * Convert an instance of LicenseMailDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

