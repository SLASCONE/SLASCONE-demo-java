/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.AlertDto;
import com.slascone.model.CustomerContactDto;
import com.slascone.model.EmailTemplateDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * MailLogDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class MailLogDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_RECEIVERS = "receivers";
  @SerializedName(SERIALIZED_NAME_RECEIVERS)
  @javax.annotation.Nullable
  private String receivers;

  public static final String SERIALIZED_NAME_CCS = "ccs";
  @SerializedName(SERIALIZED_NAME_CCS)
  @javax.annotation.Nullable
  private String ccs;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nullable
  private String body;

  public static final String SERIALIZED_NAME_WAS_LICENSE_FILE_ATTACHED = "was_license_file_attached";
  @SerializedName(SERIALIZED_NAME_WAS_LICENSE_FILE_ATTACHED)
  @javax.annotation.Nullable
  private Boolean wasLicenseFileAttached;

  public static final String SERIALIZED_NAME_CUSTOMER_CONTACT_ID = "customer_contact_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CONTACT_ID)
  @javax.annotation.Nullable
  private UUID customerContactId;

  public static final String SERIALIZED_NAME_CUSTOMER_CONTACT = "customer_contact";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CONTACT)
  @javax.annotation.Nullable
  private CustomerContactDto customerContact;

  public static final String SERIALIZED_NAME_LICENSE_ID = "license_id";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  @javax.annotation.Nullable
  private UUID licenseId;

  public static final String SERIALIZED_NAME_EMAIL_TEMPLATE_ID = "email_template_id";
  @SerializedName(SERIALIZED_NAME_EMAIL_TEMPLATE_ID)
  @javax.annotation.Nullable
  private UUID emailTemplateId;

  public static final String SERIALIZED_NAME_EMAIL_TEMPLATE = "email_template";
  @SerializedName(SERIALIZED_NAME_EMAIL_TEMPLATE)
  @javax.annotation.Nullable
  private EmailTemplateDto emailTemplate;

  public static final String SERIALIZED_NAME_ALERT_ID = "alert_id";
  @SerializedName(SERIALIZED_NAME_ALERT_ID)
  @javax.annotation.Nullable
  private UUID alertId;

  public static final String SERIALIZED_NAME_ALERT = "alert";
  @SerializedName(SERIALIZED_NAME_ALERT)
  @javax.annotation.Nullable
  private AlertDto alert;

  public static final String SERIALIZED_NAME_CREATED_DATE_UTC = "created_date_utc";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime createdDateUtc;

  public static final String SERIALIZED_NAME_MODIFIED_DATE_UTC = "modified_date_utc";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDateUtc;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "last_modified_by";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  @javax.annotation.Nullable
  private String lastModifiedBy;

  public MailLogDto() {
  }

  public MailLogDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public MailLogDto receivers(@javax.annotation.Nullable String receivers) {
    this.receivers = receivers;
    return this;
  }

  /**
   * Get receivers
   * @return receivers
   */
  @javax.annotation.Nullable
  public String getReceivers() {
    return receivers;
  }

  public void setReceivers(@javax.annotation.Nullable String receivers) {
    this.receivers = receivers;
  }


  public MailLogDto ccs(@javax.annotation.Nullable String ccs) {
    this.ccs = ccs;
    return this;
  }

  /**
   * Get ccs
   * @return ccs
   */
  @javax.annotation.Nullable
  public String getCcs() {
    return ccs;
  }

  public void setCcs(@javax.annotation.Nullable String ccs) {
    this.ccs = ccs;
  }


  public MailLogDto subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public MailLogDto body(@javax.annotation.Nullable String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nullable String body) {
    this.body = body;
  }


  public MailLogDto wasLicenseFileAttached(@javax.annotation.Nullable Boolean wasLicenseFileAttached) {
    this.wasLicenseFileAttached = wasLicenseFileAttached;
    return this;
  }

  /**
   * Get wasLicenseFileAttached
   * @return wasLicenseFileAttached
   */
  @javax.annotation.Nullable
  public Boolean getWasLicenseFileAttached() {
    return wasLicenseFileAttached;
  }

  public void setWasLicenseFileAttached(@javax.annotation.Nullable Boolean wasLicenseFileAttached) {
    this.wasLicenseFileAttached = wasLicenseFileAttached;
  }


  public MailLogDto customerContactId(@javax.annotation.Nullable UUID customerContactId) {
    this.customerContactId = customerContactId;
    return this;
  }

  /**
   * Get customerContactId
   * @return customerContactId
   */
  @javax.annotation.Nullable
  public UUID getCustomerContactId() {
    return customerContactId;
  }

  public void setCustomerContactId(@javax.annotation.Nullable UUID customerContactId) {
    this.customerContactId = customerContactId;
  }


  public MailLogDto customerContact(@javax.annotation.Nullable CustomerContactDto customerContact) {
    this.customerContact = customerContact;
    return this;
  }

  /**
   * Get customerContact
   * @return customerContact
   */
  @javax.annotation.Nullable
  public CustomerContactDto getCustomerContact() {
    return customerContact;
  }

  public void setCustomerContact(@javax.annotation.Nullable CustomerContactDto customerContact) {
    this.customerContact = customerContact;
  }


  public MailLogDto licenseId(@javax.annotation.Nullable UUID licenseId) {
    this.licenseId = licenseId;
    return this;
  }

  /**
   * Get licenseId
   * @return licenseId
   */
  @javax.annotation.Nullable
  public UUID getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(@javax.annotation.Nullable UUID licenseId) {
    this.licenseId = licenseId;
  }


  public MailLogDto emailTemplateId(@javax.annotation.Nullable UUID emailTemplateId) {
    this.emailTemplateId = emailTemplateId;
    return this;
  }

  /**
   * Get emailTemplateId
   * @return emailTemplateId
   */
  @javax.annotation.Nullable
  public UUID getEmailTemplateId() {
    return emailTemplateId;
  }

  public void setEmailTemplateId(@javax.annotation.Nullable UUID emailTemplateId) {
    this.emailTemplateId = emailTemplateId;
  }


  public MailLogDto emailTemplate(@javax.annotation.Nullable EmailTemplateDto emailTemplate) {
    this.emailTemplate = emailTemplate;
    return this;
  }

  /**
   * Get emailTemplate
   * @return emailTemplate
   */
  @javax.annotation.Nullable
  public EmailTemplateDto getEmailTemplate() {
    return emailTemplate;
  }

  public void setEmailTemplate(@javax.annotation.Nullable EmailTemplateDto emailTemplate) {
    this.emailTemplate = emailTemplate;
  }


  public MailLogDto alertId(@javax.annotation.Nullable UUID alertId) {
    this.alertId = alertId;
    return this;
  }

  /**
   * Get alertId
   * @return alertId
   */
  @javax.annotation.Nullable
  public UUID getAlertId() {
    return alertId;
  }

  public void setAlertId(@javax.annotation.Nullable UUID alertId) {
    this.alertId = alertId;
  }


  public MailLogDto alert(@javax.annotation.Nullable AlertDto alert) {
    this.alert = alert;
    return this;
  }

  /**
   * Get alert
   * @return alert
   */
  @javax.annotation.Nullable
  public AlertDto getAlert() {
    return alert;
  }

  public void setAlert(@javax.annotation.Nullable AlertDto alert) {
    this.alert = alert;
  }


  public MailLogDto createdDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
    return this;
  }

  /**
   * Get createdDateUtc
   * @return createdDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateUtc() {
    return createdDateUtc;
  }

  public void setCreatedDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
  }


  public MailLogDto modifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
    return this;
  }

  /**
   * Get modifiedDateUtc
   * @return modifiedDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDateUtc() {
    return modifiedDateUtc;
  }

  public void setModifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
  }


  public MailLogDto lastModifiedBy(@javax.annotation.Nullable String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Get lastModifiedBy
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(@javax.annotation.Nullable String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailLogDto mailLogDto = (MailLogDto) o;
    return Objects.equals(this.id, mailLogDto.id) &&
        Objects.equals(this.receivers, mailLogDto.receivers) &&
        Objects.equals(this.ccs, mailLogDto.ccs) &&
        Objects.equals(this.subject, mailLogDto.subject) &&
        Objects.equals(this.body, mailLogDto.body) &&
        Objects.equals(this.wasLicenseFileAttached, mailLogDto.wasLicenseFileAttached) &&
        Objects.equals(this.customerContactId, mailLogDto.customerContactId) &&
        Objects.equals(this.customerContact, mailLogDto.customerContact) &&
        Objects.equals(this.licenseId, mailLogDto.licenseId) &&
        Objects.equals(this.emailTemplateId, mailLogDto.emailTemplateId) &&
        Objects.equals(this.emailTemplate, mailLogDto.emailTemplate) &&
        Objects.equals(this.alertId, mailLogDto.alertId) &&
        Objects.equals(this.alert, mailLogDto.alert) &&
        Objects.equals(this.createdDateUtc, mailLogDto.createdDateUtc) &&
        Objects.equals(this.modifiedDateUtc, mailLogDto.modifiedDateUtc) &&
        Objects.equals(this.lastModifiedBy, mailLogDto.lastModifiedBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, receivers, ccs, subject, body, wasLicenseFileAttached, customerContactId, customerContact, licenseId, emailTemplateId, emailTemplate, alertId, alert, createdDateUtc, modifiedDateUtc, lastModifiedBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailLogDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    receivers: ").append(toIndentedString(receivers)).append("\n");
    sb.append("    ccs: ").append(toIndentedString(ccs)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    wasLicenseFileAttached: ").append(toIndentedString(wasLicenseFileAttached)).append("\n");
    sb.append("    customerContactId: ").append(toIndentedString(customerContactId)).append("\n");
    sb.append("    customerContact: ").append(toIndentedString(customerContact)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    emailTemplateId: ").append(toIndentedString(emailTemplateId)).append("\n");
    sb.append("    emailTemplate: ").append(toIndentedString(emailTemplate)).append("\n");
    sb.append("    alertId: ").append(toIndentedString(alertId)).append("\n");
    sb.append("    alert: ").append(toIndentedString(alert)).append("\n");
    sb.append("    createdDateUtc: ").append(toIndentedString(createdDateUtc)).append("\n");
    sb.append("    modifiedDateUtc: ").append(toIndentedString(modifiedDateUtc)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "receivers", "ccs", "subject", "body", "was_license_file_attached", "customer_contact_id", "customer_contact", "license_id", "email_template_id", "email_template", "alert_id", "alert", "created_date_utc", "modified_date_utc", "last_modified_by"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MailLogDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MailLogDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MailLogDto is not found in the empty JSON string", MailLogDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MailLogDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MailLogDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("receivers") != null && !jsonObj.get("receivers").isJsonNull()) && !jsonObj.get("receivers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivers").toString()));
      }
      if ((jsonObj.get("ccs") != null && !jsonObj.get("ccs").isJsonNull()) && !jsonObj.get("ccs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccs").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("customer_contact_id") != null && !jsonObj.get("customer_contact_id").isJsonNull()) && !jsonObj.get("customer_contact_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_contact_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_contact_id").toString()));
      }
      // validate the optional field `customer_contact`
      if (jsonObj.get("customer_contact") != null && !jsonObj.get("customer_contact").isJsonNull()) {
        CustomerContactDto.validateJsonElement(jsonObj.get("customer_contact"));
      }
      if ((jsonObj.get("license_id") != null && !jsonObj.get("license_id").isJsonNull()) && !jsonObj.get("license_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_id").toString()));
      }
      if ((jsonObj.get("email_template_id") != null && !jsonObj.get("email_template_id").isJsonNull()) && !jsonObj.get("email_template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_template_id").toString()));
      }
      // validate the optional field `email_template`
      if (jsonObj.get("email_template") != null && !jsonObj.get("email_template").isJsonNull()) {
        EmailTemplateDto.validateJsonElement(jsonObj.get("email_template"));
      }
      if ((jsonObj.get("alert_id") != null && !jsonObj.get("alert_id").isJsonNull()) && !jsonObj.get("alert_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alert_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alert_id").toString()));
      }
      // validate the optional field `alert`
      if (jsonObj.get("alert") != null && !jsonObj.get("alert").isJsonNull()) {
        AlertDto.validateJsonElement(jsonObj.get("alert"));
      }
      if ((jsonObj.get("last_modified_by") != null && !jsonObj.get("last_modified_by").isJsonNull()) && !jsonObj.get("last_modified_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified_by").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MailLogDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MailLogDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MailLogDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MailLogDto.class));

       return (TypeAdapter<T>) new TypeAdapter<MailLogDto>() {
           @Override
           public void write(JsonWriter out, MailLogDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MailLogDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MailLogDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MailLogDto
   * @throws IOException if the JSON string is invalid with respect to MailLogDto
   */
  public static MailLogDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MailLogDto.class);
  }

  /**
   * Convert an instance of MailLogDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

