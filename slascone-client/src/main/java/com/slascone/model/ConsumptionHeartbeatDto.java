/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.LicenseUserDto;
import com.slascone.model.LimitationDto;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * ConsumptionHeartbeatDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class ConsumptionHeartbeatDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private BigDecimal value;

  public static final String SERIALIZED_NAME_REMAINING = "remaining";
  @SerializedName(SERIALIZED_NAME_REMAINING)
  @javax.annotation.Nullable
  private BigDecimal remaining;

  public static final String SERIALIZED_NAME_ASSIGNMENT_ID = "assignment_id";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_ID)
  @javax.annotation.Nullable
  private UUID assignmentId;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_LICENSE_ID = "license_id";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  @javax.annotation.Nullable
  private UUID licenseId;

  public static final String SERIALIZED_NAME_LIMITATION_ID = "limitation_id";
  @SerializedName(SERIALIZED_NAME_LIMITATION_ID)
  @javax.annotation.Nullable
  private UUID limitationId;

  public static final String SERIALIZED_NAME_LIMITATION = "limitation";
  @SerializedName(SERIALIZED_NAME_LIMITATION)
  @javax.annotation.Nullable
  private LimitationDto limitation;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public static final String SERIALIZED_NAME_LICENSE_USER = "license_user";
  @SerializedName(SERIALIZED_NAME_LICENSE_USER)
  @javax.annotation.Nullable
  private LicenseUserDto licenseUser;

  public static final String SERIALIZED_NAME_CREATED_DATE_UTC = "created_date_utc";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime createdDateUtc;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public ConsumptionHeartbeatDto() {
  }

  public ConsumptionHeartbeatDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public ConsumptionHeartbeatDto value(@javax.annotation.Nullable BigDecimal value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable BigDecimal value) {
    this.value = value;
  }


  public ConsumptionHeartbeatDto remaining(@javax.annotation.Nullable BigDecimal remaining) {
    this.remaining = remaining;
    return this;
  }

  /**
   * Get remaining
   * @return remaining
   */
  @javax.annotation.Nullable
  public BigDecimal getRemaining() {
    return remaining;
  }

  public void setRemaining(@javax.annotation.Nullable BigDecimal remaining) {
    this.remaining = remaining;
  }


  public ConsumptionHeartbeatDto assignmentId(@javax.annotation.Nullable UUID assignmentId) {
    this.assignmentId = assignmentId;
    return this;
  }

  /**
   * Get assignmentId
   * @return assignmentId
   */
  @javax.annotation.Nullable
  public UUID getAssignmentId() {
    return assignmentId;
  }

  public void setAssignmentId(@javax.annotation.Nullable UUID assignmentId) {
    this.assignmentId = assignmentId;
  }


  public ConsumptionHeartbeatDto clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public ConsumptionHeartbeatDto licenseId(@javax.annotation.Nullable UUID licenseId) {
    this.licenseId = licenseId;
    return this;
  }

  /**
   * Get licenseId
   * @return licenseId
   */
  @javax.annotation.Nullable
  public UUID getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(@javax.annotation.Nullable UUID licenseId) {
    this.licenseId = licenseId;
  }


  public ConsumptionHeartbeatDto limitationId(@javax.annotation.Nullable UUID limitationId) {
    this.limitationId = limitationId;
    return this;
  }

  /**
   * Get limitationId
   * @return limitationId
   */
  @javax.annotation.Nullable
  public UUID getLimitationId() {
    return limitationId;
  }

  public void setLimitationId(@javax.annotation.Nullable UUID limitationId) {
    this.limitationId = limitationId;
  }


  public ConsumptionHeartbeatDto limitation(@javax.annotation.Nullable LimitationDto limitation) {
    this.limitation = limitation;
    return this;
  }

  /**
   * Get limitation
   * @return limitation
   */
  @javax.annotation.Nullable
  public LimitationDto getLimitation() {
    return limitation;
  }

  public void setLimitation(@javax.annotation.Nullable LimitationDto limitation) {
    this.limitation = limitation;
  }


  public ConsumptionHeartbeatDto userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }


  public ConsumptionHeartbeatDto licenseUser(@javax.annotation.Nullable LicenseUserDto licenseUser) {
    this.licenseUser = licenseUser;
    return this;
  }

  /**
   * Get licenseUser
   * @return licenseUser
   */
  @javax.annotation.Nullable
  public LicenseUserDto getLicenseUser() {
    return licenseUser;
  }

  public void setLicenseUser(@javax.annotation.Nullable LicenseUserDto licenseUser) {
    this.licenseUser = licenseUser;
  }


  public ConsumptionHeartbeatDto createdDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
    return this;
  }

  /**
   * Get createdDateUtc
   * @return createdDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateUtc() {
    return createdDateUtc;
  }

  public void setCreatedDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
  }


  public ConsumptionHeartbeatDto externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsumptionHeartbeatDto consumptionHeartbeatDto = (ConsumptionHeartbeatDto) o;
    return Objects.equals(this.id, consumptionHeartbeatDto.id) &&
        Objects.equals(this.value, consumptionHeartbeatDto.value) &&
        Objects.equals(this.remaining, consumptionHeartbeatDto.remaining) &&
        Objects.equals(this.assignmentId, consumptionHeartbeatDto.assignmentId) &&
        Objects.equals(this.clientId, consumptionHeartbeatDto.clientId) &&
        Objects.equals(this.licenseId, consumptionHeartbeatDto.licenseId) &&
        Objects.equals(this.limitationId, consumptionHeartbeatDto.limitationId) &&
        Objects.equals(this.limitation, consumptionHeartbeatDto.limitation) &&
        Objects.equals(this.userId, consumptionHeartbeatDto.userId) &&
        Objects.equals(this.licenseUser, consumptionHeartbeatDto.licenseUser) &&
        Objects.equals(this.createdDateUtc, consumptionHeartbeatDto.createdDateUtc) &&
        Objects.equals(this.externalId, consumptionHeartbeatDto.externalId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, value, remaining, assignmentId, clientId, licenseId, limitationId, limitation, userId, licenseUser, createdDateUtc, externalId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsumptionHeartbeatDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("    assignmentId: ").append(toIndentedString(assignmentId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    limitationId: ").append(toIndentedString(limitationId)).append("\n");
    sb.append("    limitation: ").append(toIndentedString(limitation)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    licenseUser: ").append(toIndentedString(licenseUser)).append("\n");
    sb.append("    createdDateUtc: ").append(toIndentedString(createdDateUtc)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "value", "remaining", "assignment_id", "client_id", "license_id", "limitation_id", "limitation", "user_id", "license_user", "created_date_utc", "external_id"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsumptionHeartbeatDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsumptionHeartbeatDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsumptionHeartbeatDto is not found in the empty JSON string", ConsumptionHeartbeatDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsumptionHeartbeatDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsumptionHeartbeatDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("assignment_id") != null && !jsonObj.get("assignment_id").isJsonNull()) && !jsonObj.get("assignment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignment_id").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("license_id") != null && !jsonObj.get("license_id").isJsonNull()) && !jsonObj.get("license_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_id").toString()));
      }
      if ((jsonObj.get("limitation_id") != null && !jsonObj.get("limitation_id").isJsonNull()) && !jsonObj.get("limitation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitation_id").toString()));
      }
      // validate the optional field `limitation`
      if (jsonObj.get("limitation") != null && !jsonObj.get("limitation").isJsonNull()) {
        LimitationDto.validateJsonElement(jsonObj.get("limitation"));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      // validate the optional field `license_user`
      if (jsonObj.get("license_user") != null && !jsonObj.get("license_user").isJsonNull()) {
        LicenseUserDto.validateJsonElement(jsonObj.get("license_user"));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsumptionHeartbeatDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsumptionHeartbeatDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsumptionHeartbeatDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsumptionHeartbeatDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsumptionHeartbeatDto>() {
           @Override
           public void write(JsonWriter out, ConsumptionHeartbeatDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsumptionHeartbeatDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsumptionHeartbeatDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsumptionHeartbeatDto
   * @throws IOException if the JSON string is invalid with respect to ConsumptionHeartbeatDto
   */
  public static ConsumptionHeartbeatDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsumptionHeartbeatDto.class);
  }

  /**
   * Convert an instance of ConsumptionHeartbeatDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

