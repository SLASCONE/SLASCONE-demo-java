/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.ExpirationMode;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * SubscriptionPlanDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class SubscriptionPlanDto {
  public static final String SERIALIZED_NAME_EXPIRATION_DATE_UTC = "expiration_date_utc";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime expirationDateUtc;

  public static final String SERIALIZED_NAME_EXPIRATION_MODE = "expiration_mode";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_MODE)
  @javax.annotation.Nullable
  private ExpirationMode expirationMode;

  public static final String SERIALIZED_NAME_VALID_DAYS_COUNT = "valid_days_count";
  @SerializedName(SERIALIZED_NAME_VALID_DAYS_COUNT)
  @javax.annotation.Nullable
  private Integer validDaysCount;

  public static final String SERIALIZED_NAME_TRIAL_DAYS_COUNT = "trial_days_count";
  @SerializedName(SERIALIZED_NAME_TRIAL_DAYS_COUNT)
  @javax.annotation.Nullable
  private Integer trialDaysCount;

  public SubscriptionPlanDto() {
  }

  public SubscriptionPlanDto expirationDateUtc(@javax.annotation.Nullable OffsetDateTime expirationDateUtc) {
    this.expirationDateUtc = expirationDateUtc;
    return this;
  }

  /**
   * Get expirationDateUtc
   * @return expirationDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDateUtc() {
    return expirationDateUtc;
  }

  public void setExpirationDateUtc(@javax.annotation.Nullable OffsetDateTime expirationDateUtc) {
    this.expirationDateUtc = expirationDateUtc;
  }


  public SubscriptionPlanDto expirationMode(@javax.annotation.Nullable ExpirationMode expirationMode) {
    this.expirationMode = expirationMode;
    return this;
  }

  /**
   * Get expirationMode
   * @return expirationMode
   */
  @javax.annotation.Nullable
  public ExpirationMode getExpirationMode() {
    return expirationMode;
  }

  public void setExpirationMode(@javax.annotation.Nullable ExpirationMode expirationMode) {
    this.expirationMode = expirationMode;
  }


  public SubscriptionPlanDto validDaysCount(@javax.annotation.Nullable Integer validDaysCount) {
    this.validDaysCount = validDaysCount;
    return this;
  }

  /**
   * Get validDaysCount
   * @return validDaysCount
   */
  @javax.annotation.Nullable
  public Integer getValidDaysCount() {
    return validDaysCount;
  }

  public void setValidDaysCount(@javax.annotation.Nullable Integer validDaysCount) {
    this.validDaysCount = validDaysCount;
  }


  public SubscriptionPlanDto trialDaysCount(@javax.annotation.Nullable Integer trialDaysCount) {
    this.trialDaysCount = trialDaysCount;
    return this;
  }

  /**
   * Get trialDaysCount
   * @return trialDaysCount
   */
  @javax.annotation.Nullable
  public Integer getTrialDaysCount() {
    return trialDaysCount;
  }

  public void setTrialDaysCount(@javax.annotation.Nullable Integer trialDaysCount) {
    this.trialDaysCount = trialDaysCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPlanDto subscriptionPlanDto = (SubscriptionPlanDto) o;
    return Objects.equals(this.expirationDateUtc, subscriptionPlanDto.expirationDateUtc) &&
        Objects.equals(this.expirationMode, subscriptionPlanDto.expirationMode) &&
        Objects.equals(this.validDaysCount, subscriptionPlanDto.validDaysCount) &&
        Objects.equals(this.trialDaysCount, subscriptionPlanDto.trialDaysCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(expirationDateUtc, expirationMode, validDaysCount, trialDaysCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPlanDto {\n");
    sb.append("    expirationDateUtc: ").append(toIndentedString(expirationDateUtc)).append("\n");
    sb.append("    expirationMode: ").append(toIndentedString(expirationMode)).append("\n");
    sb.append("    validDaysCount: ").append(toIndentedString(validDaysCount)).append("\n");
    sb.append("    trialDaysCount: ").append(toIndentedString(trialDaysCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("expiration_date_utc", "expiration_mode", "valid_days_count", "trial_days_count"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPlanDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPlanDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPlanDto is not found in the empty JSON string", SubscriptionPlanDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPlanDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPlanDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `expiration_mode`
      if (jsonObj.get("expiration_mode") != null && !jsonObj.get("expiration_mode").isJsonNull()) {
        ExpirationMode.validateJsonElement(jsonObj.get("expiration_mode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPlanDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPlanDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPlanDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPlanDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPlanDto>() {
           @Override
           public void write(JsonWriter out, SubscriptionPlanDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPlanDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPlanDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPlanDto
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPlanDto
   */
  public static SubscriptionPlanDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPlanDto.class);
  }

  /**
   * Convert an instance of SubscriptionPlanDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

