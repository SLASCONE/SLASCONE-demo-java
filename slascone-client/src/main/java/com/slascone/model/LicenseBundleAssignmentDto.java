/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.ResourceDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * LicenseBundleAssignmentDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class LicenseBundleAssignmentDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_BUNDLE_ID = "bundle_id";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  @javax.annotation.Nonnull
  private UUID bundleId;

  public static final String SERIALIZED_NAME_LICENSE_ID = "license_id";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  @javax.annotation.Nonnull
  private UUID licenseId;

  public static final String SERIALIZED_NAME_LICENSE_NAME = "license_name";
  @SerializedName(SERIALIZED_NAME_LICENSE_NAME)
  @javax.annotation.Nullable
  private String licenseName;

  public static final String SERIALIZED_NAME_LICENSE_DESCRIPTION = "license_description";
  @SerializedName(SERIALIZED_NAME_LICENSE_DESCRIPTION)
  @javax.annotation.Nullable
  private String licenseDescription;

  public static final String SERIALIZED_NAME_LICENSE_TEMPLATE_NAME = "license_template_name";
  @SerializedName(SERIALIZED_NAME_LICENSE_TEMPLATE_NAME)
  @javax.annotation.Nullable
  private String licenseTemplateName;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  @javax.annotation.Nonnull
  private UUID productId;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "product_name";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  @javax.annotation.Nullable
  private String productName;

  public static final String SERIALIZED_NAME_PRODUCT_LOGO = "product_logo";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LOGO)
  @javax.annotation.Nullable
  private ResourceDto productLogo;

  public static final String SERIALIZED_NAME_CREATED_DATE_UTC = "created_date_utc";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime createdDateUtc;

  public static final String SERIALIZED_NAME_MODIFIED_DATE_UTC = "modified_date_utc";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDateUtc;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "last_modified_by";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  @javax.annotation.Nullable
  private String lastModifiedBy;

  public LicenseBundleAssignmentDto() {
  }

  public LicenseBundleAssignmentDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public LicenseBundleAssignmentDto bundleId(@javax.annotation.Nonnull UUID bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nonnull
  public UUID getBundleId() {
    return bundleId;
  }

  public void setBundleId(@javax.annotation.Nonnull UUID bundleId) {
    this.bundleId = bundleId;
  }


  public LicenseBundleAssignmentDto licenseId(@javax.annotation.Nonnull UUID licenseId) {
    this.licenseId = licenseId;
    return this;
  }

  /**
   * Get licenseId
   * @return licenseId
   */
  @javax.annotation.Nonnull
  public UUID getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(@javax.annotation.Nonnull UUID licenseId) {
    this.licenseId = licenseId;
  }


  public LicenseBundleAssignmentDto licenseName(@javax.annotation.Nullable String licenseName) {
    this.licenseName = licenseName;
    return this;
  }

  /**
   * Get licenseName
   * @return licenseName
   */
  @javax.annotation.Nullable
  public String getLicenseName() {
    return licenseName;
  }

  public void setLicenseName(@javax.annotation.Nullable String licenseName) {
    this.licenseName = licenseName;
  }


  public LicenseBundleAssignmentDto licenseDescription(@javax.annotation.Nullable String licenseDescription) {
    this.licenseDescription = licenseDescription;
    return this;
  }

  /**
   * Get licenseDescription
   * @return licenseDescription
   */
  @javax.annotation.Nullable
  public String getLicenseDescription() {
    return licenseDescription;
  }

  public void setLicenseDescription(@javax.annotation.Nullable String licenseDescription) {
    this.licenseDescription = licenseDescription;
  }


  public LicenseBundleAssignmentDto licenseTemplateName(@javax.annotation.Nullable String licenseTemplateName) {
    this.licenseTemplateName = licenseTemplateName;
    return this;
  }

  /**
   * Get licenseTemplateName
   * @return licenseTemplateName
   */
  @javax.annotation.Nullable
  public String getLicenseTemplateName() {
    return licenseTemplateName;
  }

  public void setLicenseTemplateName(@javax.annotation.Nullable String licenseTemplateName) {
    this.licenseTemplateName = licenseTemplateName;
  }


  public LicenseBundleAssignmentDto productId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nonnull
  public UUID getProductId() {
    return productId;
  }

  public void setProductId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
  }


  public LicenseBundleAssignmentDto productName(@javax.annotation.Nullable String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Get productName
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(@javax.annotation.Nullable String productName) {
    this.productName = productName;
  }


  public LicenseBundleAssignmentDto productLogo(@javax.annotation.Nullable ResourceDto productLogo) {
    this.productLogo = productLogo;
    return this;
  }

  /**
   * Get productLogo
   * @return productLogo
   */
  @javax.annotation.Nullable
  public ResourceDto getProductLogo() {
    return productLogo;
  }

  public void setProductLogo(@javax.annotation.Nullable ResourceDto productLogo) {
    this.productLogo = productLogo;
  }


  public LicenseBundleAssignmentDto createdDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
    return this;
  }

  /**
   * Get createdDateUtc
   * @return createdDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateUtc() {
    return createdDateUtc;
  }

  public void setCreatedDateUtc(@javax.annotation.Nullable OffsetDateTime createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
  }


  public LicenseBundleAssignmentDto modifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
    return this;
  }

  /**
   * Get modifiedDateUtc
   * @return modifiedDateUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDateUtc() {
    return modifiedDateUtc;
  }

  public void setModifiedDateUtc(@javax.annotation.Nullable OffsetDateTime modifiedDateUtc) {
    this.modifiedDateUtc = modifiedDateUtc;
  }


  public LicenseBundleAssignmentDto lastModifiedBy(@javax.annotation.Nullable String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Get lastModifiedBy
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(@javax.annotation.Nullable String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseBundleAssignmentDto licenseBundleAssignmentDto = (LicenseBundleAssignmentDto) o;
    return Objects.equals(this.id, licenseBundleAssignmentDto.id) &&
        Objects.equals(this.bundleId, licenseBundleAssignmentDto.bundleId) &&
        Objects.equals(this.licenseId, licenseBundleAssignmentDto.licenseId) &&
        Objects.equals(this.licenseName, licenseBundleAssignmentDto.licenseName) &&
        Objects.equals(this.licenseDescription, licenseBundleAssignmentDto.licenseDescription) &&
        Objects.equals(this.licenseTemplateName, licenseBundleAssignmentDto.licenseTemplateName) &&
        Objects.equals(this.productId, licenseBundleAssignmentDto.productId) &&
        Objects.equals(this.productName, licenseBundleAssignmentDto.productName) &&
        Objects.equals(this.productLogo, licenseBundleAssignmentDto.productLogo) &&
        Objects.equals(this.createdDateUtc, licenseBundleAssignmentDto.createdDateUtc) &&
        Objects.equals(this.modifiedDateUtc, licenseBundleAssignmentDto.modifiedDateUtc) &&
        Objects.equals(this.lastModifiedBy, licenseBundleAssignmentDto.lastModifiedBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, bundleId, licenseId, licenseName, licenseDescription, licenseTemplateName, productId, productName, productLogo, createdDateUtc, modifiedDateUtc, lastModifiedBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseBundleAssignmentDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    licenseName: ").append(toIndentedString(licenseName)).append("\n");
    sb.append("    licenseDescription: ").append(toIndentedString(licenseDescription)).append("\n");
    sb.append("    licenseTemplateName: ").append(toIndentedString(licenseTemplateName)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productLogo: ").append(toIndentedString(productLogo)).append("\n");
    sb.append("    createdDateUtc: ").append(toIndentedString(createdDateUtc)).append("\n");
    sb.append("    modifiedDateUtc: ").append(toIndentedString(modifiedDateUtc)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "bundle_id", "license_id", "license_name", "license_description", "license_template_name", "product_id", "product_name", "product_logo", "created_date_utc", "modified_date_utc", "last_modified_by"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("id", "bundle_id", "license_id", "product_id"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseBundleAssignmentDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseBundleAssignmentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseBundleAssignmentDto is not found in the empty JSON string", LicenseBundleAssignmentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseBundleAssignmentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseBundleAssignmentDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseBundleAssignmentDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("bundle_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_id").toString()));
      }
      if (!jsonObj.get("license_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_id").toString()));
      }
      if ((jsonObj.get("license_name") != null && !jsonObj.get("license_name").isJsonNull()) && !jsonObj.get("license_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_name").toString()));
      }
      if ((jsonObj.get("license_description") != null && !jsonObj.get("license_description").isJsonNull()) && !jsonObj.get("license_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_description").toString()));
      }
      if ((jsonObj.get("license_template_name") != null && !jsonObj.get("license_template_name").isJsonNull()) && !jsonObj.get("license_template_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_template_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_template_name").toString()));
      }
      if (!jsonObj.get("product_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
      }
      if ((jsonObj.get("product_name") != null && !jsonObj.get("product_name").isJsonNull()) && !jsonObj.get("product_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_name").toString()));
      }
      // validate the optional field `product_logo`
      if (jsonObj.get("product_logo") != null && !jsonObj.get("product_logo").isJsonNull()) {
        ResourceDto.validateJsonElement(jsonObj.get("product_logo"));
      }
      if ((jsonObj.get("last_modified_by") != null && !jsonObj.get("last_modified_by").isJsonNull()) && !jsonObj.get("last_modified_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified_by").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseBundleAssignmentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseBundleAssignmentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseBundleAssignmentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseBundleAssignmentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseBundleAssignmentDto>() {
           @Override
           public void write(JsonWriter out, LicenseBundleAssignmentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseBundleAssignmentDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseBundleAssignmentDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseBundleAssignmentDto
   * @throws IOException if the JSON string is invalid with respect to LicenseBundleAssignmentDto
   */
  public static LicenseBundleAssignmentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseBundleAssignmentDto.class);
  }

  /**
   * Convert an instance of LicenseBundleAssignmentDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

