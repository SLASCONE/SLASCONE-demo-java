/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.ConsumptionBalanceMode;
import com.slascone.model.ConsumptionResetPeriod;
import com.slascone.model.TemplateLimitationAlertDto;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * TemplateLimitationDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class TemplateLimitationDto {
  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  @javax.annotation.Nullable
  private UUID templateId;

  public static final String SERIALIZED_NAME_LIMITATION_ID = "limitation_id";
  @SerializedName(SERIALIZED_NAME_LIMITATION_ID)
  @javax.annotation.Nonnull
  private UUID limitationId;

  public static final String SERIALIZED_NAME_LIMITATION_NAME = "limitation_name";
  @SerializedName(SERIALIZED_NAME_LIMITATION_NAME)
  @javax.annotation.Nullable
  private String limitationName;

  public static final String SERIALIZED_NAME_IS_ADJUSTABLE = "is_adjustable";
  @SerializedName(SERIALIZED_NAME_IS_ADJUSTABLE)
  @javax.annotation.Nullable
  private Boolean isAdjustable;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_CONSUMPTION_RESET_MODE = "consumption_reset_mode";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION_RESET_MODE)
  @javax.annotation.Nullable
  private ConsumptionResetPeriod consumptionResetMode;

  public static final String SERIALIZED_NAME_CONSUMPTION_RESET_PERIOD_DAYS = "consumption_reset_period_days";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION_RESET_PERIOD_DAYS)
  @javax.annotation.Nullable
  private Integer consumptionResetPeriodDays;

  public static final String SERIALIZED_NAME_GOODWILL = "goodwill";
  @SerializedName(SERIALIZED_NAME_GOODWILL)
  @javax.annotation.Nullable
  private BigDecimal goodwill;

  public static final String SERIALIZED_NAME_ENFORCE_LIMIT = "enforce_limit";
  @SerializedName(SERIALIZED_NAME_ENFORCE_LIMIT)
  @javax.annotation.Nullable
  private Boolean enforceLimit;

  public static final String SERIALIZED_NAME_USER_PROVISIONING = "user_provisioning";
  @SerializedName(SERIALIZED_NAME_USER_PROVISIONING)
  @javax.annotation.Nullable
  private Boolean userProvisioning;

  public static final String SERIALIZED_NAME_CONSUMPTION_BALANCE_MODE = "consumption_balance_mode";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION_BALANCE_MODE)
  @javax.annotation.Nullable
  private ConsumptionBalanceMode consumptionBalanceMode;

  public static final String SERIALIZED_NAME_ALERTS = "alerts";
  @SerializedName(SERIALIZED_NAME_ALERTS)
  @javax.annotation.Nullable
  private List<TemplateLimitationAlertDto> alerts;

  public TemplateLimitationDto() {
  }

  public TemplateLimitationDto templateId(@javax.annotation.Nullable UUID templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Get templateId
   * @return templateId
   */
  @javax.annotation.Nullable
  public UUID getTemplateId() {
    return templateId;
  }

  public void setTemplateId(@javax.annotation.Nullable UUID templateId) {
    this.templateId = templateId;
  }


  public TemplateLimitationDto limitationId(@javax.annotation.Nonnull UUID limitationId) {
    this.limitationId = limitationId;
    return this;
  }

  /**
   * Get limitationId
   * @return limitationId
   */
  @javax.annotation.Nonnull
  public UUID getLimitationId() {
    return limitationId;
  }

  public void setLimitationId(@javax.annotation.Nonnull UUID limitationId) {
    this.limitationId = limitationId;
  }


  public TemplateLimitationDto limitationName(@javax.annotation.Nullable String limitationName) {
    this.limitationName = limitationName;
    return this;
  }

  /**
   * Get limitationName
   * @return limitationName
   */
  @javax.annotation.Nullable
  public String getLimitationName() {
    return limitationName;
  }

  public void setLimitationName(@javax.annotation.Nullable String limitationName) {
    this.limitationName = limitationName;
  }


  public TemplateLimitationDto isAdjustable(@javax.annotation.Nullable Boolean isAdjustable) {
    this.isAdjustable = isAdjustable;
    return this;
  }

  /**
   * Get isAdjustable
   * @return isAdjustable
   */
  @javax.annotation.Nullable
  public Boolean getIsAdjustable() {
    return isAdjustable;
  }

  public void setIsAdjustable(@javax.annotation.Nullable Boolean isAdjustable) {
    this.isAdjustable = isAdjustable;
  }


  public TemplateLimitationDto limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public TemplateLimitationDto consumptionResetMode(@javax.annotation.Nullable ConsumptionResetPeriod consumptionResetMode) {
    this.consumptionResetMode = consumptionResetMode;
    return this;
  }

  /**
   * Get consumptionResetMode
   * @return consumptionResetMode
   */
  @javax.annotation.Nullable
  public ConsumptionResetPeriod getConsumptionResetMode() {
    return consumptionResetMode;
  }

  public void setConsumptionResetMode(@javax.annotation.Nullable ConsumptionResetPeriod consumptionResetMode) {
    this.consumptionResetMode = consumptionResetMode;
  }


  public TemplateLimitationDto consumptionResetPeriodDays(@javax.annotation.Nullable Integer consumptionResetPeriodDays) {
    this.consumptionResetPeriodDays = consumptionResetPeriodDays;
    return this;
  }

  /**
   * Get consumptionResetPeriodDays
   * @return consumptionResetPeriodDays
   */
  @javax.annotation.Nullable
  public Integer getConsumptionResetPeriodDays() {
    return consumptionResetPeriodDays;
  }

  public void setConsumptionResetPeriodDays(@javax.annotation.Nullable Integer consumptionResetPeriodDays) {
    this.consumptionResetPeriodDays = consumptionResetPeriodDays;
  }


  public TemplateLimitationDto goodwill(@javax.annotation.Nullable BigDecimal goodwill) {
    this.goodwill = goodwill;
    return this;
  }

  /**
   * Get goodwill
   * @return goodwill
   */
  @javax.annotation.Nullable
  public BigDecimal getGoodwill() {
    return goodwill;
  }

  public void setGoodwill(@javax.annotation.Nullable BigDecimal goodwill) {
    this.goodwill = goodwill;
  }


  public TemplateLimitationDto enforceLimit(@javax.annotation.Nullable Boolean enforceLimit) {
    this.enforceLimit = enforceLimit;
    return this;
  }

  /**
   * Get enforceLimit
   * @return enforceLimit
   */
  @javax.annotation.Nullable
  public Boolean getEnforceLimit() {
    return enforceLimit;
  }

  public void setEnforceLimit(@javax.annotation.Nullable Boolean enforceLimit) {
    this.enforceLimit = enforceLimit;
  }


  public TemplateLimitationDto userProvisioning(@javax.annotation.Nullable Boolean userProvisioning) {
    this.userProvisioning = userProvisioning;
    return this;
  }

  /**
   * Get userProvisioning
   * @return userProvisioning
   */
  @javax.annotation.Nullable
  public Boolean getUserProvisioning() {
    return userProvisioning;
  }

  public void setUserProvisioning(@javax.annotation.Nullable Boolean userProvisioning) {
    this.userProvisioning = userProvisioning;
  }


  public TemplateLimitationDto consumptionBalanceMode(@javax.annotation.Nullable ConsumptionBalanceMode consumptionBalanceMode) {
    this.consumptionBalanceMode = consumptionBalanceMode;
    return this;
  }

  /**
   * Get consumptionBalanceMode
   * @return consumptionBalanceMode
   */
  @javax.annotation.Nullable
  public ConsumptionBalanceMode getConsumptionBalanceMode() {
    return consumptionBalanceMode;
  }

  public void setConsumptionBalanceMode(@javax.annotation.Nullable ConsumptionBalanceMode consumptionBalanceMode) {
    this.consumptionBalanceMode = consumptionBalanceMode;
  }


  public TemplateLimitationDto alerts(@javax.annotation.Nullable List<TemplateLimitationAlertDto> alerts) {
    this.alerts = alerts;
    return this;
  }

  public TemplateLimitationDto addAlertsItem(TemplateLimitationAlertDto alertsItem) {
    if (this.alerts == null) {
      this.alerts = new ArrayList<>();
    }
    this.alerts.add(alertsItem);
    return this;
  }

  /**
   * Get alerts
   * @return alerts
   */
  @javax.annotation.Nullable
  public List<TemplateLimitationAlertDto> getAlerts() {
    return alerts;
  }

  public void setAlerts(@javax.annotation.Nullable List<TemplateLimitationAlertDto> alerts) {
    this.alerts = alerts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateLimitationDto templateLimitationDto = (TemplateLimitationDto) o;
    return Objects.equals(this.templateId, templateLimitationDto.templateId) &&
        Objects.equals(this.limitationId, templateLimitationDto.limitationId) &&
        Objects.equals(this.limitationName, templateLimitationDto.limitationName) &&
        Objects.equals(this.isAdjustable, templateLimitationDto.isAdjustable) &&
        Objects.equals(this.limit, templateLimitationDto.limit) &&
        Objects.equals(this.consumptionResetMode, templateLimitationDto.consumptionResetMode) &&
        Objects.equals(this.consumptionResetPeriodDays, templateLimitationDto.consumptionResetPeriodDays) &&
        Objects.equals(this.goodwill, templateLimitationDto.goodwill) &&
        Objects.equals(this.enforceLimit, templateLimitationDto.enforceLimit) &&
        Objects.equals(this.userProvisioning, templateLimitationDto.userProvisioning) &&
        Objects.equals(this.consumptionBalanceMode, templateLimitationDto.consumptionBalanceMode) &&
        Objects.equals(this.alerts, templateLimitationDto.alerts);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateId, limitationId, limitationName, isAdjustable, limit, consumptionResetMode, consumptionResetPeriodDays, goodwill, enforceLimit, userProvisioning, consumptionBalanceMode, alerts);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateLimitationDto {\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    limitationId: ").append(toIndentedString(limitationId)).append("\n");
    sb.append("    limitationName: ").append(toIndentedString(limitationName)).append("\n");
    sb.append("    isAdjustable: ").append(toIndentedString(isAdjustable)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    consumptionResetMode: ").append(toIndentedString(consumptionResetMode)).append("\n");
    sb.append("    consumptionResetPeriodDays: ").append(toIndentedString(consumptionResetPeriodDays)).append("\n");
    sb.append("    goodwill: ").append(toIndentedString(goodwill)).append("\n");
    sb.append("    enforceLimit: ").append(toIndentedString(enforceLimit)).append("\n");
    sb.append("    userProvisioning: ").append(toIndentedString(userProvisioning)).append("\n");
    sb.append("    consumptionBalanceMode: ").append(toIndentedString(consumptionBalanceMode)).append("\n");
    sb.append("    alerts: ").append(toIndentedString(alerts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("template_id", "limitation_id", "limitation_name", "is_adjustable", "limit", "consumption_reset_mode", "consumption_reset_period_days", "goodwill", "enforce_limit", "user_provisioning", "consumption_balance_mode", "alerts"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("limitation_id"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateLimitationDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateLimitationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateLimitationDto is not found in the empty JSON string", TemplateLimitationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateLimitationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateLimitationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TemplateLimitationDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      if (!jsonObj.get("limitation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitation_id").toString()));
      }
      if ((jsonObj.get("limitation_name") != null && !jsonObj.get("limitation_name").isJsonNull()) && !jsonObj.get("limitation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitation_name").toString()));
      }
      // validate the optional field `consumption_reset_mode`
      if (jsonObj.get("consumption_reset_mode") != null && !jsonObj.get("consumption_reset_mode").isJsonNull()) {
        ConsumptionResetPeriod.validateJsonElement(jsonObj.get("consumption_reset_mode"));
      }
      // validate the optional field `consumption_balance_mode`
      if (jsonObj.get("consumption_balance_mode") != null && !jsonObj.get("consumption_balance_mode").isJsonNull()) {
        ConsumptionBalanceMode.validateJsonElement(jsonObj.get("consumption_balance_mode"));
      }
      if (jsonObj.get("alerts") != null && !jsonObj.get("alerts").isJsonNull()) {
        JsonArray jsonArrayalerts = jsonObj.getAsJsonArray("alerts");
        if (jsonArrayalerts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alerts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alerts` to be an array in the JSON string but got `%s`", jsonObj.get("alerts").toString()));
          }

          // validate the optional field `alerts` (array)
          for (int i = 0; i < jsonArrayalerts.size(); i++) {
            TemplateLimitationAlertDto.validateJsonElement(jsonArrayalerts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateLimitationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateLimitationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateLimitationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateLimitationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateLimitationDto>() {
           @Override
           public void write(JsonWriter out, TemplateLimitationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateLimitationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateLimitationDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateLimitationDto
   * @throws IOException if the JSON string is invalid with respect to TemplateLimitationDto
   */
  public static TemplateLimitationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateLimitationDto.class);
  }

  /**
   * Convert an instance of TemplateLimitationDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

