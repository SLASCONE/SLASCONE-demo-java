/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.ConsumptionResetPeriod;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * LicenseLimitationDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class LicenseLimitationDto {
  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  @javax.annotation.Nonnull
  private UUID productId;

  public static final String SERIALIZED_NAME_LIMITATION_ID = "limitation_id";
  @SerializedName(SERIALIZED_NAME_LIMITATION_ID)
  @javax.annotation.Nonnull
  private UUID limitationId;

  public static final String SERIALIZED_NAME_LIMITATION_NAME = "limitation_name";
  @SerializedName(SERIALIZED_NAME_LIMITATION_NAME)
  @javax.annotation.Nullable
  private String limitationName;

  public static final String SERIALIZED_NAME_LIMITATION_DESCRIPTION = "limitation_description";
  @SerializedName(SERIALIZED_NAME_LIMITATION_DESCRIPTION)
  @javax.annotation.Nullable
  private String limitationDescription;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_CONSUMPTION_RESET_MODE = "consumption_reset_mode";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION_RESET_MODE)
  @javax.annotation.Nullable
  private ConsumptionResetPeriod consumptionResetMode;

  public static final String SERIALIZED_NAME_CONSUMPTION_RESET_PERIOD_DAYS = "consumption_reset_period_days";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION_RESET_PERIOD_DAYS)
  @javax.annotation.Nullable
  private Integer consumptionResetPeriodDays;

  public static final String SERIALIZED_NAME_CURRENT_USER_TRANSACTION_ID = "current_user_transaction_id";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_TRANSACTION_ID)
  @javax.annotation.Nullable
  private UUID currentUserTransactionId;

  public LicenseLimitationDto() {
  }

  public LicenseLimitationDto productId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nonnull
  public UUID getProductId() {
    return productId;
  }

  public void setProductId(@javax.annotation.Nonnull UUID productId) {
    this.productId = productId;
  }


  public LicenseLimitationDto limitationId(@javax.annotation.Nonnull UUID limitationId) {
    this.limitationId = limitationId;
    return this;
  }

  /**
   * Get limitationId
   * @return limitationId
   */
  @javax.annotation.Nonnull
  public UUID getLimitationId() {
    return limitationId;
  }

  public void setLimitationId(@javax.annotation.Nonnull UUID limitationId) {
    this.limitationId = limitationId;
  }


  public LicenseLimitationDto limitationName(@javax.annotation.Nullable String limitationName) {
    this.limitationName = limitationName;
    return this;
  }

  /**
   * Get limitationName
   * @return limitationName
   */
  @javax.annotation.Nullable
  public String getLimitationName() {
    return limitationName;
  }

  public void setLimitationName(@javax.annotation.Nullable String limitationName) {
    this.limitationName = limitationName;
  }


  public LicenseLimitationDto limitationDescription(@javax.annotation.Nullable String limitationDescription) {
    this.limitationDescription = limitationDescription;
    return this;
  }

  /**
   * Get limitationDescription
   * @return limitationDescription
   */
  @javax.annotation.Nullable
  public String getLimitationDescription() {
    return limitationDescription;
  }

  public void setLimitationDescription(@javax.annotation.Nullable String limitationDescription) {
    this.limitationDescription = limitationDescription;
  }


  public LicenseLimitationDto limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public LicenseLimitationDto consumptionResetMode(@javax.annotation.Nullable ConsumptionResetPeriod consumptionResetMode) {
    this.consumptionResetMode = consumptionResetMode;
    return this;
  }

  /**
   * Get consumptionResetMode
   * @return consumptionResetMode
   */
  @javax.annotation.Nullable
  public ConsumptionResetPeriod getConsumptionResetMode() {
    return consumptionResetMode;
  }

  public void setConsumptionResetMode(@javax.annotation.Nullable ConsumptionResetPeriod consumptionResetMode) {
    this.consumptionResetMode = consumptionResetMode;
  }


  public LicenseLimitationDto consumptionResetPeriodDays(@javax.annotation.Nullable Integer consumptionResetPeriodDays) {
    this.consumptionResetPeriodDays = consumptionResetPeriodDays;
    return this;
  }

  /**
   * Get consumptionResetPeriodDays
   * @return consumptionResetPeriodDays
   */
  @javax.annotation.Nullable
  public Integer getConsumptionResetPeriodDays() {
    return consumptionResetPeriodDays;
  }

  public void setConsumptionResetPeriodDays(@javax.annotation.Nullable Integer consumptionResetPeriodDays) {
    this.consumptionResetPeriodDays = consumptionResetPeriodDays;
  }


  public LicenseLimitationDto currentUserTransactionId(@javax.annotation.Nullable UUID currentUserTransactionId) {
    this.currentUserTransactionId = currentUserTransactionId;
    return this;
  }

  /**
   * Get currentUserTransactionId
   * @return currentUserTransactionId
   */
  @javax.annotation.Nullable
  public UUID getCurrentUserTransactionId() {
    return currentUserTransactionId;
  }

  public void setCurrentUserTransactionId(@javax.annotation.Nullable UUID currentUserTransactionId) {
    this.currentUserTransactionId = currentUserTransactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseLimitationDto licenseLimitationDto = (LicenseLimitationDto) o;
    return Objects.equals(this.productId, licenseLimitationDto.productId) &&
        Objects.equals(this.limitationId, licenseLimitationDto.limitationId) &&
        Objects.equals(this.limitationName, licenseLimitationDto.limitationName) &&
        Objects.equals(this.limitationDescription, licenseLimitationDto.limitationDescription) &&
        Objects.equals(this.limit, licenseLimitationDto.limit) &&
        Objects.equals(this.consumptionResetMode, licenseLimitationDto.consumptionResetMode) &&
        Objects.equals(this.consumptionResetPeriodDays, licenseLimitationDto.consumptionResetPeriodDays) &&
        Objects.equals(this.currentUserTransactionId, licenseLimitationDto.currentUserTransactionId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(productId, limitationId, limitationName, limitationDescription, limit, consumptionResetMode, consumptionResetPeriodDays, currentUserTransactionId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseLimitationDto {\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    limitationId: ").append(toIndentedString(limitationId)).append("\n");
    sb.append("    limitationName: ").append(toIndentedString(limitationName)).append("\n");
    sb.append("    limitationDescription: ").append(toIndentedString(limitationDescription)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    consumptionResetMode: ").append(toIndentedString(consumptionResetMode)).append("\n");
    sb.append("    consumptionResetPeriodDays: ").append(toIndentedString(consumptionResetPeriodDays)).append("\n");
    sb.append("    currentUserTransactionId: ").append(toIndentedString(currentUserTransactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("product_id", "limitation_id", "limitation_name", "limitation_description", "limit", "consumption_reset_mode", "consumption_reset_period_days", "current_user_transaction_id"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("product_id", "limitation_id"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseLimitationDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseLimitationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseLimitationDto is not found in the empty JSON string", LicenseLimitationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseLimitationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseLimitationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseLimitationDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("product_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
      }
      if (!jsonObj.get("limitation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitation_id").toString()));
      }
      if ((jsonObj.get("limitation_name") != null && !jsonObj.get("limitation_name").isJsonNull()) && !jsonObj.get("limitation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitation_name").toString()));
      }
      if ((jsonObj.get("limitation_description") != null && !jsonObj.get("limitation_description").isJsonNull()) && !jsonObj.get("limitation_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitation_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitation_description").toString()));
      }
      // validate the optional field `consumption_reset_mode`
      if (jsonObj.get("consumption_reset_mode") != null && !jsonObj.get("consumption_reset_mode").isJsonNull()) {
        ConsumptionResetPeriod.validateJsonElement(jsonObj.get("consumption_reset_mode"));
      }
      if ((jsonObj.get("current_user_transaction_id") != null && !jsonObj.get("current_user_transaction_id").isJsonNull()) && !jsonObj.get("current_user_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_transaction_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseLimitationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseLimitationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseLimitationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseLimitationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseLimitationDto>() {
           @Override
           public void write(JsonWriter out, LicenseLimitationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseLimitationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseLimitationDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseLimitationDto
   * @throws IOException if the JSON string is invalid with respect to LicenseLimitationDto
   */
  public static LicenseLimitationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseLimitationDto.class);
  }

  /**
   * Convert an instance of LicenseLimitationDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

