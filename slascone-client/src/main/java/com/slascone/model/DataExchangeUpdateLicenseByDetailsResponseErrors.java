/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.ErrorResultObjects;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * DataExchangeUpdateLicenseByDetailsResponseErrors
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class DataExchangeUpdateLicenseByDetailsResponseErrors {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_HELP = "help";
  @SerializedName(SERIALIZED_NAME_HELP)
  @javax.annotation.Nullable
  private String help;

  public static final String SERIALIZED_NAME_EXPECTED_ERRORS = "expectedErrors";
  @SerializedName(SERIALIZED_NAME_EXPECTED_ERRORS)
  @javax.annotation.Nullable
  private List<ErrorResultObjects> expectedErrors;

  public DataExchangeUpdateLicenseByDetailsResponseErrors() {
  }

  public DataExchangeUpdateLicenseByDetailsResponseErrors id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public DataExchangeUpdateLicenseByDetailsResponseErrors message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public DataExchangeUpdateLicenseByDetailsResponseErrors help(@javax.annotation.Nullable String help) {
    this.help = help;
    return this;
  }

  /**
   * Get help
   * @return help
   */
  @javax.annotation.Nullable
  public String getHelp() {
    return help;
  }

  public void setHelp(@javax.annotation.Nullable String help) {
    this.help = help;
  }


  public DataExchangeUpdateLicenseByDetailsResponseErrors expectedErrors(@javax.annotation.Nullable List<ErrorResultObjects> expectedErrors) {
    this.expectedErrors = expectedErrors;
    return this;
  }

  public DataExchangeUpdateLicenseByDetailsResponseErrors addExpectedErrorsItem(ErrorResultObjects expectedErrorsItem) {
    if (this.expectedErrors == null) {
      this.expectedErrors = new ArrayList<>();
    }
    this.expectedErrors.add(expectedErrorsItem);
    return this;
  }

  /**
   * Get expectedErrors
   * @return expectedErrors
   */
  @javax.annotation.Nullable
  public List<ErrorResultObjects> getExpectedErrors() {
    return expectedErrors;
  }

  public void setExpectedErrors(@javax.annotation.Nullable List<ErrorResultObjects> expectedErrors) {
    this.expectedErrors = expectedErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExchangeUpdateLicenseByDetailsResponseErrors dataExchangeUpdateLicenseByDetailsResponseErrors = (DataExchangeUpdateLicenseByDetailsResponseErrors) o;
    return Objects.equals(this.id, dataExchangeUpdateLicenseByDetailsResponseErrors.id) &&
        Objects.equals(this.message, dataExchangeUpdateLicenseByDetailsResponseErrors.message) &&
        Objects.equals(this.help, dataExchangeUpdateLicenseByDetailsResponseErrors.help) &&
        Objects.equals(this.expectedErrors, dataExchangeUpdateLicenseByDetailsResponseErrors.expectedErrors);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, message, help, expectedErrors);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExchangeUpdateLicenseByDetailsResponseErrors {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    help: ").append(toIndentedString(help)).append("\n");
    sb.append("    expectedErrors: ").append(toIndentedString(expectedErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "message", "help", "expectedErrors"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataExchangeUpdateLicenseByDetailsResponseErrors
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataExchangeUpdateLicenseByDetailsResponseErrors.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataExchangeUpdateLicenseByDetailsResponseErrors is not found in the empty JSON string", DataExchangeUpdateLicenseByDetailsResponseErrors.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataExchangeUpdateLicenseByDetailsResponseErrors.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataExchangeUpdateLicenseByDetailsResponseErrors` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("help") != null && !jsonObj.get("help").isJsonNull()) && !jsonObj.get("help").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `help` to be a primitive type in the JSON string but got `%s`", jsonObj.get("help").toString()));
      }
      if (jsonObj.get("expectedErrors") != null && !jsonObj.get("expectedErrors").isJsonNull()) {
        JsonArray jsonArrayexpectedErrors = jsonObj.getAsJsonArray("expectedErrors");
        if (jsonArrayexpectedErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expectedErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expectedErrors` to be an array in the JSON string but got `%s`", jsonObj.get("expectedErrors").toString()));
          }

          // validate the optional field `expectedErrors` (array)
          for (int i = 0; i < jsonArrayexpectedErrors.size(); i++) {
            ErrorResultObjects.validateJsonElement(jsonArrayexpectedErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataExchangeUpdateLicenseByDetailsResponseErrors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataExchangeUpdateLicenseByDetailsResponseErrors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataExchangeUpdateLicenseByDetailsResponseErrors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataExchangeUpdateLicenseByDetailsResponseErrors.class));

       return (TypeAdapter<T>) new TypeAdapter<DataExchangeUpdateLicenseByDetailsResponseErrors>() {
           @Override
           public void write(JsonWriter out, DataExchangeUpdateLicenseByDetailsResponseErrors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataExchangeUpdateLicenseByDetailsResponseErrors read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataExchangeUpdateLicenseByDetailsResponseErrors given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataExchangeUpdateLicenseByDetailsResponseErrors
   * @throws IOException if the JSON string is invalid with respect to DataExchangeUpdateLicenseByDetailsResponseErrors
   */
  public static DataExchangeUpdateLicenseByDetailsResponseErrors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataExchangeUpdateLicenseByDetailsResponseErrors.class);
  }

  /**
   * Convert an instance of DataExchangeUpdateLicenseByDetailsResponseErrors to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

