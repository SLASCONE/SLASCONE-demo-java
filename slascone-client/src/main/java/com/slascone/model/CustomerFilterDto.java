/*
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.slascone.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.slascone.model.SortTypeDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.slascone.JSON;

/**
 * CustomerFilterDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class CustomerFilterDto {
  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  @javax.annotation.Nullable
  private Integer page;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  @javax.annotation.Nullable
  private Integer pageSize;

  public static final String SERIALIZED_NAME_SEARCH_TEXT = "search_text";
  @SerializedName(SERIALIZED_NAME_SEARCH_TEXT)
  @javax.annotation.Nullable
  private String searchText;

  public static final String SERIALIZED_NAME_PLZ_QUERY = "plz_query";
  @SerializedName(SERIALIZED_NAME_PLZ_QUERY)
  @javax.annotation.Nullable
  private String plzQuery;

  public static final String SERIALIZED_NAME_CUSTOMER_TYPES = "customer_types";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TYPES)
  @javax.annotation.Nullable
  private List<UUID> customerTypes;

  public static final String SERIALIZED_NAME_RESELLER_TYPES = "reseller_types";
  @SerializedName(SERIALIZED_NAME_RESELLER_TYPES)
  @javax.annotation.Nullable
  private List<UUID> resellerTypes;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Integer> tags;

  public static final String SERIALIZED_NAME_START_CHARACTER = "start_character";
  @SerializedName(SERIALIZED_NAME_START_CHARACTER)
  @javax.annotation.Nullable
  private String startCharacter;

  public static final String SERIALIZED_NAME_SORT_TYPE = "sort_type";
  @SerializedName(SERIALIZED_NAME_SORT_TYPE)
  @javax.annotation.Nullable
  private SortTypeDto sortType;

  public static final String SERIALIZED_NAME_DESCENDING = "descending";
  @SerializedName(SERIALIZED_NAME_DESCENDING)
  @javax.annotation.Nullable
  private Boolean descending;

  public CustomerFilterDto() {
  }

  public CustomerFilterDto page(@javax.annotation.Nullable Integer page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(@javax.annotation.Nullable Integer page) {
    this.page = page;
  }


  public CustomerFilterDto pageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
  }


  public CustomerFilterDto searchText(@javax.annotation.Nullable String searchText) {
    this.searchText = searchText;
    return this;
  }

  /**
   * Get searchText
   * @return searchText
   */
  @javax.annotation.Nullable
  public String getSearchText() {
    return searchText;
  }

  public void setSearchText(@javax.annotation.Nullable String searchText) {
    this.searchText = searchText;
  }


  public CustomerFilterDto plzQuery(@javax.annotation.Nullable String plzQuery) {
    this.plzQuery = plzQuery;
    return this;
  }

  /**
   * Get plzQuery
   * @return plzQuery
   */
  @javax.annotation.Nullable
  public String getPlzQuery() {
    return plzQuery;
  }

  public void setPlzQuery(@javax.annotation.Nullable String plzQuery) {
    this.plzQuery = plzQuery;
  }


  public CustomerFilterDto customerTypes(@javax.annotation.Nullable List<UUID> customerTypes) {
    this.customerTypes = customerTypes;
    return this;
  }

  public CustomerFilterDto addCustomerTypesItem(UUID customerTypesItem) {
    if (this.customerTypes == null) {
      this.customerTypes = new ArrayList<>();
    }
    this.customerTypes.add(customerTypesItem);
    return this;
  }

  /**
   * Get customerTypes
   * @return customerTypes
   */
  @javax.annotation.Nullable
  public List<UUID> getCustomerTypes() {
    return customerTypes;
  }

  public void setCustomerTypes(@javax.annotation.Nullable List<UUID> customerTypes) {
    this.customerTypes = customerTypes;
  }


  public CustomerFilterDto resellerTypes(@javax.annotation.Nullable List<UUID> resellerTypes) {
    this.resellerTypes = resellerTypes;
    return this;
  }

  public CustomerFilterDto addResellerTypesItem(UUID resellerTypesItem) {
    if (this.resellerTypes == null) {
      this.resellerTypes = new ArrayList<>();
    }
    this.resellerTypes.add(resellerTypesItem);
    return this;
  }

  /**
   * Get resellerTypes
   * @return resellerTypes
   */
  @javax.annotation.Nullable
  public List<UUID> getResellerTypes() {
    return resellerTypes;
  }

  public void setResellerTypes(@javax.annotation.Nullable List<UUID> resellerTypes) {
    this.resellerTypes = resellerTypes;
  }


  public CustomerFilterDto tags(@javax.annotation.Nullable List<Integer> tags) {
    this.tags = tags;
    return this;
  }

  public CustomerFilterDto addTagsItem(Integer tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Integer> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Integer> tags) {
    this.tags = tags;
  }


  public CustomerFilterDto startCharacter(@javax.annotation.Nullable String startCharacter) {
    this.startCharacter = startCharacter;
    return this;
  }

  /**
   * Get startCharacter
   * @return startCharacter
   */
  @javax.annotation.Nullable
  public String getStartCharacter() {
    return startCharacter;
  }

  public void setStartCharacter(@javax.annotation.Nullable String startCharacter) {
    this.startCharacter = startCharacter;
  }


  public CustomerFilterDto sortType(@javax.annotation.Nullable SortTypeDto sortType) {
    this.sortType = sortType;
    return this;
  }

  /**
   * Get sortType
   * @return sortType
   */
  @javax.annotation.Nullable
  public SortTypeDto getSortType() {
    return sortType;
  }

  public void setSortType(@javax.annotation.Nullable SortTypeDto sortType) {
    this.sortType = sortType;
  }


  public CustomerFilterDto descending(@javax.annotation.Nullable Boolean descending) {
    this.descending = descending;
    return this;
  }

  /**
   * Get descending
   * @return descending
   */
  @javax.annotation.Nullable
  public Boolean getDescending() {
    return descending;
  }

  public void setDescending(@javax.annotation.Nullable Boolean descending) {
    this.descending = descending;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerFilterDto customerFilterDto = (CustomerFilterDto) o;
    return Objects.equals(this.page, customerFilterDto.page) &&
        Objects.equals(this.pageSize, customerFilterDto.pageSize) &&
        Objects.equals(this.searchText, customerFilterDto.searchText) &&
        Objects.equals(this.plzQuery, customerFilterDto.plzQuery) &&
        Objects.equals(this.customerTypes, customerFilterDto.customerTypes) &&
        Objects.equals(this.resellerTypes, customerFilterDto.resellerTypes) &&
        Objects.equals(this.tags, customerFilterDto.tags) &&
        Objects.equals(this.startCharacter, customerFilterDto.startCharacter) &&
        Objects.equals(this.sortType, customerFilterDto.sortType) &&
        Objects.equals(this.descending, customerFilterDto.descending);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, pageSize, searchText, plzQuery, customerTypes, resellerTypes, tags, startCharacter, sortType, descending);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerFilterDto {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    searchText: ").append(toIndentedString(searchText)).append("\n");
    sb.append("    plzQuery: ").append(toIndentedString(plzQuery)).append("\n");
    sb.append("    customerTypes: ").append(toIndentedString(customerTypes)).append("\n");
    sb.append("    resellerTypes: ").append(toIndentedString(resellerTypes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    startCharacter: ").append(toIndentedString(startCharacter)).append("\n");
    sb.append("    sortType: ").append(toIndentedString(sortType)).append("\n");
    sb.append("    descending: ").append(toIndentedString(descending)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("page", "page_size", "search_text", "plz_query", "customer_types", "reseller_types", "tags", "start_character", "sort_type", "descending"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerFilterDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerFilterDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerFilterDto is not found in the empty JSON string", CustomerFilterDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerFilterDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerFilterDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("search_text") != null && !jsonObj.get("search_text").isJsonNull()) && !jsonObj.get("search_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_text").toString()));
      }
      if ((jsonObj.get("plz_query") != null && !jsonObj.get("plz_query").isJsonNull()) && !jsonObj.get("plz_query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plz_query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plz_query").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customer_types") != null && !jsonObj.get("customer_types").isJsonNull() && !jsonObj.get("customer_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_types` to be an array in the JSON string but got `%s`", jsonObj.get("customer_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reseller_types") != null && !jsonObj.get("reseller_types").isJsonNull() && !jsonObj.get("reseller_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reseller_types` to be an array in the JSON string but got `%s`", jsonObj.get("reseller_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("start_character") != null && !jsonObj.get("start_character").isJsonNull()) && !jsonObj.get("start_character").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_character` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_character").toString()));
      }
      // validate the optional field `sort_type`
      if (jsonObj.get("sort_type") != null && !jsonObj.get("sort_type").isJsonNull()) {
        SortTypeDto.validateJsonElement(jsonObj.get("sort_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerFilterDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerFilterDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerFilterDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerFilterDto.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerFilterDto>() {
           @Override
           public void write(JsonWriter out, CustomerFilterDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerFilterDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerFilterDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerFilterDto
   * @throws IOException if the JSON string is invalid with respect to CustomerFilterDto
   */
  public static CustomerFilterDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerFilterDto.class);
  }

  /**
   * Convert an instance of CustomerFilterDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

